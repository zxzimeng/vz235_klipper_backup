2024-11-24 15:42:20,632 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '70', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '5', 'homing_positive_dir': 'false', 'homing_speed': '5', 'second_homing_speed': '1', 'homing_retract_speed': '2'}, 'safe_z_home': {'home_xy_position': '112.5, 112.5', 'z_hop': '20'}, 'bed_mesh': {'horizontal_move_z': '1', 'algorithm': 'bicubic', 'zero_reference_position': '112.5, 1122.5', 'mesh_min': '40, 40', 'mesh_max': '200, 200', 'probe_count': '16,16'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '-34', 'y_offset': '0', 'no_stop_probe': '', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,290', 'screw3': '290,290', 'screw4': '290,20'}, 'screws_tilt_adjust': {'screw1': '20,20', 'screw1_name': '"Front Left"', 'screw2': '290, 20', 'screw2_name': '"Front Right"', 'screw3': '290, 290', 'screw3_name': '"Back Right"', 'screw4': '20, 290', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 70}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'safe_z_home': {'home_xy_position': [112.5, 112.5], 'z_hop': 20.0, 'z_hop_speed': 15.0, 'speed': 50.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [16, 16], 'mesh_min': [40.0, 40.0], 'mesh_max': [200.0, 200.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'zero_reference_position': [112.5, 1122.5], 'horizontal_move_z': 1.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 200.0, 'homing_speed': 5.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 2.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 1.2, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': -34.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 290.0], 'screw2_name': 'screw at 20.000,290.000', 'screw3': [290.0, 290.0], 'screw3_name': 'screw at 290.000,290.000', 'screw4': [290.0, 20.0], 'screw4_name': 'screw at 290.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 20.0], 'screw1_name': '"Front Left"', 'screw2': [290.0, 20.0], 'screw2_name': '"Front Right"', 'screw3': [290.0, 290.0], 'screw3_name': '"Back Right"', 'screw4': [20.0, 290.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 15:42:20,635 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 15:42:20,637 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 15:42:20,637 [printer.py:reinit()] - # Extruders: 1
2024-11-24 15:42:20,638 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 15:42:20,638 [printer.py:reinit()] - # Fans: 2
2024-11-24 15:42:20,638 [printer.py:reinit()] - # Output pins: 1
2024-11-24 15:42:20,638 [printer.py:reinit()] - # Leds: 0
2024-11-24 15:42:20,639 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 15:42:20,647 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-11-24 15:42:20,648 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a09
2024-11-24 15:42:20,648 [functions.py:log_start()] - Python version: 3.9
2024-11-24 15:42:20,665 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 15:42:20,668 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 15:42:20,990 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 15:42:20,991 [screen.py:init_klipper()] - Printer initialized
2024-11-24 15:42:20,991 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-11-24 15:42:20,992 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 15:42:20,994 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 15:42:21,000 [screen.py:_load_panel()] - Loading panel: main_menu
2024-11-24 15:42:21,144 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 15:42:21,161 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 15:42:21,171 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 15:42:21,181 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 15:42:21,191 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 15:42:21,254 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 15:42:21,257 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 15:42:21,275 [screen.py:init_tempstore()] - Tempstore not ready: {'result': {}} Retrying in 5 seconds
2024-11-24 15:42:21,276 [main_menu.py:update_graph_visibility()] - Could not create graph tempstore: []
2024-11-24 15:42:26,524 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 15:42:26,564 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 15:42:26,568 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 15:42:26,588 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 15:42:03,055 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-11-24 15:42:03,056 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a09
2024-11-24 15:42:03,056 [functions.py:log_start()] - Python version: 3.9
2024-11-24 15:42:03,605 [config.py:get_config_file_location()] - Passed config (-c): .
2024-11-24 15:42:03,606 [config.py:__init__()] - Config path location: /home/biqu/KlipperScreen/ks_includes/defaults.conf
2024-11-24 15:42:03,624 [config.py:__init__()] - Configured printers: [
  {
    "Printer": {
      "moonraker_host": "127.0.0.1",
      "moonraker_port": "7125",
      "moonraker_api_key": ""
    }
  }
]
2024-11-24 15:42:04,348 [config.py:create_translations()] - Selected lang: None OS lang: en_US
2024-11-24 15:42:04,349 [config.py:install_language()] - Using lang en
2024-11-24 15:42:04,377 [screen.py:__init__()] - Monitors: 1 using number: 0
2024-11-24 15:42:04,380 [screen.py:__init__()] - Wayland: False Display name: :0
2024-11-24 15:42:04,386 [screen.py:__init__()] - Screen resolution: 1024x768
2024-11-24 15:42:04,390 [KlippyGtk.py:__init__()] - Font size: 23.8 (medium)
2024-11-24 15:42:05,345 [screen.py:set_screenblanking_timeout()] - Changing screen blanking to: 3600
2024-11-24 15:42:05,358 [screen.py:set_screenblanking_timeout()] - Using DPMS
2024-11-24 15:42:05,369 [screen.py:initial_connection()] - Default printer: None
2024-11-24 15:42:05,446 [screen.py:connect_printer()] - Connecting to printer: Printer
2024-11-24 15:42:05,447 [screen.py:_load_panel()] - Loading panel: splash_screen
2024-11-24 15:42:05,520 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 15:42:05,534 [KlippyWebsocket.py:connect()] - Attempting to connect
2024-11-24 15:42:05,535 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 15:42:05,567 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/access/oneshot_token
2024-11-24 15:42:05,586 [KlippyWebsocket.py:connect()] - Starting websocket thread
2024-11-24 15:42:05,604 [_logging.py:info()] - Websocket connected
2024-11-24 15:42:05,605 [KlippyWebsocket.py:on_open()] - Moonraker Websocket Open
2024-11-24 15:42:05,859 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 15:42:05,878 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 15:42:05,896 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 15:42:05,897 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'ready', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 15:42:05,897 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 15:42:05,919 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 15:42:06,034 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '70', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '5', 'homing_positive_dir': 'false', 'homing_speed': '5', 'second_homing_speed': '1', 'homing_retract_speed': '2'}, 'safe_z_home': {'home_xy_position': '112.5, 112.5', 'z_hop': '20'}, 'bed_mesh': {'horizontal_move_z': '1', 'algorithm': 'bicubic', 'zero_reference_position': '112.5, 1122.5', 'mesh_min': '40, 40', 'mesh_max': '200, 200', 'probe_count': '16,16'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '-34', 'y_offset': '0', 'no_stop_probe': '', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,290', 'screw3': '290,290', 'screw4': '290,20'}, 'screws_tilt_adjust': {'screw1': '20,20', 'screw1_name': '"Front Left"', 'screw2': '290, 20', 'screw2_name': '"Front Right"', 'screw3': '290, 290', 'screw3_name': '"Back Right"', 'screw4': '20, 290', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 70}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'safe_z_home': {'home_xy_position': [112.5, 112.5], 'z_hop': 20.0, 'z_hop_speed': 15.0, 'speed': 50.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [16, 16], 'mesh_min': [40.0, 40.0], 'mesh_max': [200.0, 200.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'zero_reference_position': [112.5, 1122.5], 'horizontal_move_z': 1.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 200.0, 'homing_speed': 5.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 2.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 1.2, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': -34.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 290.0], 'screw2_name': 'screw at 20.000,290.000', 'screw3': [290.0, 290.0], 'screw3_name': 'screw at 290.000,290.000', 'screw4': [290.0, 20.0], 'screw4_name': 'screw at 290.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 20.0], 'screw1_name': '"Front Left"', 'screw2': [290.0, 20.0], 'screw2_name': '"Front Right"', 'screw3': [290.0, 290.0], 'screw3_name': '"Back Right"', 'screw4': [20.0, 290.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 15:42:06,038 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 15:42:06,039 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 15:42:06,040 [printer.py:reinit()] - # Extruders: 1
2024-11-24 15:42:06,040 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 15:42:06,040 [printer.py:reinit()] - # Fans: 2
2024-11-24 15:42:06,040 [printer.py:reinit()] - # Output pins: 1
2024-11-24 15:42:06,040 [printer.py:reinit()] - # Leds: 0
2024-11-24 15:42:06,040 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 15:42:06,067 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 15:42:06,070 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 15:42:06,407 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 15:42:06,408 [screen.py:init_klipper()] - Printer initialized
2024-11-24 15:42:06,409 [printer.py:change_state()] - Changing state from 'disconnected' to 'ready'
2024-11-24 15:42:06,410 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 15:42:06,434 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 15:42:06,452 [screen.py:_load_panel()] - Loading panel: main_menu
2024-11-24 15:42:06,893 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 15:42:06,910 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 15:42:06,921 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 15:42:06,931 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 15:42:06,941 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 15:42:07,007 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 15:42:07,009 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 15:42:07,052 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 15:42:07,055 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 15:42:07,074 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 15:53:29,337 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 15:53:29,338 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 15:53:29,339 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 15:53:29,340 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 15:53:29,345 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 15:53:29,414 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 15:53:32,324 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 15:53:32,352 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 15:53:32,376 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 15:53:32,377 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 15:53:32,378 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 15:53:32,717 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 15:53:32,765 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '60', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '5', 'homing_positive_dir': 'false', 'homing_speed': '5', 'second_homing_speed': '1', 'homing_retract_speed': '2'}, 'safe_z_home': {'home_xy_position': '112.5, 112.5', 'z_hop': '20'}, 'bed_mesh': {'horizontal_move_z': '1', 'algorithm': 'bicubic', 'zero_reference_position': '112.5, 1122.5', 'mesh_min': '40, 40', 'mesh_max': '200, 200', 'probe_count': '16,16'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '-34', 'y_offset': '0', 'no_stop_probe': '', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,290', 'screw3': '290,290', 'screw4': '290,20'}, 'screws_tilt_adjust': {'screw1': '20,20', 'screw1_name': '"Front Left"', 'screw2': '290, 20', 'screw2_name': '"Front Right"', 'screw3': '290, 290', 'screw3_name': '"Back Right"', 'screw4': '20, 290', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 60}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'safe_z_home': {'home_xy_position': [112.5, 112.5], 'z_hop': 20.0, 'z_hop_speed': 15.0, 'speed': 50.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [16, 16], 'mesh_min': [40.0, 40.0], 'mesh_max': [200.0, 200.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'zero_reference_position': [112.5, 1122.5], 'horizontal_move_z': 1.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 200.0, 'homing_speed': 5.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 2.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 1.2, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': -34.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 290.0], 'screw2_name': 'screw at 20.000,290.000', 'screw3': [290.0, 290.0], 'screw3_name': 'screw at 290.000,290.000', 'screw4': [290.0, 20.0], 'screw4_name': 'screw at 290.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 20.0], 'screw1_name': '"Front Left"', 'screw2': [290.0, 20.0], 'screw2_name': '"Front Right"', 'screw3': [290.0, 290.0], 'screw3_name': '"Back Right"', 'screw4': [20.0, 290.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 15:53:32,770 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 15:53:32,772 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 15:53:32,773 [printer.py:reinit()] - # Extruders: 1
2024-11-24 15:53:32,773 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 15:53:32,773 [printer.py:reinit()] - # Fans: 2
2024-11-24 15:53:32,774 [printer.py:reinit()] - # Output pins: 1
2024-11-24 15:53:32,774 [printer.py:reinit()] - # Leds: 0
2024-11-24 15:53:32,775 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 15:53:32,810 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 15:53:32,813 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 15:53:33,110 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 15:53:33,110 [screen.py:init_klipper()] - Printer initialized
2024-11-24 15:53:33,111 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 15:53:33,111 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 15:53:34,783 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 15:53:34,783 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 15:53:34,785 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 15:53:34,791 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 15:53:34,915 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 15:53:34,932 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 15:53:34,941 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 15:53:34,951 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 15:53:34,961 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 15:53:35,023 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 15:53:35,025 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 15:53:35,070 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 15:53:35,073 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 15:53:35,092 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 15:54:44,741 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-11-24 15:54:44,741 [printer.py:change_state()] - Adding callback for state: shutdown
2024-11-24 15:54:44,760 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 15:54:44,766 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 15:54:44,847 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 15:54:55,003 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-11-24 15:54:55,004 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 15:54:55,007 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 15:54:55,008 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 15:54:55,012 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 15:54:55,105 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 15:54:58,320 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 15:54:58,339 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 15:54:58,357 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 15:54:58,357 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 15:54:58,358 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 15:54:58,380 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 15:54:58,419 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '60', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '5', 'homing_positive_dir': 'false', 'homing_speed': '5', 'second_homing_speed': '1', 'homing_retract_speed': '2'}, 'safe_z_home': {'home_xy_position': '112.5, 112.5', 'z_hop': '20'}, 'bed_mesh': {'horizontal_move_z': '1', 'algorithm': 'bicubic', 'zero_reference_position': '112.5, 1122.5', 'mesh_min': '40, 40', 'mesh_max': '200, 200', 'probe_count': '16,16'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '-34', 'y_offset': '0', 'no_stop_probe': '', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,290', 'screw3': '290,290', 'screw4': '290,20'}, 'screws_tilt_adjust': {'screw1': '20,20', 'screw1_name': '"Front Left"', 'screw2': '290, 20', 'screw2_name': '"Front Right"', 'screw3': '290, 290', 'screw3_name': '"Back Right"', 'screw4': '20, 290', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 60}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'safe_z_home': {'home_xy_position': [112.5, 112.5], 'z_hop': 20.0, 'z_hop_speed': 15.0, 'speed': 50.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [16, 16], 'mesh_min': [40.0, 40.0], 'mesh_max': [200.0, 200.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'zero_reference_position': [112.5, 1122.5], 'horizontal_move_z': 1.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 200.0, 'homing_speed': 5.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 2.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 1.2, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': -34.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 290.0], 'screw2_name': 'screw at 20.000,290.000', 'screw3': [290.0, 290.0], 'screw3_name': 'screw at 290.000,290.000', 'screw4': [290.0, 20.0], 'screw4_name': 'screw at 290.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 20.0], 'screw1_name': '"Front Left"', 'screw2': [290.0, 20.0], 'screw2_name': '"Front Right"', 'screw3': [290.0, 290.0], 'screw3_name': '"Back Right"', 'screw4': [20.0, 290.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 15:54:58,423 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 15:54:58,425 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 15:54:58,425 [printer.py:reinit()] - # Extruders: 1
2024-11-24 15:54:58,425 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 15:54:58,425 [printer.py:reinit()] - # Fans: 2
2024-11-24 15:54:58,426 [printer.py:reinit()] - # Output pins: 1
2024-11-24 15:54:58,426 [printer.py:reinit()] - # Leds: 0
2024-11-24 15:54:58,426 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 15:54:58,452 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 15:54:58,455 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 15:54:58,774 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 15:54:58,774 [screen.py:init_klipper()] - Printer initialized
2024-11-24 15:54:58,775 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 15:54:58,775 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 15:55:00,459 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 15:55:00,460 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 15:55:00,464 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 15:55:00,469 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 15:55:00,592 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 15:55:00,609 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 15:55:00,619 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 15:55:00,629 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 15:55:00,639 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 15:55:00,711 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 15:55:00,714 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 15:55:00,758 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 15:55:00,765 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 15:55:00,784 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 15:56:28,449 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 15:56:28,449 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 15:56:28,451 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 15:56:28,452 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 15:56:28,456 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 15:56:28,523 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 15:56:31,323 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 15:56:31,344 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 15:56:31,364 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 15:56:31,365 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 15:56:31,365 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 15:56:31,491 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 15:56:31,531 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '60', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '5', 'homing_positive_dir': 'false', 'homing_speed': '5', 'second_homing_speed': '1', 'homing_retract_speed': '2'}, 'safe_z_home': {'home_xy_position': '112.5, 112.5', 'z_hop': '20'}, 'bed_mesh': {'horizontal_move_z': '1', 'algorithm': 'bicubic', 'zero_reference_position': '112.5, 1122.5', 'mesh_min': '40, 40', 'mesh_max': '200, 200', 'probe_count': '16,16'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '10', 'z_offset': '0', 'x_offset': '-34', 'y_offset': '0', 'no_stop_probe': '', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,290', 'screw3': '290,290', 'screw4': '290,20'}, 'screws_tilt_adjust': {'screw1': '20,20', 'screw1_name': '"Front Left"', 'screw2': '290, 20', 'screw2_name': '"Front Right"', 'screw3': '290, 290', 'screw3_name': '"Back Right"', 'screw4': '20, 290', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 60}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'safe_z_home': {'home_xy_position': [112.5, 112.5], 'z_hop': 20.0, 'z_hop_speed': 15.0, 'speed': 50.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [16, 16], 'mesh_min': [40.0, 40.0], 'mesh_max': [200.0, 200.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'zero_reference_position': [112.5, 1122.5], 'horizontal_move_z': 1.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 200.0, 'homing_speed': 5.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 2.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 1.2, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '10', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': -34.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 290.0], 'screw2_name': 'screw at 20.000,290.000', 'screw3': [290.0, 290.0], 'screw3_name': 'screw at 290.000,290.000', 'screw4': [290.0, 20.0], 'screw4_name': 'screw at 290.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 20.0], 'screw1_name': '"Front Left"', 'screw2': [290.0, 20.0], 'screw2_name': '"Front Right"', 'screw3': [290.0, 290.0], 'screw3_name': '"Back Right"', 'screw4': [20.0, 290.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 15:56:31,536 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 15:56:31,537 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 15:56:31,538 [printer.py:reinit()] - # Extruders: 1
2024-11-24 15:56:31,539 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 15:56:31,539 [printer.py:reinit()] - # Fans: 2
2024-11-24 15:56:31,541 [printer.py:reinit()] - # Output pins: 1
2024-11-24 15:56:31,541 [printer.py:reinit()] - # Leds: 0
2024-11-24 15:56:31,542 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 15:56:31,569 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 15:56:31,572 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 15:56:31,856 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 15:56:31,857 [screen.py:init_klipper()] - Printer initialized
2024-11-24 15:56:31,857 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 15:56:31,858 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 15:56:33,770 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 15:56:33,770 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 15:56:33,774 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 15:56:33,779 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 15:56:33,931 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 15:56:33,955 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 15:56:33,967 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 15:56:33,979 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 15:56:33,991 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 15:56:34,074 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 15:56:34,077 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 15:56:34,128 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 15:56:34,132 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 15:56:34,159 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 15:57:03,167 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 15:57:03,168 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 15:57:03,170 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 15:57:03,171 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 15:57:03,175 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 15:57:03,252 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 15:57:06,320 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 15:57:06,343 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 15:57:06,364 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 15:57:06,365 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 15:57:06,365 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 15:57:06,388 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 15:57:06,427 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '60', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '5', 'homing_positive_dir': 'false', 'homing_speed': '5', 'second_homing_speed': '1', 'homing_retract_speed': '2'}, 'safe_z_home': {'home_xy_position': '112.5, 112.5', 'z_hop': '20'}, 'bed_mesh': {'horizontal_move_z': '1', 'algorithm': 'bicubic', 'zero_reference_position': '112.5, 1122.5', 'mesh_min': '40, 40', 'mesh_max': '200, 200', 'probe_count': '16,16'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '10', 'z_offset': '0', 'x_offset': '-34', 'y_offset': '0', 'no_stop_probe': '', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,290', 'screw3': '290,290', 'screw4': '290,20'}, 'screws_tilt_adjust': {'screw1': '20,20', 'screw1_name': '"Front Left"', 'screw2': '290, 20', 'screw2_name': '"Front Right"', 'screw3': '290, 290', 'screw3_name': '"Back Right"', 'screw4': '20, 290', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 60}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'safe_z_home': {'home_xy_position': [112.5, 112.5], 'z_hop': 20.0, 'z_hop_speed': 15.0, 'speed': 50.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [16, 16], 'mesh_min': [40.0, 40.0], 'mesh_max': [200.0, 200.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'zero_reference_position': [112.5, 1122.5], 'horizontal_move_z': 1.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 5.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 2.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 1.2, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '10', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': -34.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 290.0], 'screw2_name': 'screw at 20.000,290.000', 'screw3': [290.0, 290.0], 'screw3_name': 'screw at 290.000,290.000', 'screw4': [290.0, 20.0], 'screw4_name': 'screw at 290.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 20.0], 'screw1_name': '"Front Left"', 'screw2': [290.0, 20.0], 'screw2_name': '"Front Right"', 'screw3': [290.0, 290.0], 'screw3_name': '"Back Right"', 'screw4': [20.0, 290.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 15:57:06,432 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 15:57:06,433 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 15:57:06,434 [printer.py:reinit()] - # Extruders: 1
2024-11-24 15:57:06,434 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 15:57:06,434 [printer.py:reinit()] - # Fans: 2
2024-11-24 15:57:06,434 [printer.py:reinit()] - # Output pins: 1
2024-11-24 15:57:06,434 [printer.py:reinit()] - # Leds: 0
2024-11-24 15:57:06,435 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 15:57:06,467 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 15:57:06,470 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 15:57:06,774 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 15:57:06,774 [screen.py:init_klipper()] - Printer initialized
2024-11-24 15:57:06,775 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 15:57:06,775 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 15:57:08,454 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 15:57:08,455 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 15:57:08,459 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 15:57:08,464 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 15:57:08,589 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 15:57:08,605 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 15:57:08,616 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 15:57:08,626 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 15:57:08,636 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 15:57:08,700 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 15:57:08,703 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 15:57:08,751 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 15:57:08,754 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 15:57:08,774 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 15:58:13,129 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-11-24 15:58:13,129 [printer.py:change_state()] - Adding callback for state: shutdown
2024-11-24 15:58:13,146 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 15:58:13,151 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 15:58:13,218 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 15:58:47,607 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-11-24 15:58:47,608 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 15:58:47,610 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 15:58:47,610 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 15:58:47,613 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 15:58:47,688 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 15:58:51,319 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 15:58:51,339 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 15:58:51,360 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 15:58:51,361 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 15:58:51,362 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 15:58:51,392 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 15:58:51,442 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '60', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '5', 'homing_positive_dir': 'false', 'homing_speed': '5', 'second_homing_speed': '1', 'homing_retract_speed': '2'}, 'safe_z_home': {'home_xy_position': '112.5, 112.5', 'z_hop': '20'}, 'bed_mesh': {'horizontal_move_z': '1', 'algorithm': 'bicubic', 'zero_reference_position': '112.5, 1122.5', 'mesh_min': '40, 40', 'mesh_max': '200, 200', 'probe_count': '16,16'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '10', 'z_offset': '0', 'x_offset': '-34', 'y_offset': '0', 'no_stop_probe': '', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,290', 'screw3': '290,290', 'screw4': '290,20'}, 'screws_tilt_adjust': {'screw1': '20,20', 'screw1_name': '"Front Left"', 'screw2': '290, 20', 'screw2_name': '"Front Right"', 'screw3': '290, 290', 'screw3_name': '"Back Right"', 'screw4': '20, 290', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 60}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'safe_z_home': {'home_xy_position': [112.5, 112.5], 'z_hop': 20.0, 'z_hop_speed': 15.0, 'speed': 50.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [16, 16], 'mesh_min': [40.0, 40.0], 'mesh_max': [200.0, 200.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'zero_reference_position': [112.5, 1122.5], 'horizontal_move_z': 1.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 5.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 2.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 1.2, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '10', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': -34.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 290.0], 'screw2_name': 'screw at 20.000,290.000', 'screw3': [290.0, 290.0], 'screw3_name': 'screw at 290.000,290.000', 'screw4': [290.0, 20.0], 'screw4_name': 'screw at 290.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 20.0], 'screw1_name': '"Front Left"', 'screw2': [290.0, 20.0], 'screw2_name': '"Front Right"', 'screw3': [290.0, 290.0], 'screw3_name': '"Back Right"', 'screw4': [20.0, 290.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 15:58:51,448 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 15:58:51,450 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 15:58:51,451 [printer.py:reinit()] - # Extruders: 1
2024-11-24 15:58:51,451 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 15:58:51,452 [printer.py:reinit()] - # Fans: 2
2024-11-24 15:58:51,453 [printer.py:reinit()] - # Output pins: 1
2024-11-24 15:58:51,454 [printer.py:reinit()] - # Leds: 0
2024-11-24 15:58:51,455 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 15:58:51,489 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 15:58:51,493 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 15:58:51,780 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 15:58:51,780 [screen.py:init_klipper()] - Printer initialized
2024-11-24 15:58:51,781 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 15:58:51,782 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 15:58:52,922 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 15:58:52,922 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 15:58:52,925 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 15:58:52,930 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 15:58:53,056 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 15:58:53,072 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 15:58:53,082 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 15:58:53,092 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 15:58:53,102 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 15:58:53,177 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 15:58:53,180 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 15:58:53,229 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 15:58:53,232 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 15:58:53,251 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 16:06:18,261 [screen.py:show_popup_message()] - error: Must home axis first: 0.000 0.000 5.000 [25.000]
2024-11-24 16:07:15,126 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 16:07:15,127 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 16:07:15,130 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 16:07:15,130 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:07:15,134 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:07:15,205 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:07:18,319 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 16:07:18,339 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 16:07:18,358 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 16:07:18,359 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 16:07:18,359 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 16:07:18,381 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 16:07:18,432 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '60', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '3', 'homing_positive_dir': 'false', 'homing_speed': '14', 'second_homing_speed': '1', 'homing_retract_speed': '2'}, 'safe_z_home': {'home_xy_position': '112.5, 112.5', 'z_hop': '20'}, 'bed_mesh': {'horizontal_move_z': '1', 'algorithm': 'bicubic', 'zero_reference_position': '112.5, 1122.5', 'mesh_min': '40, 40', 'mesh_max': '200, 200', 'probe_count': '16,16'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '10', 'z_offset': '0', 'x_offset': '-34', 'y_offset': '0', 'no_stop_probe': '', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,290', 'screw3': '290,290', 'screw4': '290,20'}, 'screws_tilt_adjust': {'screw1': '20,20', 'screw1_name': '"Front Left"', 'screw2': '290, 20', 'screw2_name': '"Front Right"', 'screw3': '290, 290', 'screw3_name': '"Back Right"', 'screw4': '20, 290', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 60}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'safe_z_home': {'home_xy_position': [112.5, 112.5], 'z_hop': 20.0, 'z_hop_speed': 15.0, 'speed': 50.0, 'move_to_previous': False}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [16, 16], 'mesh_min': [40.0, 40.0], 'mesh_max': [200.0, 200.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'zero_reference_position': [112.5, 1122.5], 'horizontal_move_z': 1.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 14.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 2.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 1.2, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '10', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': -34.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 290.0], 'screw2_name': 'screw at 20.000,290.000', 'screw3': [290.0, 290.0], 'screw3_name': 'screw at 290.000,290.000', 'screw4': [290.0, 20.0], 'screw4_name': 'screw at 290.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 20.0], 'screw1_name': '"Front Left"', 'screw2': [290.0, 20.0], 'screw2_name': '"Front Right"', 'screw3': [290.0, 290.0], 'screw3_name': '"Back Right"', 'screw4': [20.0, 290.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 16:07:18,439 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:07:18,441 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 16:07:18,441 [printer.py:reinit()] - # Extruders: 1
2024-11-24 16:07:18,441 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 16:07:18,442 [printer.py:reinit()] - # Fans: 2
2024-11-24 16:07:18,442 [printer.py:reinit()] - # Output pins: 1
2024-11-24 16:07:18,444 [printer.py:reinit()] - # Leds: 0
2024-11-24 16:07:18,445 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 16:07:18,482 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 16:07:18,486 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 16:07:18,772 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 16:07:18,772 [screen.py:init_klipper()] - Printer initialized
2024-11-24 16:07:18,773 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 16:07:18,773 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 16:07:20,450 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 16:07:20,451 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 16:07:20,454 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 16:07:20,458 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:07:20,587 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 16:07:20,605 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 16:07:20,615 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 16:07:20,626 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 16:07:20,635 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 16:07:20,702 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 16:07:20,705 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 16:07:20,760 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 16:07:20,763 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 16:07:20,783 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 16:08:50,529 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 16:08:50,529 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 16:08:50,531 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 16:08:50,532 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:08:50,536 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:08:50,611 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:08:54,320 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 16:08:54,339 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 16:08:54,357 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 16:08:54,358 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 16:08:54,358 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 16:08:54,379 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 16:08:54,596 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': '\nG28 X\nG28 Y\nG28 Z'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '60', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '3', 'homing_positive_dir': 'false', 'homing_speed': '14', 'second_homing_speed': '1', 'homing_retract_speed': '2'}, 'safe_z_home': {'home_xy_position': '112.5, 112.5', 'z_hop': '20'}, 'bed_mesh': {'horizontal_move_z': '1', 'algorithm': 'bicubic', 'zero_reference_position': '112.5, 1122.5', 'mesh_min': '40, 40', 'mesh_max': '200, 200', 'probe_count': '16,16'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '10', 'z_offset': '0', 'x_offset': '-34', 'y_offset': '0', 'no_stop_probe': '', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,290', 'screw3': '290,290', 'screw4': '290,20'}, 'screws_tilt_adjust': {'screw1': '20,20', 'screw1_name': '"Front Left"', 'screw2': '290, 20', 'screw2_name': '"Front Right"', 'screw3': '290, 290', 'screw3_name': '"Back Right"', 'screw4': '20, 290', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {}}}
2024-11-24 16:08:54,600 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:08:54,601 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 16:08:54,602 [printer.py:reinit()] - # Extruders: 1
2024-11-24 16:08:54,602 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 16:08:54,603 [printer.py:reinit()] - # Fans: 2
2024-11-24 16:08:54,603 [printer.py:reinit()] - # Output pins: 1
2024-11-24 16:08:54,604 [printer.py:reinit()] - # Leds: 0
2024-11-24 16:08:54,605 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 16:08:54,630 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 16:08:54,634 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 16:08:54,907 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 16:08:54,907 [screen.py:init_klipper()] - Printer initialized
2024-11-24 16:08:54,908 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-11-24 16:08:54,908 [printer.py:change_state()] - Adding callback for state: error
2024-11-24 16:08:54,938 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:08:55,022 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:09:37,062 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-11-24 16:09:37,063 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 16:09:37,065 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 16:09:37,066 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:09:37,071 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:09:37,225 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:09:40,321 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 16:09:40,339 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 16:09:40,357 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 16:09:40,358 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 16:09:40,358 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 16:09:40,381 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 16:09:40,419 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': '\nG28 Z\nG0 Z10\nG28 X\nG28 Y'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '60', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '3', 'homing_positive_dir': 'false', 'homing_speed': '14', 'second_homing_speed': '1', 'homing_retract_speed': '2'}, 'bed_mesh': {'horizontal_move_z': '1', 'algorithm': 'bicubic', 'zero_reference_position': '112.5, 1122.5', 'mesh_min': '40, 40', 'mesh_max': '200, 200', 'probe_count': '16,16'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '10', 'z_offset': '0', 'x_offset': '-34', 'y_offset': '0', 'no_stop_probe': '', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,290', 'screw3': '290,290', 'screw4': '290,20'}, 'screws_tilt_adjust': {'screw1': '20,20', 'screw1_name': '"Front Left"', 'screw2': '290, 20', 'screw2_name': '"Front Right"', 'screw3': '290, 290', 'screw3_name': '"Back Right"', 'screw4': '20, 290', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'XYZ', 'gcode': '\nG28 Z\nG0 Z10\nG28 X\nG28 Y'}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 60}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [16, 16], 'mesh_min': [40.0, 40.0], 'mesh_max': [200.0, 200.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'zero_reference_position': [112.5, 1122.5], 'horizontal_move_z': 1.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 14.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 2.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 1.2, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '10', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': -34.0, 'y_offset': 0.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 290.0], 'screw2_name': 'screw at 20.000,290.000', 'screw3': [290.0, 290.0], 'screw3_name': 'screw at 290.000,290.000', 'screw4': [290.0, 20.0], 'screw4_name': 'screw at 290.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 20.0], 'screw1_name': '"Front Left"', 'screw2': [290.0, 20.0], 'screw2_name': '"Front Right"', 'screw3': [290.0, 290.0], 'screw3_name': '"Back Right"', 'screw4': [20.0, 290.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 16:09:40,423 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:09:40,425 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 16:09:40,425 [printer.py:reinit()] - # Extruders: 1
2024-11-24 16:09:40,425 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 16:09:40,425 [printer.py:reinit()] - # Fans: 2
2024-11-24 16:09:40,425 [printer.py:reinit()] - # Output pins: 1
2024-11-24 16:09:40,426 [printer.py:reinit()] - # Leds: 0
2024-11-24 16:09:40,426 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 16:09:40,452 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 16:09:40,455 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 16:09:40,765 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 16:09:40,766 [screen.py:init_klipper()] - Printer initialized
2024-11-24 16:09:40,767 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 16:09:40,767 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 16:09:42,210 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 16:09:42,211 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 16:09:42,215 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 16:09:42,220 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:09:42,343 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 16:09:42,359 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 16:09:42,370 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 16:09:42,380 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 16:09:42,389 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 16:09:42,453 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 16:09:42,456 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 16:09:42,505 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 16:09:42,508 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 16:09:42,527 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 16:09:42,584 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:09:47,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:09:52,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:09:57,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:10:02,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:10:07,025 [screen.py:show_popup_message()] - error: Move out of range: 290.000 20.000 5.000 [0.000]
2024-11-24 16:10:07,079 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:10:07,329 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:10:12,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:10:17,339 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:10:17,507 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:10:22,326 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:10:27,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:10:32,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:10:37,330 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:10:42,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:10:47,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:10:52,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:10:57,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:11:02,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:11:07,326 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:11:12,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:11:17,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:11:22,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:11:27,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:11:32,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:11:37,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:11:42,342 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:11:47,327 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:11:51,308 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 16:11:51,308 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 16:11:51,310 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 16:11:51,310 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:11:51,315 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:11:51,388 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:11:54,322 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 16:11:54,342 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 16:11:54,359 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 16:11:54,360 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 16:11:54,360 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 16:11:54,383 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 16:11:54,439 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': '\nG28 Z\nG0 Z10\nG28 X\nG28 Y'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '60', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '3', 'homing_positive_dir': 'false', 'homing_speed': '14', 'second_homing_speed': '1', 'homing_retract_speed': '2'}, 'bed_mesh': {'horizontal_move_z': '1', 'algorithm': 'bicubic', 'zero_reference_position': '112.5, 1122.5', 'mesh_min': '40, 40', 'mesh_max': '200, 200', 'probe_count': '16,16'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '10', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,290', 'screw3': '290,290', 'screw4': '290,20'}, 'screws_tilt_adjust': {'screw1': '20,40', 'screw1_name': '"Front Left"', 'screw2': '215,40', 'screw2_name': '"Front Right"', 'screw3': '215, 215', 'screw3_name': '"Back Right"', 'screw4': '40, 215', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'XYZ', 'gcode': '\nG28 Z\nG0 Z10\nG28 X\nG28 Y'}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 60}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [16, 16], 'mesh_min': [40.0, 40.0], 'mesh_max': [200.0, 200.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'zero_reference_position': [112.5, 1122.5], 'horizontal_move_z': 1.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 14.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 2.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 1.2, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '10', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 290.0], 'screw2_name': 'screw at 20.000,290.000', 'screw3': [290.0, 290.0], 'screw3_name': 'screw at 290.000,290.000', 'screw4': [290.0, 20.0], 'screw4_name': 'screw at 290.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 40.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 40.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 215.0], 'screw3_name': '"Back Right"', 'screw4': [40.0, 215.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 16:11:54,444 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:11:54,446 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 16:11:54,446 [printer.py:reinit()] - # Extruders: 1
2024-11-24 16:11:54,446 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 16:11:54,446 [printer.py:reinit()] - # Fans: 2
2024-11-24 16:11:54,447 [printer.py:reinit()] - # Output pins: 1
2024-11-24 16:11:54,447 [printer.py:reinit()] - # Leds: 0
2024-11-24 16:11:54,447 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 16:11:54,475 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 16:11:54,478 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 16:11:54,786 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 16:11:54,786 [screen.py:init_klipper()] - Printer initialized
2024-11-24 16:11:54,787 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 16:11:54,787 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 16:11:56,479 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 16:11:56,480 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 16:11:56,483 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 16:11:56,493 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:11:56,635 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 16:11:56,652 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 16:11:56,662 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 16:11:56,672 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 16:11:56,682 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 16:11:56,752 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 16:11:56,754 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 16:11:56,802 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 16:11:56,805 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 16:11:56,825 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 16:11:56,878 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:12:02,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:12:07,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:12:12,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:12:17,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:12:22,329 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:12:27,326 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:12:32,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:12:37,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:12:42,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:12:47,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:12:49,107 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 16:12:49,108 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 16:12:49,110 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 16:12:49,111 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:12:49,118 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:12:49,224 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:12:52,321 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 16:12:52,342 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 16:12:52,363 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 16:12:52,363 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 16:12:52,364 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 16:12:52,480 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 16:12:52,521 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': '\nG28 Z\nG0 Z10\nG28 X\nG28 Y'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '3', 'homing_positive_dir': 'false', 'homing_speed': '14', 'second_homing_speed': '1', 'homing_retract_speed': '2'}, 'bed_mesh': {'horizontal_move_z': '1', 'algorithm': 'bicubic', 'zero_reference_position': '112.5, 1122.5', 'mesh_min': '40, 40', 'mesh_max': '200, 200', 'probe_count': '16,16'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '10', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,290', 'screw3': '290,290', 'screw4': '290,20'}, 'screws_tilt_adjust': {'screw1': '20,40', 'screw1_name': '"Front Left"', 'screw2': '215,40', 'screw2_name': '"Front Right"', 'screw3': '215, 215', 'screw3_name': '"Back Right"', 'screw4': '40, 215', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'XYZ', 'gcode': '\nG28 Z\nG0 Z10\nG28 X\nG28 Y'}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [16, 16], 'mesh_min': [40.0, 40.0], 'mesh_max': [200.0, 200.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'zero_reference_position': [112.5, 1122.5], 'horizontal_move_z': 1.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 14.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 2.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 1.2, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '10', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 290.0], 'screw2_name': 'screw at 20.000,290.000', 'screw3': [290.0, 290.0], 'screw3_name': 'screw at 290.000,290.000', 'screw4': [290.0, 20.0], 'screw4_name': 'screw at 290.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 40.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 40.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 215.0], 'screw3_name': '"Back Right"', 'screw4': [40.0, 215.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 16:12:52,526 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:12:52,528 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 16:12:52,528 [printer.py:reinit()] - # Extruders: 1
2024-11-24 16:12:52,528 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 16:12:52,528 [printer.py:reinit()] - # Fans: 2
2024-11-24 16:12:52,529 [printer.py:reinit()] - # Output pins: 1
2024-11-24 16:12:52,529 [printer.py:reinit()] - # Leds: 0
2024-11-24 16:12:52,529 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 16:12:52,559 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 16:12:52,562 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 16:12:52,867 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 16:12:52,867 [screen.py:init_klipper()] - Printer initialized
2024-11-24 16:12:52,868 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 16:12:52,868 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 16:12:54,545 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 16:12:54,545 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 16:12:54,549 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 16:12:54,554 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:12:54,676 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 16:12:54,693 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 16:12:54,703 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 16:12:54,713 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 16:12:54,723 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 16:12:54,785 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 16:12:54,787 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 16:12:54,845 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 16:12:54,849 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 16:12:54,868 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 16:12:54,923 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:13:00,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:13:05,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:13:10,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:13:15,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:13:20,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:13:25,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:13:30,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:13:35,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:13:40,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:13:45,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:13:50,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:13:55,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:14:00,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:14:05,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:14:10,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:14:15,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:14:20,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:14:25,329 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:14:30,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:14:35,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:14:40,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:14:45,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:14:50,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:14:55,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:15:00,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:15:05,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:15:10,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:15:13,765 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 16:15:13,766 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 16:15:13,771 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 16:15:13,772 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:15:13,782 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:15:13,860 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:15:17,322 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 16:15:17,347 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 16:15:17,368 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 16:15:17,369 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 16:15:17,370 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 16:15:17,392 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 16:15:17,433 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': '\nFORCE_MOVE stepper=stepper_z velocity=10 distance=10\nG28 X\nG28 Y\nG28 Z'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '3', 'homing_positive_dir': 'false', 'homing_speed': '14', 'second_homing_speed': '1', 'homing_retract_speed': '2'}, 'bed_mesh': {'horizontal_move_z': '1', 'algorithm': 'bicubic', 'zero_reference_position': '112.5, 1122.5', 'mesh_min': '40, 40', 'mesh_max': '200, 200', 'probe_count': '16,16'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '10', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,290', 'screw3': '290,290', 'screw4': '290,20'}, 'screws_tilt_adjust': {'screw1': '20,40', 'screw1_name': '"Front Left"', 'screw2': '215,40', 'screw2_name': '"Front Right"', 'screw3': '215, 215', 'screw3_name': '"Back Right"', 'screw4': '40, 215', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'XYZ', 'gcode': '\nFORCE_MOVE stepper=stepper_z velocity=10 distance=10\nG28 X\nG28 Y\nG28 Z'}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [16, 16], 'mesh_min': [40.0, 40.0], 'mesh_max': [200.0, 200.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'zero_reference_position': [112.5, 1122.5], 'horizontal_move_z': 1.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 14.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 2.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 1.2, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '10', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 290.0], 'screw2_name': 'screw at 20.000,290.000', 'screw3': [290.0, 290.0], 'screw3_name': 'screw at 290.000,290.000', 'screw4': [290.0, 20.0], 'screw4_name': 'screw at 290.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 40.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 40.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 215.0], 'screw3_name': '"Back Right"', 'screw4': [40.0, 215.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 16:15:17,438 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:15:17,440 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 16:15:17,440 [printer.py:reinit()] - # Extruders: 1
2024-11-24 16:15:17,440 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 16:15:17,440 [printer.py:reinit()] - # Fans: 2
2024-11-24 16:15:17,441 [printer.py:reinit()] - # Output pins: 1
2024-11-24 16:15:17,441 [printer.py:reinit()] - # Leds: 0
2024-11-24 16:15:17,441 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 16:15:17,471 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 16:15:17,474 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 16:15:17,783 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 16:15:17,784 [screen.py:init_klipper()] - Printer initialized
2024-11-24 16:15:17,785 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 16:15:17,785 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 16:15:19,173 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 16:15:19,174 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 16:15:19,178 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 16:15:19,183 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:15:19,309 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 16:15:19,327 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 16:15:19,338 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 16:15:19,348 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 16:15:19,358 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 16:15:19,422 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 16:15:19,428 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 16:15:19,478 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 16:15:19,482 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 16:15:19,501 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 16:15:19,556 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:15:24,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:15:29,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:15:34,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:15:39,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:15:44,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:15:49,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:15:54,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:15:59,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:16:04,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:16:09,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:16:09,899 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 16:16:09,899 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 16:16:09,903 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 16:16:09,904 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:16:09,908 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:16:09,988 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:16:13,319 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 16:16:13,338 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 16:16:13,357 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 16:16:13,357 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 16:16:13,358 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 16:16:13,379 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 16:16:13,418 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': '\nFORCE_MOVE stepper=stepper_z velocity=10 distance=10\nG28 X\nG28 Y\nG28 Z\nG0 Z10 F3600'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'bed_mesh': {'horizontal_move_z': '1', 'algorithm': 'bicubic', 'zero_reference_position': '112.5, 1122.5', 'mesh_min': '40, 40', 'mesh_max': '200, 200', 'probe_count': '16,16'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '10', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,290', 'screw3': '290,290', 'screw4': '290,20'}, 'screws_tilt_adjust': {'screw1': '20,40', 'screw1_name': '"Front Left"', 'screw2': '215,40', 'screw2_name': '"Front Right"', 'screw3': '215, 215', 'screw3_name': '"Back Right"', 'screw4': '40, 215', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'XYZ', 'gcode': '\nFORCE_MOVE stepper=stepper_z velocity=10 distance=10\nG28 X\nG28 Y\nG28 Z\nG0 Z10 F3600'}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [16, 16], 'mesh_min': [40.0, 40.0], 'mesh_max': [200.0, 200.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'zero_reference_position': [112.5, 1122.5], 'horizontal_move_z': 1.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 1.2, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '10', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 290.0], 'screw2_name': 'screw at 20.000,290.000', 'screw3': [290.0, 290.0], 'screw3_name': 'screw at 290.000,290.000', 'screw4': [290.0, 20.0], 'screw4_name': 'screw at 290.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 40.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 40.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 215.0], 'screw3_name': '"Back Right"', 'screw4': [40.0, 215.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 16:16:13,423 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:16:13,425 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 16:16:13,425 [printer.py:reinit()] - # Extruders: 1
2024-11-24 16:16:13,426 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 16:16:13,426 [printer.py:reinit()] - # Fans: 2
2024-11-24 16:16:13,428 [printer.py:reinit()] - # Output pins: 1
2024-11-24 16:16:13,429 [printer.py:reinit()] - # Leds: 0
2024-11-24 16:16:13,429 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 16:16:13,457 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 16:16:13,460 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 16:16:13,775 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 16:16:13,776 [screen.py:init_klipper()] - Printer initialized
2024-11-24 16:16:13,777 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 16:16:13,777 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 16:16:15,155 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 16:16:15,155 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 16:16:15,157 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 16:16:15,164 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:16:15,289 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 16:16:15,307 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 16:16:15,317 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 16:16:15,327 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 16:16:15,337 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 16:16:15,403 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 16:16:15,406 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 16:16:15,461 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 16:16:15,464 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 16:16:15,484 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 16:16:15,544 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:16:20,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:16:25,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:16:30,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:16:35,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:16:40,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:16:45,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:16:50,326 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:16:55,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:17:00,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:17:05,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:17:10,331 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:17:15,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:17:20,326 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:17:25,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:17:30,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:17:35,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:17:40,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:17:45,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:17:50,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:17:55,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:18:00,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:18:05,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:18:10,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:18:15,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:18:20,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:18:25,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:18:30,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:18:35,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:18:40,330 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:18:45,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:18:50,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:18:55,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:19:00,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:19:05,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:19:10,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:19:15,326 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:19:18,453 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 16:19:18,453 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 16:19:18,455 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 16:19:18,456 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:19:18,460 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:19:18,535 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:19:21,323 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 16:19:21,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 16:19:21,366 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 16:19:21,367 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 16:19:21,368 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 16:19:21,712 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 16:19:21,756 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=24 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=24 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=24 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=24 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F6000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'bed_mesh': {'horizontal_move_z': '1', 'algorithm': 'bicubic', 'zero_reference_position': '112.5, 1122.5', 'mesh_min': '40, 40', 'mesh_max': '200, 200', 'probe_count': '16,16'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '10', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,290', 'screw3': '290,290', 'screw4': '290,20'}, 'screws_tilt_adjust': {'screw1': '20,40', 'screw1_name': '"Front Left"', 'screw2': '215,40', 'screw2_name': '"Front Right"', 'screw3': '215, 215', 'screw3_name': '"Back Right"', 'screw4': '40, 215', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=24 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=24 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=24 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=24 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F6000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [16, 16], 'mesh_min': [40.0, 40.0], 'mesh_max': [200.0, 200.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'zero_reference_position': [112.5, 1122.5], 'horizontal_move_z': 1.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 1.2, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '10', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 290.0], 'screw2_name': 'screw at 20.000,290.000', 'screw3': [290.0, 290.0], 'screw3_name': 'screw at 290.000,290.000', 'screw4': [290.0, 20.0], 'screw4_name': 'screw at 290.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 40.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 40.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 215.0], 'screw3_name': '"Back Right"', 'screw4': [40.0, 215.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 16:19:21,763 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:19:21,765 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 16:19:21,765 [printer.py:reinit()] - # Extruders: 1
2024-11-24 16:19:21,766 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 16:19:21,766 [printer.py:reinit()] - # Fans: 2
2024-11-24 16:19:21,766 [printer.py:reinit()] - # Output pins: 1
2024-11-24 16:19:21,766 [printer.py:reinit()] - # Leds: 0
2024-11-24 16:19:21,767 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 16:19:21,793 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 16:19:21,796 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 16:19:22,058 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 16:19:22,059 [screen.py:init_klipper()] - Printer initialized
2024-11-24 16:19:22,060 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 16:19:22,061 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 16:19:23,990 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 16:19:23,991 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 16:19:23,994 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 16:19:24,000 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:19:24,123 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 16:19:24,141 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 16:19:24,150 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 16:19:24,160 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 16:19:24,171 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 16:19:24,232 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 16:19:24,234 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 16:19:24,288 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 16:19:24,291 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 16:19:24,319 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 16:19:24,379 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:19:29,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:19:34,332 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:19:39,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:19:44,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:19:49,332 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:19:54,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:19:59,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:20:03,831 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 16:20:03,832 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 16:20:03,834 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 16:20:03,834 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:20:03,839 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:20:03,906 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:20:07,321 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 16:20:07,343 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 16:20:07,365 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 16:20:07,366 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 16:20:07,367 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 16:20:07,396 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 16:20:07,443 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=20 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=20 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=20 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=20 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'bed_mesh': {'horizontal_move_z': '1', 'algorithm': 'bicubic', 'zero_reference_position': '112.5, 1122.5', 'mesh_min': '40, 40', 'mesh_max': '200, 200', 'probe_count': '16,16'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '10', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,290', 'screw3': '290,290', 'screw4': '290,20'}, 'screws_tilt_adjust': {'screw1': '20,40', 'screw1_name': '"Front Left"', 'screw2': '215,40', 'screw2_name': '"Front Right"', 'screw3': '215, 215', 'screw3_name': '"Back Right"', 'screw4': '40, 215', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=20 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=20 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=20 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=20 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [16, 16], 'mesh_min': [40.0, 40.0], 'mesh_max': [200.0, 200.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'zero_reference_position': [112.5, 1122.5], 'horizontal_move_z': 1.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 1.2, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '10', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 290.0], 'screw2_name': 'screw at 20.000,290.000', 'screw3': [290.0, 290.0], 'screw3_name': 'screw at 290.000,290.000', 'screw4': [290.0, 20.0], 'screw4_name': 'screw at 290.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 40.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 40.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 215.0], 'screw3_name': '"Back Right"', 'screw4': [40.0, 215.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 16:20:07,449 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:20:07,450 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 16:20:07,451 [printer.py:reinit()] - # Extruders: 1
2024-11-24 16:20:07,451 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 16:20:07,451 [printer.py:reinit()] - # Fans: 2
2024-11-24 16:20:07,452 [printer.py:reinit()] - # Output pins: 1
2024-11-24 16:20:07,453 [printer.py:reinit()] - # Leds: 0
2024-11-24 16:20:07,454 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 16:20:07,485 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 16:20:07,489 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 16:20:07,794 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 16:20:07,794 [screen.py:init_klipper()] - Printer initialized
2024-11-24 16:20:07,795 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 16:20:07,796 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 16:20:09,180 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 16:20:09,181 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 16:20:09,184 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 16:20:09,189 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:20:09,311 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 16:20:09,328 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 16:20:09,337 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 16:20:09,347 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 16:20:09,357 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 16:20:09,426 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 16:20:09,429 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 16:20:09,479 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 16:20:09,482 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 16:20:09,502 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 16:20:09,561 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:20:14,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:20:19,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:20:24,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:20:29,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:20:34,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:20:39,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:20:44,327 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:20:44,628 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 16:20:44,629 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 16:20:44,630 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 16:20:44,631 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:20:44,635 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:20:44,702 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:20:48,321 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 16:20:48,342 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 16:20:48,360 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 16:20:48,360 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 16:20:48,361 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 16:20:48,383 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 16:20:48,426 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'bed_mesh': {'horizontal_move_z': '1', 'algorithm': 'bicubic', 'zero_reference_position': '112.5, 1122.5', 'mesh_min': '40, 40', 'mesh_max': '200, 200', 'probe_count': '16,16'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '10', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,290', 'screw3': '290,290', 'screw4': '290,20'}, 'screws_tilt_adjust': {'screw1': '20,40', 'screw1_name': '"Front Left"', 'screw2': '215,40', 'screw2_name': '"Front Right"', 'screw3': '215, 215', 'screw3_name': '"Back Right"', 'screw4': '40, 215', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [16, 16], 'mesh_min': [40.0, 40.0], 'mesh_max': [200.0, 200.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'zero_reference_position': [112.5, 1122.5], 'horizontal_move_z': 1.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 1.2, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '10', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 290.0], 'screw2_name': 'screw at 20.000,290.000', 'screw3': [290.0, 290.0], 'screw3_name': 'screw at 290.000,290.000', 'screw4': [290.0, 20.0], 'screw4_name': 'screw at 290.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 40.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 40.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 215.0], 'screw3_name': '"Back Right"', 'screw4': [40.0, 215.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 16:20:48,432 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:20:48,434 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 16:20:48,434 [printer.py:reinit()] - # Extruders: 1
2024-11-24 16:20:48,434 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 16:20:48,434 [printer.py:reinit()] - # Fans: 2
2024-11-24 16:20:48,434 [printer.py:reinit()] - # Output pins: 1
2024-11-24 16:20:48,435 [printer.py:reinit()] - # Leds: 0
2024-11-24 16:20:48,435 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 16:20:48,468 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 16:20:48,471 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 16:20:48,766 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 16:20:48,767 [screen.py:init_klipper()] - Printer initialized
2024-11-24 16:20:48,767 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 16:20:48,768 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 16:20:50,173 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 16:20:50,174 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 16:20:50,178 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 16:20:50,183 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:20:50,306 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 16:20:50,323 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 16:20:50,332 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 16:20:50,343 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 16:20:50,352 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 16:20:50,417 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 16:20:50,419 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 16:20:50,475 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 16:20:50,481 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 16:20:50,504 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 16:20:50,563 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:20:55,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:21:00,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:21:05,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:21:10,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:21:15,326 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:21:19,678 [screen.py:show_popup_message()] - error: No trigger on probe after full movement
2024-11-24 16:21:19,738 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:21:20,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:21:25,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:21:30,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:21:30,498 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:21:35,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:21:40,330 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:21:45,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:21:45,831 [screen.py:_load_panel()] - Loading panel: zcalibrate
2024-11-24 16:21:45,853 [zcalibrate.py:__init__()] - Offset X:0.0 Y:0.0 Z:0.0
2024-11-24 16:21:45,894 [zcalibrate.py:set_functions()] - Available functions for calibration: ['endstop', 'probe']
2024-11-24 16:21:45,937 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > zcalibrate
2024-11-24 16:22:02,340 [screen.py:show_popup_message()] - error: Move out of range: 20.000 40.000 -2.000 [0.000]
2024-11-24 16:22:02,350 [zcalibrate.py:process_update()] - !! Move out of range: 20.000 40.000 -2.000 [0.000]
2024-11-24 16:22:44,218 [screen.py:show_popup_message()] - error: No trigger on probe after full movement
2024-11-24 16:23:33,445 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 16:23:33,446 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 16:23:33,448 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 16:23:33,448 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:23:33,452 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:23:33,526 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:23:36,326 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 16:23:36,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 16:23:36,366 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 16:23:36,367 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 16:23:36,368 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 16:23:36,772 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 16:23:36,813 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'bed_mesh': {'horizontal_move_z': '1', 'algorithm': 'bicubic', 'zero_reference_position': '112.5, 112.5', 'mesh_min': '40, 40', 'mesh_max': '200, 200', 'probe_count': '16,16'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '10', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,290', 'screw3': '290,290', 'screw4': '290,20'}, 'screws_tilt_adjust': {'screw1': '20,40', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 195', 'screw3_name': '"Back Right"', 'screw4': '0, 195', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [16, 16], 'mesh_min': [40.0, 40.0], 'mesh_max': [200.0, 200.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'zero_reference_position': [112.5, 112.5], 'horizontal_move_z': 1.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 1.2, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '10', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 290.0], 'screw2_name': 'screw at 20.000,290.000', 'screw3': [290.0, 290.0], 'screw3_name': 'screw at 290.000,290.000', 'screw4': [290.0, 20.0], 'screw4_name': 'screw at 290.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 40.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 195.0], 'screw3_name': '"Back Right"', 'screw4': [0.0, 195.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 16:23:36,818 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:23:36,820 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 16:23:36,820 [printer.py:reinit()] - # Extruders: 1
2024-11-24 16:23:36,820 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 16:23:36,821 [printer.py:reinit()] - # Fans: 2
2024-11-24 16:23:36,821 [printer.py:reinit()] - # Output pins: 1
2024-11-24 16:23:36,821 [printer.py:reinit()] - # Leds: 0
2024-11-24 16:23:36,821 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 16:23:36,849 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 16:23:36,852 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 16:23:37,162 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 16:23:37,163 [screen.py:init_klipper()] - Printer initialized
2024-11-24 16:23:37,163 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 16:23:37,164 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 16:23:39,086 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 16:23:39,086 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 16:23:39,089 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 16:23:39,094 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:23:39,215 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 16:23:39,231 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 16:23:39,241 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 16:23:39,251 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 16:23:39,260 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 16:23:39,321 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 16:23:39,323 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 16:23:39,372 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 16:23:39,377 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 16:23:39,396 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 16:23:39,451 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:23:44,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:23:49,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:23:53,800 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 16:23:53,801 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 16:23:53,802 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 16:23:53,802 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:23:53,805 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:23:53,887 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:23:57,320 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 16:23:57,338 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 16:23:57,357 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 16:23:57,357 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 16:23:57,358 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 16:23:57,380 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 16:23:57,423 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'bed_mesh': {'horizontal_move_z': '1', 'algorithm': 'bicubic', 'zero_reference_position': '112.5, 112.5', 'mesh_min': '20,0', 'mesh_max': '210, 190', 'probe_count': '16,16'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '10', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,290', 'screw3': '290,290', 'screw4': '290,20'}, 'screws_tilt_adjust': {'screw1': '20,40', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 195', 'screw3_name': '"Back Right"', 'screw4': '0, 195', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [16, 16], 'mesh_min': [20.0, 0.0], 'mesh_max': [210.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'zero_reference_position': [112.5, 112.5], 'horizontal_move_z': 1.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 1.2, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '10', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 290.0], 'screw2_name': 'screw at 20.000,290.000', 'screw3': [290.0, 290.0], 'screw3_name': 'screw at 290.000,290.000', 'screw4': [290.0, 20.0], 'screw4_name': 'screw at 290.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 40.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 195.0], 'screw3_name': '"Back Right"', 'screw4': [0.0, 195.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 16:23:57,428 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:23:57,430 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 16:23:57,430 [printer.py:reinit()] - # Extruders: 1
2024-11-24 16:23:57,431 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 16:23:57,431 [printer.py:reinit()] - # Fans: 2
2024-11-24 16:23:57,432 [printer.py:reinit()] - # Output pins: 1
2024-11-24 16:23:57,433 [printer.py:reinit()] - # Leds: 0
2024-11-24 16:23:57,434 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 16:23:57,461 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 16:23:57,464 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 16:23:57,766 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 16:23:57,766 [screen.py:init_klipper()] - Printer initialized
2024-11-24 16:23:57,767 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 16:23:57,767 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 16:23:59,166 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 16:23:59,167 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 16:23:59,170 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 16:23:59,177 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:23:59,327 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 16:23:59,346 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 16:23:59,358 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 16:23:59,370 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 16:23:59,382 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 16:23:59,459 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 16:23:59,461 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 16:23:59,513 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 16:23:59,517 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 16:23:59,540 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 16:23:59,615 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:24:04,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:24:09,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:24:14,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:24:19,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:24:24,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:24:26,573 [screen.py:show_popup_message()] - error: Move out of range: 20.000 -38.000 1.000 [0.000]
2024-11-24 16:24:26,620 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:24:27,840 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-11-24 16:24:27,841 [printer.py:change_state()] - Adding callback for state: shutdown
2024-11-24 16:24:27,862 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:24:27,867 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:24:27,935 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:24:40,597 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-11-24 16:24:40,598 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 16:24:40,601 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 16:24:40,602 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:24:40,606 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:24:40,696 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:24:44,321 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 16:24:44,344 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 16:24:44,365 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 16:24:44,366 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 16:24:44,366 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 16:24:44,392 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 16:24:44,436 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'bed_mesh': {'horizontal_move_z': '1', 'algorithm': 'bicubic', 'zero_reference_position': '112.5, 112.5', 'mesh_min': '20,0', 'mesh_max': '210, 190', 'probe_count': '16,16'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '10', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,290', 'screw3': '290,290', 'screw4': '290,20'}, 'screws_tilt_adjust': {'screw1': '20,40', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 195', 'screw3_name': '"Back Right"', 'screw4': '0, 195', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [16, 16], 'mesh_min': [20.0, 0.0], 'mesh_max': [210.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'zero_reference_position': [112.5, 112.5], 'horizontal_move_z': 1.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 1.2, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '10', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 290.0], 'screw2_name': 'screw at 20.000,290.000', 'screw3': [290.0, 290.0], 'screw3_name': 'screw at 290.000,290.000', 'screw4': [290.0, 20.0], 'screw4_name': 'screw at 290.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 40.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 195.0], 'screw3_name': '"Back Right"', 'screw4': [0.0, 195.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 16:24:44,442 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:24:44,443 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 16:24:44,444 [printer.py:reinit()] - # Extruders: 1
2024-11-24 16:24:44,444 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 16:24:44,445 [printer.py:reinit()] - # Fans: 2
2024-11-24 16:24:44,446 [printer.py:reinit()] - # Output pins: 1
2024-11-24 16:24:44,446 [printer.py:reinit()] - # Leds: 0
2024-11-24 16:24:44,447 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 16:24:44,481 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 16:24:44,484 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 16:24:44,784 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 16:24:44,785 [screen.py:init_klipper()] - Printer initialized
2024-11-24 16:24:44,786 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 16:24:44,786 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 16:24:45,961 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 16:24:45,962 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 16:24:45,963 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 16:24:45,973 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:24:46,098 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 16:24:46,114 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 16:24:46,124 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 16:24:46,134 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 16:24:46,144 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 16:24:46,208 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 16:24:46,211 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 16:24:46,268 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 16:24:46,270 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 16:24:46,291 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 16:24:46,343 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:24:51,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:24:56,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:25:01,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:25:06,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:25:11,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:25:16,327 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:25:20,645 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 16:25:20,646 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 16:25:20,647 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 16:25:20,648 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:25:20,653 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:25:20,719 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:25:24,324 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 16:25:24,348 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 16:25:24,369 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 16:25:24,370 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 16:25:24,370 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 16:25:24,401 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 16:25:24,459 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'bed_mesh': {'horizontal_move_z': '1', 'algorithm': 'bicubic', 'zero_reference_position': '112.5, 112.5', 'mesh_min': '20,0', 'mesh_max': '210, 190', 'probe_count': '16,16'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,290', 'screw3': '290,290', 'screw4': '290,20'}, 'screws_tilt_adjust': {'screw1': '20,40', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 195', 'screw3_name': '"Back Right"', 'screw4': '0, 195', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [16, 16], 'mesh_min': [20.0, 0.0], 'mesh_max': [210.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'zero_reference_position': [112.5, 112.5], 'horizontal_move_z': 1.0, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 1.2, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 290.0], 'screw2_name': 'screw at 20.000,290.000', 'screw3': [290.0, 290.0], 'screw3_name': 'screw at 290.000,290.000', 'screw4': [290.0, 20.0], 'screw4_name': 'screw at 290.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 40.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 195.0], 'screw3_name': '"Back Right"', 'screw4': [0.0, 195.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 16:25:24,466 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:25:24,468 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 16:25:24,469 [printer.py:reinit()] - # Extruders: 1
2024-11-24 16:25:24,471 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 16:25:24,472 [printer.py:reinit()] - # Fans: 2
2024-11-24 16:25:24,472 [printer.py:reinit()] - # Output pins: 1
2024-11-24 16:25:24,473 [printer.py:reinit()] - # Leds: 0
2024-11-24 16:25:24,473 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 16:25:24,514 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 16:25:24,520 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 16:25:24,796 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 16:25:24,797 [screen.py:init_klipper()] - Printer initialized
2024-11-24 16:25:24,798 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 16:25:24,798 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 16:25:25,932 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 16:25:25,932 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 16:25:25,935 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 16:25:25,940 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:25:26,075 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 16:25:26,091 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 16:25:26,101 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 16:25:26,111 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 16:25:26,121 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 16:25:26,186 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 16:25:26,191 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 16:25:26,240 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 16:25:26,244 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 16:25:26,267 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 16:25:26,329 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:25:31,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:25:36,330 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:25:41,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:25:46,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:25:51,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:25:56,044 [screen.py:show_popup_message()] - error: Move out of range: 20.000 -38.000 1.000 [0.000]
2024-11-24 16:25:56,098 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:25:56,320 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:25:57,313 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-11-24 16:25:57,314 [printer.py:change_state()] - Adding callback for state: shutdown
2024-11-24 16:25:57,343 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:25:57,347 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:25:57,457 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:27:08,526 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-11-24 16:27:08,527 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 16:27:08,528 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 16:27:08,529 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:27:08,535 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:27:08,603 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:27:12,319 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 16:27:12,339 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 16:27:12,357 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 16:27:12,358 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 16:27:12,358 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 16:27:12,379 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 16:27:12,418 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'bed_mesh': {'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,0', 'mesh_max': '210, 190', 'probe_count': '10,10'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,40', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 195', 'screw3_name': '"Back Right"', 'screw4': '0, 195', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [10, 10], 'mesh_min': [20.0, 0.0], 'mesh_max': [210.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'horizontal_move_z': 0.7, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 1.2, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 220.0], 'screw2_name': 'screw at 20.000,220.000', 'screw3': [220.0, 220.0], 'screw3_name': 'screw at 220.000,220.000', 'screw4': [220.0, 20.0], 'screw4_name': 'screw at 220.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 40.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 195.0], 'screw3_name': '"Back Right"', 'screw4': [0.0, 195.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 16:27:12,423 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:27:12,425 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 16:27:12,426 [printer.py:reinit()] - # Extruders: 1
2024-11-24 16:27:12,426 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 16:27:12,426 [printer.py:reinit()] - # Fans: 2
2024-11-24 16:27:12,426 [printer.py:reinit()] - # Output pins: 1
2024-11-24 16:27:12,426 [printer.py:reinit()] - # Leds: 0
2024-11-24 16:27:12,426 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 16:27:12,454 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 16:27:12,457 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 16:27:12,826 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 16:27:12,826 [screen.py:init_klipper()] - Printer initialized
2024-11-24 16:27:12,827 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 16:27:12,827 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 16:27:13,970 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 16:27:13,970 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 16:27:13,974 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 16:27:13,981 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:27:14,106 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 16:27:14,122 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 16:27:14,132 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 16:27:14,142 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 16:27:14,153 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 16:27:14,217 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 16:27:14,220 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 16:27:14,270 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 16:27:14,273 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 16:27:14,292 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 16:27:14,346 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:27:19,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:27:24,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:27:29,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:27:34,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:27:39,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:27:44,331 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:27:49,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:27:54,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:27:59,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:28:04,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:28:05,229 [screen.py:show_popup_message()] - error: Move out of range: 20.000 -38.000 0.700 [0.000]
2024-11-24 16:28:05,285 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:28:09,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:28:14,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:28:15,517 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:28:19,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:28:24,331 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:28:29,339 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:28:34,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:28:37,976 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 16:28:37,976 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 16:28:37,978 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 16:28:37,979 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:28:37,983 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:28:38,051 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:28:41,323 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 16:28:41,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 16:28:41,368 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 16:28:41,369 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 16:28:41,369 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 16:28:41,403 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 16:28:41,467 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'bed_mesh': {'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,0', 'mesh_max': '210, 190', 'probe_count': '10,10'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '-38', 'no_stop_probe': '', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,40', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 195', 'screw3_name': '"Back Right"', 'screw4': '0, 195', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [10, 10], 'mesh_min': [20.0, 0.0], 'mesh_max': [210.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'horizontal_move_z': 0.7, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 1.2, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': -38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 220.0], 'screw2_name': 'screw at 20.000,220.000', 'screw3': [220.0, 220.0], 'screw3_name': 'screw at 220.000,220.000', 'screw4': [220.0, 20.0], 'screw4_name': 'screw at 220.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 40.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 195.0], 'screw3_name': '"Back Right"', 'screw4': [0.0, 195.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 16:28:41,473 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:28:41,475 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 16:28:41,475 [printer.py:reinit()] - # Extruders: 1
2024-11-24 16:28:41,476 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 16:28:41,478 [printer.py:reinit()] - # Fans: 2
2024-11-24 16:28:41,478 [printer.py:reinit()] - # Output pins: 1
2024-11-24 16:28:41,479 [printer.py:reinit()] - # Leds: 0
2024-11-24 16:28:41,480 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 16:28:41,526 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 16:28:41,532 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 16:28:41,812 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 16:28:41,812 [screen.py:init_klipper()] - Printer initialized
2024-11-24 16:28:41,813 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 16:28:41,813 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 16:28:43,497 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 16:28:43,497 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 16:28:43,500 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 16:28:43,505 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:28:43,633 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 16:28:43,650 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 16:28:43,660 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 16:28:43,671 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 16:28:43,680 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 16:28:43,748 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 16:28:43,752 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 16:28:43,803 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 16:28:43,807 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 16:28:43,829 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 16:28:43,883 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'NoneType'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:28:49,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'NoneType'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:28:54,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'NoneType'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:28:59,331 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'NoneType'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:29:04,054 [screen.py:show_popup_message()] - error: Internal error on command:"BED_MESH_CALIBRATE"
2024-11-24 16:29:04,076 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-11-24 16:29:04,077 [printer.py:change_state()] - Adding callback for state: shutdown
2024-11-24 16:29:04,133 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'NoneType'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:29:04,188 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:29:04,192 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:29:04,261 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:29:09,527 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-11-24 16:29:09,528 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 16:29:09,531 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 16:29:09,532 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:29:09,536 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:29:09,626 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:29:13,320 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 16:29:13,339 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 16:29:13,357 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 16:29:13,358 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 16:29:13,359 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 16:29:13,380 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 16:29:13,419 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'bed_mesh': {'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,0', 'mesh_max': '210, 190', 'probe_count': '10,10'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '-38', 'no_stop_probe': '', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,40', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 195', 'screw3_name': '"Back Right"', 'screw4': '0, 195', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [10, 10], 'mesh_min': [20.0, 0.0], 'mesh_max': [210.0, 190.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'horizontal_move_z': 0.7, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 1.2, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': -38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 220.0], 'screw2_name': 'screw at 20.000,220.000', 'screw3': [220.0, 220.0], 'screw3_name': 'screw at 220.000,220.000', 'screw4': [220.0, 20.0], 'screw4_name': 'screw at 220.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 40.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 195.0], 'screw3_name': '"Back Right"', 'screw4': [0.0, 195.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 16:29:13,425 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:29:13,426 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 16:29:13,427 [printer.py:reinit()] - # Extruders: 1
2024-11-24 16:29:13,427 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 16:29:13,427 [printer.py:reinit()] - # Fans: 2
2024-11-24 16:29:13,427 [printer.py:reinit()] - # Output pins: 1
2024-11-24 16:29:13,428 [printer.py:reinit()] - # Leds: 0
2024-11-24 16:29:13,428 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 16:29:13,456 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 16:29:13,459 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 16:29:13,822 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 16:29:13,823 [screen.py:init_klipper()] - Printer initialized
2024-11-24 16:29:13,823 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 16:29:13,824 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 16:29:14,964 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 16:29:14,965 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 16:29:14,969 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 16:29:14,974 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:29:15,095 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 16:29:15,111 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 16:29:15,121 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 16:29:15,131 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 16:29:15,141 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 16:29:15,202 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 16:29:15,204 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 16:29:15,256 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 16:29:15,259 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 16:29:15,278 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 16:29:15,329 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'NoneType'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:29:20,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'NoneType'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:29:25,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'NoneType'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:30:13,709 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 16:30:13,709 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 16:30:13,711 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 16:30:13,711 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:30:13,716 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:30:13,782 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:30:17,321 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 16:30:17,341 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 16:30:17,360 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 16:30:17,361 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 16:30:17,361 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 16:30:17,383 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 16:30:17,428 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_mesh': {'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,50', 'mesh_max': '210, 220', 'probe_count': '10,10'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,40', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 195', 'screw3_name': '"Back Right"', 'screw4': '0, 195', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 1.2, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [10, 10], 'mesh_min': [20.0, 50.0], 'mesh_max': [210.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'horizontal_move_z': 0.7, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 220.0], 'screw2_name': 'screw at 20.000,220.000', 'screw3': [220.0, 220.0], 'screw3_name': 'screw at 220.000,220.000', 'screw4': [220.0, 20.0], 'screw4_name': 'screw at 220.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 40.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 195.0], 'screw3_name': '"Back Right"', 'screw4': [0.0, 195.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 16:30:17,433 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:30:17,435 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 16:30:17,435 [printer.py:reinit()] - # Extruders: 1
2024-11-24 16:30:17,436 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 16:30:17,436 [printer.py:reinit()] - # Fans: 2
2024-11-24 16:30:17,436 [printer.py:reinit()] - # Output pins: 1
2024-11-24 16:30:17,436 [printer.py:reinit()] - # Leds: 0
2024-11-24 16:30:17,436 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 16:30:17,463 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 16:30:17,466 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 16:30:17,773 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 16:30:17,773 [screen.py:init_klipper()] - Printer initialized
2024-11-24 16:30:17,774 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 16:30:17,775 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 16:30:19,159 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 16:30:19,160 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 16:30:19,163 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 16:30:19,168 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:30:19,291 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 16:30:19,308 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 16:30:19,318 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 16:30:19,328 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 16:30:19,338 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 16:30:19,402 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 16:30:19,404 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 16:30:19,457 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 16:30:19,461 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 16:30:19,481 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 16:31:11,883 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-11-24 16:31:11,884 [printer.py:change_state()] - Adding callback for state: shutdown
2024-11-24 16:31:11,901 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:31:11,906 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:31:11,989 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:31:23,465 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-11-24 16:31:23,466 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 16:31:23,469 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 16:31:23,471 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:31:23,475 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:31:23,608 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:31:27,321 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 16:31:27,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 16:31:27,369 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 16:31:27,369 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 16:31:27,370 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 16:31:27,399 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 16:31:27,446 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_mesh': {'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,50', 'mesh_max': '210, 220', 'probe_count': '10,10'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,40', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 195', 'screw3_name': '"Back Right"', 'screw4': '0, 195', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 1.2, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [10, 10], 'mesh_min': [20.0, 50.0], 'mesh_max': [210.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'horizontal_move_z': 0.7, 'speed': 50.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 220.0], 'screw2_name': 'screw at 20.000,220.000', 'screw3': [220.0, 220.0], 'screw3_name': 'screw at 220.000,220.000', 'screw4': [220.0, 20.0], 'screw4_name': 'screw at 220.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 40.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 195.0], 'screw3_name': '"Back Right"', 'screw4': [0.0, 195.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 16:31:27,451 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:31:27,453 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 16:31:27,454 [printer.py:reinit()] - # Extruders: 1
2024-11-24 16:31:27,454 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 16:31:27,454 [printer.py:reinit()] - # Fans: 2
2024-11-24 16:31:27,455 [printer.py:reinit()] - # Output pins: 1
2024-11-24 16:31:27,456 [printer.py:reinit()] - # Leds: 0
2024-11-24 16:31:27,456 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 16:31:27,547 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 16:31:27,550 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 16:31:27,790 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 16:31:27,791 [screen.py:init_klipper()] - Printer initialized
2024-11-24 16:31:27,791 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 16:31:27,792 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 16:31:28,685 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 16:31:28,686 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 16:31:28,690 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 16:31:28,696 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:31:28,907 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 16:31:28,932 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 16:31:28,948 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 16:31:28,961 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 16:31:28,973 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 16:31:29,049 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 16:31:29,052 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 16:31:29,109 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 16:31:29,113 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 16:31:29,138 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 16:33:08,114 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 16:33:08,115 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 16:33:08,117 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 16:33:08,117 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:33:08,121 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:33:08,188 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:33:11,320 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 16:33:11,339 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 16:33:11,357 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 16:33:11,358 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 16:33:11,358 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 16:33:11,380 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 16:33:11,421 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,50', 'mesh_max': '210, 220', 'probe_count': '10,10'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,40', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 195', 'screw3_name': '"Back Right"', 'screw4': '0, 195', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 1.2, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [10, 10], 'mesh_min': [20.0, 50.0], 'mesh_max': [210.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'horizontal_move_z': 0.7, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 220.0], 'screw2_name': 'screw at 20.000,220.000', 'screw3': [220.0, 220.0], 'screw3_name': 'screw at 220.000,220.000', 'screw4': [220.0, 20.0], 'screw4_name': 'screw at 220.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 40.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 195.0], 'screw3_name': '"Back Right"', 'screw4': [0.0, 195.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 16:33:11,427 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:33:11,429 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 16:33:11,429 [printer.py:reinit()] - # Extruders: 1
2024-11-24 16:33:11,430 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 16:33:11,430 [printer.py:reinit()] - # Fans: 2
2024-11-24 16:33:11,432 [printer.py:reinit()] - # Output pins: 1
2024-11-24 16:33:11,432 [printer.py:reinit()] - # Leds: 0
2024-11-24 16:33:11,433 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 16:33:11,468 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 16:33:11,472 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 16:33:11,768 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 16:33:11,769 [screen.py:init_klipper()] - Printer initialized
2024-11-24 16:33:11,769 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 16:33:11,770 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 16:33:13,494 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 16:33:13,494 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 16:33:13,497 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 16:33:13,502 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:33:13,629 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 16:33:13,646 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 16:33:13,656 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 16:33:13,666 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 16:33:13,676 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 16:33:13,741 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 16:33:13,744 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 16:33:13,797 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 16:33:13,800 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 16:33:13,820 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 16:33:23,277 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-11-24 16:33:23,278 [printer.py:change_state()] - Adding callback for state: shutdown
2024-11-24 16:33:23,290 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:33:23,295 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:33:23,371 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:33:29,753 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-11-24 16:33:29,754 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 16:33:29,755 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 16:33:29,756 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:33:29,760 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:33:29,858 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:33:33,319 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 16:33:33,338 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 16:33:33,357 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 16:33:33,358 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 16:33:33,358 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 16:33:33,381 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 16:33:33,420 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,50', 'mesh_max': '210, 220', 'probe_count': '10,10'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,40', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 195', 'screw3_name': '"Back Right"', 'screw4': '0, 195', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 1.2, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [10, 10], 'mesh_min': [20.0, 50.0], 'mesh_max': [210.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'horizontal_move_z': 0.7, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 220.0], 'screw2_name': 'screw at 20.000,220.000', 'screw3': [220.0, 220.0], 'screw3_name': 'screw at 220.000,220.000', 'screw4': [220.0, 20.0], 'screw4_name': 'screw at 220.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 40.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 195.0], 'screw3_name': '"Back Right"', 'screw4': [0.0, 195.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 16:33:33,425 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:33:33,427 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 16:33:33,427 [printer.py:reinit()] - # Extruders: 1
2024-11-24 16:33:33,428 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 16:33:33,428 [printer.py:reinit()] - # Fans: 2
2024-11-24 16:33:33,428 [printer.py:reinit()] - # Output pins: 1
2024-11-24 16:33:33,428 [printer.py:reinit()] - # Leds: 0
2024-11-24 16:33:33,428 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 16:33:33,456 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 16:33:33,459 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 16:33:33,821 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 16:33:33,821 [screen.py:init_klipper()] - Printer initialized
2024-11-24 16:33:33,822 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 16:33:33,822 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 16:33:34,965 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 16:33:34,966 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 16:33:34,969 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 16:33:34,974 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:33:35,097 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 16:33:35,114 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 16:33:35,124 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 16:33:35,135 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 16:33:35,144 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 16:33:35,209 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 16:33:35,211 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 16:33:35,261 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 16:33:35,264 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 16:33:35,283 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 16:34:20,233 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 16:34:20,234 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 16:34:20,235 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 16:34:20,236 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:34:20,241 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:34:20,312 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:34:23,321 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 16:34:23,339 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 16:34:23,357 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 16:34:23,358 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 16:34:23,358 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 16:34:23,380 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 16:34:23,499 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '2.5', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '2.5', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '1', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,50', 'mesh_max': '210, 220', 'probe_count': '10,10'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,40', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 195', 'screw3_name': '"Back Right"', 'screw4': '0, 195', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {}}}
2024-11-24 16:34:23,503 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:34:23,504 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 16:34:23,505 [printer.py:reinit()] - # Extruders: 1
2024-11-24 16:34:23,505 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 16:34:23,505 [printer.py:reinit()] - # Fans: 2
2024-11-24 16:34:23,506 [printer.py:reinit()] - # Output pins: 1
2024-11-24 16:34:23,506 [printer.py:reinit()] - # Leds: 0
2024-11-24 16:34:23,506 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 16:34:23,531 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 16:34:23,534 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 16:34:23,812 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 16:34:23,812 [screen.py:init_klipper()] - Printer initialized
2024-11-24 16:34:23,813 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-11-24 16:34:23,813 [printer.py:change_state()] - Adding callback for state: error
2024-11-24 16:34:23,843 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:34:23,922 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:34:52,863 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-11-24 16:34:52,863 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 16:34:52,865 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 16:34:52,865 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:34:52,868 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:34:52,935 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:34:56,321 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 16:34:56,344 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 16:34:56,366 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 16:34:56,367 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 16:34:56,368 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 16:34:56,394 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 16:34:56,438 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '1', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,50', 'mesh_max': '210, 220', 'probe_count': '10,10'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,40', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 195', 'screw3_name': '"Back Right"', 'screw4': '0, 195', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 1.2, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [10, 10], 'mesh_min': [20.0, 50.0], 'mesh_max': [210.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'horizontal_move_z': 0.7, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 220.0], 'screw2_name': 'screw at 20.000,220.000', 'screw3': [220.0, 220.0], 'screw3_name': 'screw at 220.000,220.000', 'screw4': [220.0, 20.0], 'screw4_name': 'screw at 220.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 40.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 195.0], 'screw3_name': '"Back Right"', 'screw4': [0.0, 195.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 16:34:56,442 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:34:56,444 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 16:34:56,444 [printer.py:reinit()] - # Extruders: 1
2024-11-24 16:34:56,445 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 16:34:56,445 [printer.py:reinit()] - # Fans: 2
2024-11-24 16:34:56,445 [printer.py:reinit()] - # Output pins: 1
2024-11-24 16:34:56,445 [printer.py:reinit()] - # Leds: 0
2024-11-24 16:34:56,446 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 16:34:56,471 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 16:34:56,475 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 16:34:56,784 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 16:34:56,784 [screen.py:init_klipper()] - Printer initialized
2024-11-24 16:34:56,785 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 16:34:56,785 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 16:34:58,179 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 16:34:58,179 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 16:34:58,183 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 16:34:58,188 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:34:58,308 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 16:34:58,324 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 16:34:58,334 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 16:34:58,344 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 16:34:58,353 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 16:34:58,415 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 16:34:58,417 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 16:34:58,470 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 16:34:58,474 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 16:34:58,494 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 16:34:58,551 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:35:03,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:35:08,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:35:13,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:35:18,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:35:20,286 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-11-24 16:35:20,287 [printer.py:change_state()] - Adding callback for state: shutdown
2024-11-24 16:35:20,302 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:35:20,306 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:35:20,375 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:35:51,336 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-11-24 16:35:51,337 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 16:35:51,339 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 16:35:51,339 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:35:51,342 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:35:51,410 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:35:54,323 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 16:35:54,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 16:35:54,364 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 16:35:54,364 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 16:35:54,365 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 16:35:54,396 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 16:35:54,435 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '1', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,50', 'mesh_max': '210, 220', 'probe_count': '5,5'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,40', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 195', 'screw3_name': '"Back Right"', 'screw4': '0, 195', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 1.2, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [20.0, 50.0], 'mesh_max': [210.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'horizontal_move_z': 0.7, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 220.0], 'screw2_name': 'screw at 20.000,220.000', 'screw3': [220.0, 220.0], 'screw3_name': 'screw at 220.000,220.000', 'screw4': [220.0, 20.0], 'screw4_name': 'screw at 220.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 40.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 195.0], 'screw3_name': '"Back Right"', 'screw4': [0.0, 195.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 16:35:54,440 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:35:54,442 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 16:35:54,442 [printer.py:reinit()] - # Extruders: 1
2024-11-24 16:35:54,442 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 16:35:54,442 [printer.py:reinit()] - # Fans: 2
2024-11-24 16:35:54,443 [printer.py:reinit()] - # Output pins: 1
2024-11-24 16:35:54,443 [printer.py:reinit()] - # Leds: 0
2024-11-24 16:35:54,443 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 16:35:54,471 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 16:35:54,474 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 16:35:54,780 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 16:35:54,780 [screen.py:init_klipper()] - Printer initialized
2024-11-24 16:35:54,781 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 16:35:54,781 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 16:35:56,426 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 16:35:56,427 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 16:35:56,431 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 16:35:56,436 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:35:56,563 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 16:35:56,580 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 16:35:56,590 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 16:35:56,600 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 16:35:56,610 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 16:35:56,679 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 16:35:56,682 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 16:35:56,737 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 16:35:56,740 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 16:35:56,759 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 16:35:56,812 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:36:02,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:36:07,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:36:12,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:36:17,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:36:22,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:36:24,021 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-11-24 16:36:24,022 [printer.py:change_state()] - Adding callback for state: shutdown
2024-11-24 16:36:24,039 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:36:24,043 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:36:24,111 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:36:54,183 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-11-24 16:36:54,184 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 16:36:54,185 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 16:36:54,186 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:36:54,190 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:36:54,287 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:36:57,323 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 16:36:57,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 16:36:57,366 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 16:36:57,367 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 16:36:57,367 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 16:36:57,471 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 16:36:57,511 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'safe_z_home': {'home_xy_position': '112.5, 112.5', 'z_hop': '20'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '1', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,50', 'mesh_max': '210, 220', 'probe_count': '5,5'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,40', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 195', 'screw3_name': '"Back Right"', 'screw4': '0, 195', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'safe_z_home': {'home_xy_position': [112.5, 112.5], 'z_hop': 20.0, 'z_hop_speed': 15.0, 'speed': 50.0, 'move_to_previous': False}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 1.2, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [20.0, 50.0], 'mesh_max': [210.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'horizontal_move_z': 0.7, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 220.0], 'screw2_name': 'screw at 20.000,220.000', 'screw3': [220.0, 220.0], 'screw3_name': 'screw at 220.000,220.000', 'screw4': [220.0, 20.0], 'screw4_name': 'screw at 220.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 40.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 195.0], 'screw3_name': '"Back Right"', 'screw4': [0.0, 195.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 16:36:57,518 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:36:57,519 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 16:36:57,520 [printer.py:reinit()] - # Extruders: 1
2024-11-24 16:36:57,520 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 16:36:57,520 [printer.py:reinit()] - # Fans: 2
2024-11-24 16:36:57,521 [printer.py:reinit()] - # Output pins: 1
2024-11-24 16:36:57,521 [printer.py:reinit()] - # Leds: 0
2024-11-24 16:36:57,522 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 16:36:57,549 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 16:36:57,552 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 16:36:57,863 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 16:36:57,863 [screen.py:init_klipper()] - Printer initialized
2024-11-24 16:36:57,864 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 16:36:57,864 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 16:36:59,497 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 16:36:59,498 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 16:36:59,500 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 16:36:59,506 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:36:59,637 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 16:36:59,655 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 16:36:59,664 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 16:36:59,675 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 16:36:59,684 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 16:36:59,748 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 16:36:59,750 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 16:36:59,802 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 16:36:59,806 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 16:36:59,826 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 16:36:59,880 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:37:05,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:37:10,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:37:15,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:37:20,329 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:37:25,332 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:37:29,092 [printer.py:change_state()] - Changing state from 'ready' to 'shutdown'
2024-11-24 16:37:29,092 [printer.py:change_state()] - Adding callback for state: shutdown
2024-11-24 16:37:29,107 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:37:29,111 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:37:29,182 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:38:34,096 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-11-24 16:38:34,097 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 16:38:34,098 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 16:38:34,098 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:38:34,102 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:38:34,169 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:38:37,326 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 16:38:37,387 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 16:38:37,441 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 16:38:37,441 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 16:38:37,442 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 16:38:37,483 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 16:38:37,540 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'safe_z_home': {'home_xy_position': '112.5, 112.5', 'z_hop': '20'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '1', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'position_endstop': '1.2', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,50', 'mesh_max': '210, 220', 'probe_count': '5,5', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,40', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 195', 'screw3_name': '"Back Right"', 'screw4': '0, 195', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'safe_z_home': {'home_xy_position': [112.5, 112.5], 'z_hop': 20.0, 'z_hop_speed': 15.0, 'speed': 50.0, 'move_to_previous': False}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 1.2, 'deactivate_on_each_sample': True, 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [20.0, 50.0], 'mesh_max': [210.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'horizontal_move_z': 0.7, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 220.0], 'screw2_name': 'screw at 20.000,220.000', 'screw3': [220.0, 220.0], 'screw3_name': 'screw at 220.000,220.000', 'screw4': [220.0, 20.0], 'screw4_name': 'screw at 220.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 40.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 195.0], 'screw3_name': '"Back Right"', 'screw4': [0.0, 195.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 16:38:37,546 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:38:37,549 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 16:38:37,549 [printer.py:reinit()] - # Extruders: 1
2024-11-24 16:38:37,551 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 16:38:37,552 [printer.py:reinit()] - # Fans: 2
2024-11-24 16:38:37,553 [printer.py:reinit()] - # Output pins: 1
2024-11-24 16:38:37,553 [printer.py:reinit()] - # Leds: 0
2024-11-24 16:38:37,553 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 16:38:37,584 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 16:38:37,587 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 16:38:37,881 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 16:38:37,882 [screen.py:init_klipper()] - Printer initialized
2024-11-24 16:38:37,883 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 16:38:37,883 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 16:38:39,266 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 16:38:39,266 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 16:38:39,269 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 16:38:39,274 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:38:39,405 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 16:38:39,422 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 16:38:39,432 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 16:38:39,442 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 16:38:39,453 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 16:38:39,521 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 16:38:39,527 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 16:38:39,578 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 16:38:39,581 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 16:38:39,600 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 16:38:39,658 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:38:45,320 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:38:50,338 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:38:55,334 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:39:00,328 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:39:05,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:39:10,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:39:15,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:39:20,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:39:25,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:39:30,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:39:35,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:39:40,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:39:45,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:39:50,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:39:55,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:40:00,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:40:05,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:40:06,106 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 16:40:06,107 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 16:40:06,108 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 16:40:06,109 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:40:06,113 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:40:06,180 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:40:09,320 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 16:40:09,341 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 16:40:09,363 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 16:40:09,363 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 16:40:09,364 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 16:40:09,390 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 16:40:09,429 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'safe_z_home': {'home_xy_position': '112.5, 112.5', 'z_hop': '20'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '1', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'position_endstop': '0.6', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,50', 'mesh_max': '210, 220', 'probe_count': '5,5', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,40', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 195', 'screw3_name': '"Back Right"', 'screw4': '0, 195', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'safe_z_home': {'home_xy_position': [112.5, 112.5], 'z_hop': 20.0, 'z_hop_speed': 15.0, 'speed': 50.0, 'move_to_previous': False}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 0.6, 'deactivate_on_each_sample': True, 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [20.0, 50.0], 'mesh_max': [210.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'horizontal_move_z': 0.7, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 220.0], 'screw2_name': 'screw at 20.000,220.000', 'screw3': [220.0, 220.0], 'screw3_name': 'screw at 220.000,220.000', 'screw4': [220.0, 20.0], 'screw4_name': 'screw at 220.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 40.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 195.0], 'screw3_name': '"Back Right"', 'screw4': [0.0, 195.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 16:40:09,434 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:40:09,436 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 16:40:09,436 [printer.py:reinit()] - # Extruders: 1
2024-11-24 16:40:09,437 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 16:40:09,437 [printer.py:reinit()] - # Fans: 2
2024-11-24 16:40:09,437 [printer.py:reinit()] - # Output pins: 1
2024-11-24 16:40:09,437 [printer.py:reinit()] - # Leds: 0
2024-11-24 16:40:09,437 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 16:40:09,465 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 16:40:09,468 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 16:40:09,776 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 16:40:09,777 [screen.py:init_klipper()] - Printer initialized
2024-11-24 16:40:09,777 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 16:40:09,777 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 16:40:11,414 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 16:40:11,414 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 16:40:11,417 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 16:40:11,422 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:40:11,547 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 16:40:11,563 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 16:40:11,573 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 16:40:11,583 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 16:40:11,592 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 16:40:11,655 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 16:40:11,658 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 16:40:11,713 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 16:40:11,718 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 16:40:11,742 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 16:40:11,799 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:40:17,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:40:22,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:40:27,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:40:32,329 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:40:37,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:40:42,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:40:47,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:40:52,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:40:53,116 [screen.py:show_popup_message()] - error: BDsensor is too far from the bed:705
2024-11-24 16:40:53,161 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:40:57,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:41:02,347 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:41:03,516 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:41:07,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:41:12,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:41:17,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:41:22,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:41:27,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:41:32,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:41:37,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:41:42,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:41:47,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:41:52,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:41:57,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:42:02,326 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:42:07,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:42:12,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:42:17,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:42:22,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:42:27,331 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:42:32,333 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:42:37,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:42:42,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:42:47,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:42:52,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:42:57,328 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:43:02,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:43:07,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:43:12,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:43:17,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:43:22,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:43:27,328 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:43:32,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:43:37,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:43:42,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:43:47,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:43:52,331 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:43:57,328 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:44:02,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:44:07,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:44:12,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:44:17,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:44:22,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:44:27,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:44:32,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:44:37,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:44:42,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:44:47,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:44:52,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:44:57,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:45:02,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:45:07,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:45:12,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:45:17,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:45:22,329 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:45:27,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:45:32,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:45:37,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:45:42,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:45:47,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:45:52,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:45:57,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:46:02,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:46:07,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:46:12,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:46:17,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:46:22,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:46:27,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:46:32,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:46:37,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:46:42,327 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:46:47,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:46:52,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:46:57,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:47:02,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:47:07,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:47:12,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:47:17,331 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:47:22,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:47:27,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:47:32,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:47:37,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:47:42,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:47:47,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:47:52,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:47:57,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:48:02,333 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:48:07,329 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:48:12,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:48:17,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:48:22,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:48:27,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:48:32,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:48:37,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:48:42,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:48:47,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:48:52,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:48:57,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:49:02,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:49:07,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:49:12,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:49:17,326 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:49:22,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:49:27,327 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:49:32,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:49:37,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:49:42,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:49:47,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:49:52,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:49:57,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:50:02,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:50:07,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:50:12,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:50:17,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:50:22,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:50:27,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:50:32,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:50:37,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:50:42,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:50:47,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:50:52,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:50:57,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:51:02,330 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:51:07,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:51:12,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:51:13,504 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 16:51:13,505 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 16:51:13,508 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 16:51:13,509 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:51:13,516 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:51:13,625 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:51:17,319 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 16:51:17,338 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 16:51:17,357 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 16:51:17,358 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 16:51:17,358 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 16:51:17,380 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 16:51:17,418 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'safe_z_home': {'home_xy_position': '112.5, 112.5', 'z_hop': '20'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '1', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'position_endstop': '2.1', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,50', 'mesh_max': '210, 220', 'probe_count': '5,5', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,40', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 195', 'screw3_name': '"Back Right"', 'screw4': '0, 195', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'safe_z_home': {'home_xy_position': [112.5, 112.5], 'z_hop': 20.0, 'z_hop_speed': 15.0, 'speed': 50.0, 'move_to_previous': False}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 2.1, 'deactivate_on_each_sample': True, 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [20.0, 50.0], 'mesh_max': [210.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'horizontal_move_z': 0.7, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 220.0], 'screw2_name': 'screw at 20.000,220.000', 'screw3': [220.0, 220.0], 'screw3_name': 'screw at 220.000,220.000', 'screw4': [220.0, 20.0], 'screw4_name': 'screw at 220.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 40.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 195.0], 'screw3_name': '"Back Right"', 'screw4': [0.0, 195.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 16:51:17,424 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:51:17,425 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 16:51:17,426 [printer.py:reinit()] - # Extruders: 1
2024-11-24 16:51:17,426 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 16:51:17,426 [printer.py:reinit()] - # Fans: 2
2024-11-24 16:51:17,426 [printer.py:reinit()] - # Output pins: 1
2024-11-24 16:51:17,426 [printer.py:reinit()] - # Leds: 0
2024-11-24 16:51:17,427 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 16:51:17,455 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 16:51:17,458 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 16:51:17,795 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 16:51:17,795 [screen.py:init_klipper()] - Printer initialized
2024-11-24 16:51:17,796 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 16:51:17,797 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 16:51:18,941 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 16:51:18,941 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 16:51:18,945 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 16:51:18,951 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:51:19,085 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 16:51:19,102 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 16:51:19,112 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 16:51:19,123 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 16:51:19,132 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 16:51:19,198 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 16:51:19,201 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 16:51:19,255 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 16:51:19,258 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 16:51:19,278 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 16:51:19,332 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:51:24,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:51:29,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:51:34,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:51:39,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:51:44,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:51:49,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:51:51,946 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 16:51:51,947 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 16:51:51,949 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 16:51:51,950 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:51:51,955 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:51:52,026 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:51:55,319 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 16:51:55,338 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 16:51:55,358 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 16:51:55,359 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'error', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 16:51:55,359 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 16:51:55,380 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 16:51:55,489 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz\nThe axes to override. For example, if this is set to "z" then the\noverride script will only be run when the z axis is homed (eg, via\na "G28" or "G28 Z0" command). Note, the override script should\nstill home all axes. The default is "xyz" which causes the\noverride script to be run in place of all G28 commands.', 'set_position_x': '', 'set_position_y': '', 'set_position_z': '\nIf specified, the printer will assume the axis is at the specified\nposition prior to running the above g-code commands. Setting this\ndisables homing checks for that axis. This may be useful if the\nhead must move prior to invoking the normal G28 mechanism for an\naxis. The default is to not force a position for an axis.'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '1', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'position_endstop': '2.1', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,50', 'mesh_max': '210, 220', 'probe_count': '5,5', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,40', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 195', 'screw3_name': '"Back Right"', 'screw4': '0, 195', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {}}}
2024-11-24 16:51:55,493 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:51:55,494 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 16:51:55,495 [printer.py:reinit()] - # Extruders: 1
2024-11-24 16:51:55,495 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 16:51:55,495 [printer.py:reinit()] - # Fans: 2
2024-11-24 16:51:55,495 [printer.py:reinit()] - # Output pins: 1
2024-11-24 16:51:55,495 [printer.py:reinit()] - # Leds: 0
2024-11-24 16:51:55,496 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 16:51:55,522 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 16:51:55,525 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 16:51:55,805 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 16:51:55,806 [screen.py:init_klipper()] - Printer initialized
2024-11-24 16:51:55,806 [printer.py:change_state()] - Changing state from 'disconnected' to 'error'
2024-11-24 16:51:55,807 [printer.py:change_state()] - Adding callback for state: error
2024-11-24 16:51:55,836 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:51:55,917 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:52:21,636 [printer.py:change_state()] - Changing state from 'error' to 'disconnected'
2024-11-24 16:52:21,637 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 16:52:21,639 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 16:52:21,639 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:52:21,642 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:52:21,709 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:52:25,320 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 16:52:25,343 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 16:52:25,367 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 16:52:25,367 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 16:52:25,368 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 16:52:25,397 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 16:52:25,443 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '1', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'position_endstop': '2.1', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,50', 'mesh_max': '210, 220', 'probe_count': '5,5', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,40', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 195', 'screw3_name': '"Back Right"', 'screw4': '0, 195', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 2.1, 'deactivate_on_each_sample': True, 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [20.0, 50.0], 'mesh_max': [210.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'horizontal_move_z': 0.7, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 220.0], 'screw2_name': 'screw at 20.000,220.000', 'screw3': [220.0, 220.0], 'screw3_name': 'screw at 220.000,220.000', 'screw4': [220.0, 20.0], 'screw4_name': 'screw at 220.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 40.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 195.0], 'screw3_name': '"Back Right"', 'screw4': [0.0, 195.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 16:52:25,447 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:52:25,449 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 16:52:25,450 [printer.py:reinit()] - # Extruders: 1
2024-11-24 16:52:25,450 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 16:52:25,450 [printer.py:reinit()] - # Fans: 2
2024-11-24 16:52:25,450 [printer.py:reinit()] - # Output pins: 1
2024-11-24 16:52:25,451 [printer.py:reinit()] - # Leds: 0
2024-11-24 16:52:25,451 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 16:52:25,547 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 16:52:25,550 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 16:52:25,787 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 16:52:25,787 [screen.py:init_klipper()] - Printer initialized
2024-11-24 16:52:25,788 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 16:52:25,788 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 16:52:26,680 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 16:52:26,681 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 16:52:26,682 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 16:52:26,690 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:52:26,836 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 16:52:26,859 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 16:52:26,872 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 16:52:26,884 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 16:52:26,896 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 16:52:26,977 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 16:52:26,979 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 16:52:27,032 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 16:52:27,036 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 16:52:27,061 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 16:52:27,147 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:52:32,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:52:35,322 [screen.py:show_screensaver()] - Showing Screensaver
2024-11-24 16:56:46,273 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=1024, height=768)
2024-11-24 16:57:26,645 [screen.py:close_screensaver()] - Closing Screensaver
2024-11-24 16:57:26,675 [screen.py:wake_screen()] - Screen wake up
2024-11-24 16:57:26,686 [screen.py:close_screensaver()] - Restoring Dialog <Gtk.Dialog object at 0xffffb4043080 (GtkDialog at 0x1bc20ea0)>
2024-11-24 16:57:26,689 [screen.py:show_popup_message()] - error: No trigger on probe after full movement
2024-11-24 16:57:26,746 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:57:27,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:57:32,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:57:37,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:57:37,492 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:57:42,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:57:47,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:57:52,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:57:53,057 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 16:57:53,058 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 16:57:53,060 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 16:57:53,060 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:57:53,067 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-11-24 16:57:53,068 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:57:53,136 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:57:56,320 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 16:57:56,339 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 16:57:56,359 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 16:57:56,360 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 16:57:56,360 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 16:57:56,388 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 16:57:56,437 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '1', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'position_endstop': '2.1', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_mesh': {'speed': '120', 'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,50', 'mesh_max': '210, 220', 'probe_count': '5,5', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,0', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 190', 'screw3_name': '"Back Right"', 'screw4': '20, 190', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 2.1, 'deactivate_on_each_sample': True, 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [5, 5], 'mesh_min': [20.0, 50.0], 'mesh_max': [210.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'horizontal_move_z': 0.7, 'speed': 120.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 220.0], 'screw2_name': 'screw at 20.000,220.000', 'screw3': [220.0, 220.0], 'screw3_name': 'screw at 220.000,220.000', 'screw4': [220.0, 20.0], 'screw4_name': 'screw at 220.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 0.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 190.0], 'screw3_name': '"Back Right"', 'screw4': [20.0, 190.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 16:57:56,443 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:57:56,445 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 16:57:56,446 [printer.py:reinit()] - # Extruders: 1
2024-11-24 16:57:56,446 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 16:57:56,446 [printer.py:reinit()] - # Fans: 2
2024-11-24 16:57:56,448 [printer.py:reinit()] - # Output pins: 1
2024-11-24 16:57:56,449 [printer.py:reinit()] - # Leds: 0
2024-11-24 16:57:56,449 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 16:57:56,483 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 16:57:56,487 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 16:57:56,778 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 16:57:56,779 [screen.py:init_klipper()] - Printer initialized
2024-11-24 16:57:56,779 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 16:57:56,780 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 16:57:58,419 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 16:57:58,420 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 16:57:58,423 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 16:57:58,432 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:57:58,579 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 16:57:58,600 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 16:57:58,614 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 16:57:58,627 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 16:57:58,638 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 16:57:58,722 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 16:57:58,724 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 16:57:58,780 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 16:57:58,784 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 16:57:58,808 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 16:57:58,862 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:58:04,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:58:09,326 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:58:14,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:58:16,818 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 16:58:16,818 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 16:58:16,820 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 16:58:16,820 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:58:16,825 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:58:16,892 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 16:58:20,320 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 16:58:20,340 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 16:58:20,359 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 16:58:20,360 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 16:58:20,360 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 16:58:20,384 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 16:58:20,425 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '1', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '2.1', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_mesh': {'speed': '200', 'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,50', 'mesh_max': '210, 220', 'probe_count': '15,15', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,0', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 190', 'screw3_name': '"Back Right"', 'screw4': '20, 190', 'screw4_name': '"Back Left"', 'speed': '50', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 2.1, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [15, 15], 'mesh_min': [20.0, 50.0], 'mesh_max': [210.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'horizontal_move_z': 0.7, 'speed': 200.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 220.0], 'screw2_name': 'screw at 20.000,220.000', 'screw3': [220.0, 220.0], 'screw3_name': 'screw at 220.000,220.000', 'screw4': [220.0, 20.0], 'screw4_name': 'screw at 220.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 0.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 190.0], 'screw3_name': '"Back Right"', 'screw4': [20.0, 190.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 50.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 16:58:20,431 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 16:58:20,432 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 16:58:20,433 [printer.py:reinit()] - # Extruders: 1
2024-11-24 16:58:20,433 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 16:58:20,433 [printer.py:reinit()] - # Fans: 2
2024-11-24 16:58:20,433 [printer.py:reinit()] - # Output pins: 1
2024-11-24 16:58:20,433 [printer.py:reinit()] - # Leds: 0
2024-11-24 16:58:20,434 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 16:58:20,463 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 16:58:20,466 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 16:58:20,777 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 16:58:20,778 [screen.py:init_klipper()] - Printer initialized
2024-11-24 16:58:20,779 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 16:58:20,779 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 16:58:22,238 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 16:58:22,238 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 16:58:22,240 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 16:58:22,253 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 16:58:22,409 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 16:58:22,430 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 16:58:22,442 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 16:58:22,454 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 16:58:22,465 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 16:58:22,551 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 16:58:22,554 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 16:58:22,609 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 16:58:22,613 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 16:58:22,638 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 16:58:22,732 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:58:28,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:58:33,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:58:38,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:58:43,334 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:58:48,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:58:53,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:58:58,327 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:59:03,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 16:59:04,404 [screen.py:_load_panel()] - Loading panel: bed_level
2024-11-24 16:59:04,449 [bed_level.py:_get_screws()] - screws_tilt_adjust
2024-11-24 16:59:04,449 [bed_level.py:_get_screws()] - screw1: 20,0
2024-11-24 16:59:04,451 [bed_level.py:_get_screws()] - screw1_name: "Front Left"
2024-11-24 16:59:04,452 [bed_level.py:_get_screws()] - screw2: 215,0
2024-11-24 16:59:04,452 [bed_level.py:_get_screws()] - screw2_name: "Front Right"
2024-11-24 16:59:04,453 [bed_level.py:_get_screws()] - screw3: 215, 190
2024-11-24 16:59:04,453 [bed_level.py:_get_screws()] - screw3_name: "Back Right"
2024-11-24 16:59:04,454 [bed_level.py:_get_screws()] - screw4: 20, 190
2024-11-24 16:59:04,454 [bed_level.py:_get_screws()] - screw4_name: "Back Left"
2024-11-24 16:59:04,455 [bed_level.py:_get_screws()] - speed: 50
2024-11-24 16:59:04,455 [bed_level.py:_get_screws()] - horizontal_move_z: 5
2024-11-24 16:59:04,456 [bed_level.py:_get_screws()] - screw_thread: CW-M3
2024-11-24 16:59:04,456 [bed_level.py:__init__()] - screws_tilt_adjust: [[20.0, 0.0], [215.0, 0.0], [20.0, 190.0], [215.0, 190.0]]
2024-11-24 16:59:04,457 [bed_level.py:__init__()] - screws with offset: [[20.0, 0.0], [215.0, 0.0], [20.0, 190.0], [215.0, 190.0]]
2024-11-24 16:59:04,458 [bed_level.py:__init__()] - X: {20.0, 215.0}
Y: {0.0, 190.0}
2024-11-24 16:59:04,458 [bed_level.py:__init__()] - Using max_distance: 137 to fit: 4 screws.
2024-11-24 16:59:04,459 [bed_level.py:__init__()] - Using 4/4-screw locations
2024-11-24 16:59:04,561 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > bed_level
2024-11-24 16:59:04,565 [bed_level.py:process_update()] - screw1 CW 00:00
2024-11-24 16:59:04,565 [bed_level.py:process_update()] - X: 20.0 Y: 0.0 Adjust: 00:00 Pos: fl
2024-11-24 16:59:04,566 [bed_level.py:process_update()] - screw1 is the Reference
2024-11-24 16:59:04,575 [bed_level.py:process_update()] - screw2 CCW 00:17
2024-11-24 16:59:04,576 [bed_level.py:process_update()] - X: 215.0 Y: 0.0 Adjust: 00:17 Pos: fr
2024-11-24 16:59:04,585 [bed_level.py:process_update()] - screw3 CCW 01:34
2024-11-24 16:59:04,586 [bed_level.py:process_update()] - X: 215.0 Y: 190.0 Adjust: 01:34 Pos: br
2024-11-24 16:59:04,594 [bed_level.py:process_update()] - screw4 CCW 01:34
2024-11-24 16:59:04,595 [bed_level.py:process_update()] - X: 20.0 Y: 190.0 Adjust: 01:34 Pos: bl
2024-11-24 16:59:04,617 [bed_level.py:process_update()] - screw1 CW 00:00
2024-11-24 16:59:04,618 [bed_level.py:process_update()] - X: 20.0 Y: 0.0 Adjust: 00:00 Pos: fl
2024-11-24 16:59:04,618 [bed_level.py:process_update()] - screw1 is the Reference
2024-11-24 16:59:04,629 [bed_level.py:process_update()] - screw2 CCW 00:17
2024-11-24 16:59:04,630 [bed_level.py:process_update()] - X: 215.0 Y: 0.0 Adjust: 00:17 Pos: fr
2024-11-24 16:59:04,640 [bed_level.py:process_update()] - screw3 CCW 01:34
2024-11-24 16:59:04,640 [bed_level.py:process_update()] - X: 215.0 Y: 190.0 Adjust: 01:34 Pos: br
2024-11-24 16:59:04,652 [bed_level.py:process_update()] - screw4 CCW 01:34
2024-11-24 16:59:04,653 [bed_level.py:process_update()] - X: 20.0 Y: 190.0 Adjust: 01:34 Pos: bl
2024-11-24 16:59:46,069 [bed_level.py:process_update()] - screw1 CW 00:00
2024-11-24 16:59:46,070 [bed_level.py:process_update()] - X: 20.0 Y: 0.0 Adjust: 00:00 Pos: fl
2024-11-24 16:59:46,070 [bed_level.py:process_update()] - screw1 is the Reference
2024-11-24 16:59:46,083 [bed_level.py:process_update()] - screw2 CW 00:02
2024-11-24 16:59:46,083 [bed_level.py:process_update()] - X: 215.0 Y: 0.0 Adjust: 00:02 Pos: fr
2024-11-24 16:59:46,092 [bed_level.py:process_update()] - screw3 CCW 00:35
2024-11-24 16:59:46,092 [bed_level.py:process_update()] - X: 215.0 Y: 190.0 Adjust: 00:35 Pos: br
2024-11-24 16:59:46,102 [bed_level.py:process_update()] - screw4 CCW 01:02
2024-11-24 16:59:46,102 [bed_level.py:process_update()] - X: 20.0 Y: 190.0 Adjust: 01:02 Pos: bl
2024-11-24 17:00:14,372 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 17:00:14,373 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 17:00:14,374 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 17:00:14,374 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 17:00:14,377 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 17:00:14,445 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 17:00:17,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 17:00:17,352 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 17:00:17,376 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 17:00:17,377 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 17:00:17,378 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 17:00:17,809 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 17:00:17,852 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '1', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '2.1', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_mesh': {'speed': '200', 'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,50', 'mesh_max': '210, 220', 'probe_count': '15,15', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,0', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 190', 'screw3_name': '"Back Right"', 'screw4': '20, 190', 'screw4_name': '"Back Left"', 'speed': '160', 'horizontal_move_z': '3', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 2.1, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [15, 15], 'mesh_min': [20.0, 50.0], 'mesh_max': [210.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'horizontal_move_z': 0.7, 'speed': 200.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 220.0], 'screw2_name': 'screw at 20.000,220.000', 'screw3': [220.0, 220.0], 'screw3_name': 'screw at 220.000,220.000', 'screw4': [220.0, 20.0], 'screw4_name': 'screw at 220.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 0.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 190.0], 'screw3_name': '"Back Right"', 'screw4': [20.0, 190.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 3.0, 'speed': 160.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 17:00:17,858 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 17:00:17,859 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 17:00:17,860 [printer.py:reinit()] - # Extruders: 1
2024-11-24 17:00:17,860 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 17:00:17,860 [printer.py:reinit()] - # Fans: 2
2024-11-24 17:00:17,860 [printer.py:reinit()] - # Output pins: 1
2024-11-24 17:00:17,860 [printer.py:reinit()] - # Leds: 0
2024-11-24 17:00:17,861 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 17:00:17,887 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 17:00:17,890 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 17:00:18,200 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 17:00:18,200 [screen.py:init_klipper()] - Printer initialized
2024-11-24 17:00:18,201 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 17:00:18,201 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 17:00:20,085 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 17:00:20,085 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 17:00:20,088 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 17:00:20,093 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 17:00:20,216 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 17:00:20,232 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 17:00:20,242 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 17:00:20,252 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 17:00:20,262 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 17:00:20,328 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 17:00:20,330 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 17:00:20,386 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 17:00:20,389 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 17:00:20,408 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 17:00:20,482 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:00:25,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:00:30,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:00:35,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:00:40,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:00:45,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:00:50,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:00:55,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:01:00,328 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:01:05,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:01:10,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:01:15,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:01:20,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:01:22,175 [screen.py:show_popup_message()] - error: Probe triggered prior to movement
2024-11-24 17:01:22,245 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:01:25,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:01:30,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:01:32,494 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:01:35,326 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:01:40,341 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:01:41,641 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 17:01:41,641 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 17:01:41,643 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 17:01:41,644 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 17:01:41,649 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 17:01:41,734 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 17:01:45,319 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 17:01:45,338 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 17:01:45,356 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 17:01:45,357 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 17:01:45,357 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 17:01:45,379 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 17:01:45,417 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '1', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '2.1', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_mesh': {'speed': '200', 'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,50', 'mesh_max': '210, 220', 'probe_count': '15,15', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,0', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 190', 'screw3_name': '"Back Right"', 'screw4': '20, 190', 'screw4_name': '"Back Left"', 'speed': '300', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 2.1, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [15, 15], 'mesh_min': [20.0, 50.0], 'mesh_max': [210.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'horizontal_move_z': 0.7, 'speed': 200.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 220.0], 'screw2_name': 'screw at 20.000,220.000', 'screw3': [220.0, 220.0], 'screw3_name': 'screw at 220.000,220.000', 'screw4': [220.0, 20.0], 'screw4_name': 'screw at 220.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 0.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 190.0], 'screw3_name': '"Back Right"', 'screw4': [20.0, 190.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 300.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 17:01:45,423 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 17:01:45,425 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 17:01:45,425 [printer.py:reinit()] - # Extruders: 1
2024-11-24 17:01:45,425 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 17:01:45,425 [printer.py:reinit()] - # Fans: 2
2024-11-24 17:01:45,425 [printer.py:reinit()] - # Output pins: 1
2024-11-24 17:01:45,426 [printer.py:reinit()] - # Leds: 0
2024-11-24 17:01:45,426 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 17:01:45,456 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 17:01:45,459 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 17:01:45,811 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 17:01:45,811 [screen.py:init_klipper()] - Printer initialized
2024-11-24 17:01:45,812 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 17:01:45,812 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 17:01:46,950 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 17:01:46,950 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 17:01:46,955 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 17:01:46,960 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 17:01:47,080 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 17:01:47,096 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 17:01:47,106 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 17:01:47,116 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 17:01:47,125 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 17:01:47,187 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 17:01:47,189 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 17:01:47,243 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 17:01:47,246 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 17:01:47,265 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 17:01:47,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:01:52,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:01:57,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:02:02,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:02:07,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:02:12,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:02:13,486 [screen.py:show_popup_message()] - error: Probe triggered prior to movement
2024-11-24 17:02:13,532 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:02:17,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:02:22,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:02:23,506 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:02:26,029 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 17:02:26,030 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 17:02:26,032 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 17:02:26,032 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 17:02:26,037 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 17:02:26,105 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 17:02:29,322 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 17:02:29,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 17:02:29,370 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 17:02:29,371 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 17:02:29,372 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 17:02:29,402 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 17:02:29,451 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '1', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '2.1', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_mesh': {'speed': '200', 'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,50', 'mesh_max': '210, 220', 'probe_count': '15,15', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,0', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 190', 'screw3_name': '"Back Right"', 'screw4': '20, 190', 'screw4_name': '"Back Left"', 'speed': '200', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 2.1, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [15, 15], 'mesh_min': [20.0, 50.0], 'mesh_max': [210.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'horizontal_move_z': 0.7, 'speed': 200.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 220.0], 'screw2_name': 'screw at 20.000,220.000', 'screw3': [220.0, 220.0], 'screw3_name': 'screw at 220.000,220.000', 'screw4': [220.0, 20.0], 'screw4_name': 'screw at 220.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 0.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 190.0], 'screw3_name': '"Back Right"', 'screw4': [20.0, 190.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 200.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 17:02:29,457 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 17:02:29,458 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 17:02:29,459 [printer.py:reinit()] - # Extruders: 1
2024-11-24 17:02:29,459 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 17:02:29,459 [printer.py:reinit()] - # Fans: 2
2024-11-24 17:02:29,460 [printer.py:reinit()] - # Output pins: 1
2024-11-24 17:02:29,461 [printer.py:reinit()] - # Leds: 0
2024-11-24 17:02:29,462 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 17:02:29,491 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 17:02:29,494 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 17:02:29,793 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 17:02:29,793 [screen.py:init_klipper()] - Printer initialized
2024-11-24 17:02:29,794 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 17:02:29,794 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 17:02:31,431 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 17:02:31,431 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 17:02:31,434 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 17:02:31,439 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 17:02:31,573 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 17:02:31,589 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 17:02:31,599 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 17:02:31,609 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 17:02:31,619 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 17:02:31,695 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 17:02:31,697 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 17:02:31,749 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 17:02:31,753 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 17:02:31,773 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 17:02:31,832 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:02:36,626 [screen.py:show_popup_message()] - error: Must home axis first: 0.000 0.000 5.000 [0.000]
2024-11-24 17:02:36,684 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:02:37,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:02:42,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:02:47,326 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:02:47,498 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:02:49,205 [screen.py:show_popup_message()] - error: Probe triggered prior to movement
2024-11-24 17:02:49,258 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:02:52,327 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:02:57,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:02:57,382 [screen.py:show_popup_message()] - error: Probe triggered prior to movement
2024-11-24 17:02:57,427 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:02:57,633 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:03:02,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:03:07,339 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:03:07,519 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:03:10,721 [screen.py:show_popup_message()] - error: Probe triggered prior to movement
2024-11-24 17:03:10,792 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:03:12,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:03:17,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:03:21,495 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:03:22,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:03:22,954 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 17:03:22,955 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 17:03:22,958 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 17:03:22,959 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 17:03:22,965 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 17:03:23,070 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 17:03:26,319 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 17:03:26,338 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 17:03:26,357 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 17:03:26,358 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 17:03:26,358 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 17:03:26,379 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 17:03:26,419 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '1', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '1', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_mesh': {'speed': '200', 'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,50', 'mesh_max': '210, 220', 'probe_count': '15,15', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,0', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 190', 'screw3_name': '"Back Right"', 'screw4': '20, 190', 'screw4_name': '"Back Left"', 'speed': '200', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 1.0, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [15, 15], 'mesh_min': [20.0, 50.0], 'mesh_max': [210.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'horizontal_move_z': 0.7, 'speed': 200.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 220.0], 'screw2_name': 'screw at 20.000,220.000', 'screw3': [220.0, 220.0], 'screw3_name': 'screw at 220.000,220.000', 'screw4': [220.0, 20.0], 'screw4_name': 'screw at 220.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 0.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 190.0], 'screw3_name': '"Back Right"', 'screw4': [20.0, 190.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 200.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 17:03:26,425 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 17:03:26,426 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 17:03:26,427 [printer.py:reinit()] - # Extruders: 1
2024-11-24 17:03:26,427 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 17:03:26,427 [printer.py:reinit()] - # Fans: 2
2024-11-24 17:03:26,427 [printer.py:reinit()] - # Output pins: 1
2024-11-24 17:03:26,428 [printer.py:reinit()] - # Leds: 0
2024-11-24 17:03:26,428 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 17:03:26,459 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 17:03:26,462 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 17:03:26,767 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 17:03:26,767 [screen.py:init_klipper()] - Printer initialized
2024-11-24 17:03:26,768 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 17:03:26,769 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 17:03:28,405 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 17:03:28,406 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 17:03:28,408 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 17:03:28,413 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 17:03:28,534 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 17:03:28,550 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 17:03:28,561 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 17:03:28,571 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 17:03:28,581 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 17:03:28,645 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 17:03:28,647 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 17:03:28,702 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 17:03:28,705 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 17:03:28,724 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 17:03:28,779 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:03:34,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:03:39,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:03:44,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:03:49,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:03:54,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:03:57,150 [screen.py:show_popup_message()] - error: // Unknown command:"M108"
2024-11-24 17:03:57,195 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:03:59,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:04:04,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:04:07,506 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:04:09,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:04:14,320 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:04:19,327 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:04:24,336 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:04:25,759 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 17:04:25,759 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 17:04:25,761 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 17:04:25,761 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 17:04:25,765 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 17:04:25,851 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 17:04:29,319 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 17:04:29,345 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 17:04:29,368 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 17:04:29,369 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 17:04:29,370 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 17:04:29,396 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 17:04:29,444 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '2500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '1', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '0.7', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_mesh': {'speed': '200', 'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,50', 'mesh_max': '210, 220', 'probe_count': '15,15', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,0', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 190', 'screw3_name': '"Back Right"', 'screw4': '20, 190', 'screw4_name': '"Back Left"', 'speed': '200', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 0.7, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [15, 15], 'mesh_min': [20.0, 50.0], 'mesh_max': [210.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'horizontal_move_z': 0.7, 'speed': 200.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 220.0], 'screw2_name': 'screw at 20.000,220.000', 'screw3': [220.0, 220.0], 'screw3_name': 'screw at 220.000,220.000', 'screw4': [220.0, 20.0], 'screw4_name': 'screw at 220.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 0.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 190.0], 'screw3_name': '"Back Right"', 'screw4': [20.0, 190.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 200.0}, 'printer': {'max_velocity': 2500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 17:04:29,451 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 17:04:29,453 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 17:04:29,454 [printer.py:reinit()] - # Extruders: 1
2024-11-24 17:04:29,455 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 17:04:29,455 [printer.py:reinit()] - # Fans: 2
2024-11-24 17:04:29,456 [printer.py:reinit()] - # Output pins: 1
2024-11-24 17:04:29,456 [printer.py:reinit()] - # Leds: 0
2024-11-24 17:04:29,457 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 17:04:29,490 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 17:04:29,493 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 17:04:29,787 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 17:04:29,787 [screen.py:init_klipper()] - Printer initialized
2024-11-24 17:04:29,788 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 17:04:29,788 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 17:04:31,430 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 17:04:31,430 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 17:04:31,434 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 17:04:31,441 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 17:04:31,589 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 17:04:31,611 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 17:04:31,623 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 17:04:31,635 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 17:04:31,646 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 17:04:31,723 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 17:04:31,726 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 17:04:31,784 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 17:04:31,789 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 17:04:31,833 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 17:04:31,921 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:04:37,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:04:42,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:04:47,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:04:52,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:04:57,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:05:01,854 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 17:05:01,886 [bed_level.py:_get_screws()] - screws_tilt_adjust
2024-11-24 17:05:01,886 [bed_level.py:_get_screws()] - screw1: 20,0
2024-11-24 17:05:01,887 [bed_level.py:_get_screws()] - screw1_name: "Front Left"
2024-11-24 17:05:01,888 [bed_level.py:_get_screws()] - screw2: 215,0
2024-11-24 17:05:01,888 [bed_level.py:_get_screws()] - screw2_name: "Front Right"
2024-11-24 17:05:01,889 [bed_level.py:_get_screws()] - screw3: 215, 190
2024-11-24 17:05:01,889 [bed_level.py:_get_screws()] - screw3_name: "Back Right"
2024-11-24 17:05:01,890 [bed_level.py:_get_screws()] - screw4: 20, 190
2024-11-24 17:05:01,890 [bed_level.py:_get_screws()] - screw4_name: "Back Left"
2024-11-24 17:05:01,891 [bed_level.py:_get_screws()] - speed: 200
2024-11-24 17:05:01,892 [bed_level.py:_get_screws()] - horizontal_move_z: 5
2024-11-24 17:05:01,893 [bed_level.py:_get_screws()] - screw_thread: CW-M3
2024-11-24 17:05:01,894 [bed_level.py:__init__()] - screws_tilt_adjust: [[20.0, 0.0], [215.0, 0.0], [20.0, 190.0], [215.0, 190.0]]
2024-11-24 17:05:01,895 [bed_level.py:__init__()] - screws with offset: [[20.0, 0.0], [215.0, 0.0], [20.0, 190.0], [215.0, 190.0]]
2024-11-24 17:05:01,895 [bed_level.py:__init__()] - X: {20.0, 215.0}
Y: {0.0, 190.0}
2024-11-24 17:05:01,896 [bed_level.py:__init__()] - Using max_distance: 137 to fit: 4 screws.
2024-11-24 17:05:01,897 [bed_level.py:__init__()] - Using 4/4-screw locations
2024-11-24 17:05:02,020 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > bed_level
2024-11-24 17:05:02,024 [bed_level.py:process_update()] - screw1 CW 00:00
2024-11-24 17:05:02,025 [bed_level.py:process_update()] - X: 20.0 Y: 0.0 Adjust: 00:00 Pos: fl
2024-11-24 17:05:02,026 [bed_level.py:process_update()] - screw1 is the Reference
2024-11-24 17:05:02,038 [bed_level.py:process_update()] - screw2 CCW 00:06
2024-11-24 17:05:02,038 [bed_level.py:process_update()] - X: 215.0 Y: 0.0 Adjust: 00:06 Pos: fr
2024-11-24 17:05:02,048 [bed_level.py:process_update()] - screw3 CCW 00:06
2024-11-24 17:05:02,048 [bed_level.py:process_update()] - X: 215.0 Y: 190.0 Adjust: 00:06 Pos: br
2024-11-24 17:05:02,058 [bed_level.py:process_update()] - screw4 CCW 00:07
2024-11-24 17:05:02,059 [bed_level.py:process_update()] - X: 20.0 Y: 190.0 Adjust: 00:07 Pos: bl
2024-11-24 17:05:02,080 [bed_level.py:process_update()] - screw1 CW 00:00
2024-11-24 17:05:02,081 [bed_level.py:process_update()] - X: 20.0 Y: 0.0 Adjust: 00:00 Pos: fl
2024-11-24 17:05:02,081 [bed_level.py:process_update()] - screw1 is the Reference
2024-11-24 17:05:02,094 [bed_level.py:process_update()] - screw2 CCW 00:06
2024-11-24 17:05:02,095 [bed_level.py:process_update()] - X: 215.0 Y: 0.0 Adjust: 00:06 Pos: fr
2024-11-24 17:05:02,113 [bed_level.py:process_update()] - screw3 CCW 00:06
2024-11-24 17:05:02,114 [bed_level.py:process_update()] - X: 215.0 Y: 190.0 Adjust: 00:06 Pos: br
2024-11-24 17:05:02,126 [bed_level.py:process_update()] - screw4 CCW 00:07
2024-11-24 17:05:02,127 [bed_level.py:process_update()] - X: 20.0 Y: 190.0 Adjust: 00:07 Pos: bl
2024-11-24 17:05:31,905 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 17:05:31,905 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 17:05:31,906 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 17:05:31,907 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 17:05:31,910 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 17:05:31,981 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 17:05:35,321 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 17:05:35,342 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 17:05:35,360 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 17:05:35,360 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 17:05:35,361 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 17:05:35,383 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 17:05:35,423 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '1', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'false', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '0.7', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_mesh': {'speed': '200', 'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,50', 'mesh_max': '210, 220', 'probe_count': '15,15', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,0', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 190', 'screw3_name': '"Back Right"', 'screw4': '20, 190', 'screw4_name': '"Back Left"', 'speed': '150', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'output_pin led': {'pwm': False, 'pin': 'PB5', 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 0.7, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [15, 15], 'mesh_min': [20.0, 50.0], 'mesh_max': [210.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'horizontal_move_z': 0.7, 'speed': 200.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 220.0], 'screw2_name': 'screw at 20.000,220.000', 'screw3': [220.0, 220.0], 'screw3_name': 'screw at 220.000,220.000', 'screw4': [220.0, 20.0], 'screw4_name': 'screw at 220.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 0.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 190.0], 'screw3_name': '"Back Right"', 'screw4': [20.0, 190.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 150.0}, 'printer': {'max_velocity': 500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 17:05:35,429 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 17:05:35,430 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 17:05:35,431 [printer.py:reinit()] - # Extruders: 1
2024-11-24 17:05:35,431 [printer.py:reinit()] - # Temperature devices: 3
2024-11-24 17:05:35,431 [printer.py:reinit()] - # Fans: 2
2024-11-24 17:05:35,432 [printer.py:reinit()] - # Output pins: 1
2024-11-24 17:05:35,433 [printer.py:reinit()] - # Leds: 0
2024-11-24 17:05:35,433 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 17:05:35,461 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 17:05:35,464 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&fan&heater_fan hotend_fan&output_pin LED
2024-11-24 17:05:35,775 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 17:05:35,776 [screen.py:init_klipper()] - Printer initialized
2024-11-24 17:05:35,776 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 17:05:35,777 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 17:05:37,238 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 17:05:37,239 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 17:05:37,241 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 17:05:37,246 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 17:05:37,373 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 17:05:37,390 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 17:05:37,399 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 17:05:37,410 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 17:05:37,419 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 17:05:37,482 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 17:05:37,484 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 17:05:37,539 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 17:05:37,542 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 17:05:37,561 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 17:05:37,619 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:05:42,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:05:47,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:05:52,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:05:57,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:06:02,329 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:06:07,330 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:06:12,325 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:06:17,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:06:22,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:06:27,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:06:32,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:06:33,303 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 17:06:33,328 [bed_level.py:_get_screws()] - screws_tilt_adjust
2024-11-24 17:06:33,329 [bed_level.py:_get_screws()] - screw1: 20,0
2024-11-24 17:06:33,329 [bed_level.py:_get_screws()] - screw1_name: "Front Left"
2024-11-24 17:06:33,329 [bed_level.py:_get_screws()] - screw2: 215,0
2024-11-24 17:06:33,330 [bed_level.py:_get_screws()] - screw2_name: "Front Right"
2024-11-24 17:06:33,330 [bed_level.py:_get_screws()] - screw3: 215, 190
2024-11-24 17:06:33,330 [bed_level.py:_get_screws()] - screw3_name: "Back Right"
2024-11-24 17:06:33,330 [bed_level.py:_get_screws()] - screw4: 20, 190
2024-11-24 17:06:33,331 [bed_level.py:_get_screws()] - screw4_name: "Back Left"
2024-11-24 17:06:33,331 [bed_level.py:_get_screws()] - speed: 150
2024-11-24 17:06:33,331 [bed_level.py:_get_screws()] - horizontal_move_z: 5
2024-11-24 17:06:33,331 [bed_level.py:_get_screws()] - screw_thread: CW-M3
2024-11-24 17:06:33,332 [bed_level.py:__init__()] - screws_tilt_adjust: [[20.0, 0.0], [215.0, 0.0], [20.0, 190.0], [215.0, 190.0]]
2024-11-24 17:06:33,332 [bed_level.py:__init__()] - screws with offset: [[20.0, 0.0], [215.0, 0.0], [20.0, 190.0], [215.0, 190.0]]
2024-11-24 17:06:33,333 [bed_level.py:__init__()] - X: {20.0, 215.0}
Y: {0.0, 190.0}
2024-11-24 17:06:33,333 [bed_level.py:__init__()] - Using max_distance: 137 to fit: 4 screws.
2024-11-24 17:06:33,333 [bed_level.py:__init__()] - Using 4/4-screw locations
2024-11-24 17:06:33,422 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > bed_level
2024-11-24 17:06:33,426 [bed_level.py:process_update()] - screw1 CW 00:00
2024-11-24 17:06:33,426 [bed_level.py:process_update()] - X: 20.0 Y: 0.0 Adjust: 00:00 Pos: fl
2024-11-24 17:06:33,427 [bed_level.py:process_update()] - screw1 is the Reference
2024-11-24 17:06:33,436 [bed_level.py:process_update()] - screw2 CCW 00:05
2024-11-24 17:06:33,437 [bed_level.py:process_update()] - X: 215.0 Y: 0.0 Adjust: 00:05 Pos: fr
2024-11-24 17:06:33,444 [bed_level.py:process_update()] - screw3 CCW 00:11
2024-11-24 17:06:33,445 [bed_level.py:process_update()] - X: 215.0 Y: 190.0 Adjust: 00:11 Pos: br
2024-11-24 17:06:33,452 [bed_level.py:process_update()] - screw4 CCW 00:17
2024-11-24 17:06:33,453 [bed_level.py:process_update()] - X: 20.0 Y: 190.0 Adjust: 00:17 Pos: bl
2024-11-24 17:06:33,466 [bed_level.py:process_update()] - screw1 CW 00:00
2024-11-24 17:06:33,466 [bed_level.py:process_update()] - X: 20.0 Y: 0.0 Adjust: 00:00 Pos: fl
2024-11-24 17:06:33,466 [bed_level.py:process_update()] - screw1 is the Reference
2024-11-24 17:06:33,475 [bed_level.py:process_update()] - screw2 CCW 00:05
2024-11-24 17:06:33,476 [bed_level.py:process_update()] - X: 215.0 Y: 0.0 Adjust: 00:05 Pos: fr
2024-11-24 17:06:33,484 [bed_level.py:process_update()] - screw3 CCW 00:11
2024-11-24 17:06:33,485 [bed_level.py:process_update()] - X: 215.0 Y: 190.0 Adjust: 00:11 Pos: br
2024-11-24 17:06:33,493 [bed_level.py:process_update()] - screw4 CCW 00:17
2024-11-24 17:06:33,494 [bed_level.py:process_update()] - X: 20.0 Y: 190.0 Adjust: 00:17 Pos: bl
2024-11-24 17:07:00,780 [bed_level.py:process_update()] - screw1 CW 00:00
2024-11-24 17:07:00,781 [bed_level.py:process_update()] - X: 20.0 Y: 0.0 Adjust: 00:00 Pos: fl
2024-11-24 17:07:00,781 [bed_level.py:process_update()] - screw1 is the Reference
2024-11-24 17:07:00,796 [bed_level.py:process_update()] - screw2 CCW 00:01
2024-11-24 17:07:00,797 [bed_level.py:process_update()] - X: 215.0 Y: 0.0 Adjust: 00:01 Pos: fr
2024-11-24 17:07:00,811 [bed_level.py:process_update()] - screw3 CW 00:04
2024-11-24 17:07:00,812 [bed_level.py:process_update()] - X: 215.0 Y: 190.0 Adjust: 00:04 Pos: br
2024-11-24 17:07:00,827 [bed_level.py:process_update()] - screw4 CCW 00:01
2024-11-24 17:07:00,828 [bed_level.py:process_update()] - X: 20.0 Y: 190.0 Adjust: 00:01 Pos: bl
2024-11-24 17:07:25,452 [bed_level.py:process_update()] - screw1 CW 00:00
2024-11-24 17:07:25,453 [bed_level.py:process_update()] - X: 20.0 Y: 0.0 Adjust: 00:00 Pos: fl
2024-11-24 17:07:25,453 [bed_level.py:process_update()] - screw1 is the Reference
2024-11-24 17:07:25,466 [bed_level.py:process_update()] - screw2 CCW 00:02
2024-11-24 17:07:25,467 [bed_level.py:process_update()] - X: 215.0 Y: 0.0 Adjust: 00:02 Pos: fr
2024-11-24 17:07:25,479 [bed_level.py:process_update()] - screw3 CCW 00:01
2024-11-24 17:07:25,479 [bed_level.py:process_update()] - X: 215.0 Y: 190.0 Adjust: 00:01 Pos: br
2024-11-24 17:07:25,494 [bed_level.py:process_update()] - screw4 CCW 00:01
2024-11-24 17:07:25,495 [bed_level.py:process_update()] - X: 20.0 Y: 190.0 Adjust: 00:01 Pos: bl
2024-11-24 17:07:47,664 [bed_level.py:process_update()] - screw1 CW 00:00
2024-11-24 17:07:47,664 [bed_level.py:process_update()] - X: 20.0 Y: 0.0 Adjust: 00:00 Pos: fl
2024-11-24 17:07:47,664 [bed_level.py:process_update()] - screw1 is the Reference
2024-11-24 17:07:47,674 [bed_level.py:process_update()] - screw2 CCW 00:02
2024-11-24 17:07:47,674 [bed_level.py:process_update()] - X: 215.0 Y: 0.0 Adjust: 00:02 Pos: fr
2024-11-24 17:07:47,683 [bed_level.py:process_update()] - screw3 CW 00:00
2024-11-24 17:07:47,683 [bed_level.py:process_update()] - X: 215.0 Y: 190.0 Adjust: 00:00 Pos: br
2024-11-24 17:07:47,692 [bed_level.py:process_update()] - screw4 CCW 00:02
2024-11-24 17:07:47,692 [bed_level.py:process_update()] - X: 20.0 Y: 190.0 Adjust: 00:02 Pos: bl
2024-11-24 17:09:40,600 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 17:09:40,601 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 17:09:40,602 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 17:09:40,603 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 17:09:40,606 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 17:09:40,676 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 17:09:44,320 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 17:09:44,339 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 17:09:44,358 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 17:09:44,358 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 17:09:44,359 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 17:09:44,383 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 17:09:44,422 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '1', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan_generic exhaust_fan': {'pin': 'PC12', 'max_power': '1', 'shutdown_speed': '0', 'kick_start_time': '0.1', 'off_below': '0.10'}, 'fan_generic chamber_fan': {'pin': 'PE4', 'max_power': '1', 'shutdown_speed': '0', 'kick_start_time': '0.1', 'off_below': '0.10'}, 'temperature_sensor chamber': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': '4700', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '60', 'gcode_id': 'C: C'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'true', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '0.7', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_mesh': {'speed': '200', 'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,50', 'mesh_max': '210, 220', 'probe_count': '15,15', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,0', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 190', 'screw3_name': '"Back Right"', 'screw4': '20, 190', 'screw4_name': '"Back Left"', 'speed': '150', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'fan_generic exhaust_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC12'}, 'fan_generic chamber_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE4'}, 'temperature_sensor chamber': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 60.0, 'gcode_id': 'C: C'}, 'output_pin led': {'pwm': True, 'pin': 'PB5', 'cycle_time': 0.1, 'hardware_pwm': False, 'scale': 1.0, 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 0.7, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [15, 15], 'mesh_min': [20.0, 50.0], 'mesh_max': [210.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'horizontal_move_z': 0.7, 'speed': 200.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 220.0], 'screw2_name': 'screw at 20.000,220.000', 'screw3': [220.0, 220.0], 'screw3_name': 'screw at 220.000,220.000', 'screw4': [220.0, 20.0], 'screw4_name': 'screw at 220.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 0.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 190.0], 'screw3_name': '"Back Right"', 'screw4': [20.0, 190.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 150.0}, 'printer': {'max_velocity': 500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 17:09:44,428 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 17:09:44,430 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 17:09:44,431 [printer.py:reinit()] - # Extruders: 1
2024-11-24 17:09:44,431 [printer.py:reinit()] - # Temperature devices: 4
2024-11-24 17:09:44,432 [printer.py:reinit()] - # Fans: 4
2024-11-24 17:09:44,432 [printer.py:reinit()] - # Output pins: 1
2024-11-24 17:09:44,433 [printer.py:reinit()] - # Leds: 0
2024-11-24 17:09:44,433 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 17:09:44,459 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 17:09:44,463 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&temperature_sensor chamber&fan&fan_generic exhaust_fan&fan_generic chamber_fan&heater_fan hotend_fan&output_pin LED
2024-11-24 17:09:44,807 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 17:09:44,807 [screen.py:init_klipper()] - Printer initialized
2024-11-24 17:09:44,808 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 17:09:44,808 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 17:09:45,933 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 17:09:45,933 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 17:09:45,937 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 17:09:45,947 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 17:09:46,095 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 17:09:46,115 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 17:09:46,127 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 17:09:46,143 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 17:09:46,155 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 17:09:46,167 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-11-24 17:09:46,255 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 17:09:46,258 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 17:09:46,311 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'extruder']
2024-11-24 17:09:46,315 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 17:09:46,340 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 17:09:46,435 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:09:51,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:09:56,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:10:01,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:10:06,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:10:11,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:10:16,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:10:21,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:10:26,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:10:31,337 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:10:36,333 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:10:41,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:10:46,326 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:10:51,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:10:56,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:11:01,323 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:11:06,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:11:11,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:11:16,320 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:11:17,007 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 17:11:17,008 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 17:11:17,010 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 17:11:17,011 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 17:11:17,016 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 17:11:17,105 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 17:11:20,321 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 17:11:20,344 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 17:11:20,372 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 17:11:20,373 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 17:11:20,374 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 17:11:20,412 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
