2024-11-24 17:11:20,460 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '1', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'control': 'pid', 'pid_kp': '66.746', 'pid_ki': '3.504', 'pid_kd': '317.878', 'min_temp': '0', 'max_temp': '130'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan_generic exhaust_fan': {'pin': 'PC12', 'max_power': '1', 'shutdown_speed': '0', 'kick_start_time': '0.1', 'off_below': '0.10'}, 'fan_generic chamber_fan': {'pin': 'PE4', 'max_power': '1', 'shutdown_speed': '0', 'kick_start_time': '0.1', 'off_below': '0.10'}, 'temperature_sensor chamber': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': '4700', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '60', 'gcode_id': 'C: C'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'true', 'cycle_time': '0.01', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '0.7', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_mesh': {'speed': '200', 'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,50', 'mesh_max': '210, 220', 'probe_count': '15,15', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,0', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 190', 'screw3_name': '"Back Right"', 'screw4': '20, 190', 'screw4_name': '"Back Left"', 'speed': '150', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 66.746, 'pid_ki': 3.504, 'pid_kd': 317.878, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'fan_generic exhaust_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC12'}, 'fan_generic chamber_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE4'}, 'temperature_sensor chamber': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 60.0, 'gcode_id': 'C: C'}, 'output_pin led': {'pwm': True, 'pin': 'PB5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 0.7, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [15, 15], 'mesh_min': [20.0, 50.0], 'mesh_max': [210.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'horizontal_move_z': 0.7, 'speed': 200.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 220.0], 'screw2_name': 'screw at 20.000,220.000', 'screw3': [220.0, 220.0], 'screw3_name': 'screw at 220.000,220.000', 'screw4': [220.0, 20.0], 'screw4_name': 'screw at 220.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 0.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 190.0], 'screw3_name': '"Back Right"', 'screw4': [20.0, 190.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 150.0}, 'printer': {'max_velocity': 500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 17:11:20,465 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 17:11:20,467 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 17:11:20,467 [printer.py:reinit()] - # Extruders: 1
2024-11-24 17:11:20,467 [printer.py:reinit()] - # Temperature devices: 4
2024-11-24 17:11:20,468 [printer.py:reinit()] - # Fans: 4
2024-11-24 17:11:20,468 [printer.py:reinit()] - # Output pins: 1
2024-11-24 17:11:20,468 [printer.py:reinit()] - # Leds: 0
2024-11-24 17:11:20,468 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 17:11:20,477 [functions.py:log_start()] - --------------------KlipperScreen Log Start--------------------
2024-11-24 17:11:20,477 [functions.py:log_start()] - KlipperScreen Version: v0.3.9-50-gdaed9a09
2024-11-24 17:11:20,478 [functions.py:log_start()] - Python version: 3.9
2024-11-24 17:11:20,497 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 17:11:20,500 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&temperature_sensor chamber&fan&fan_generic exhaust_fan&fan_generic chamber_fan&heater_fan hotend_fan&output_pin LED
2024-11-24 17:11:20,808 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 17:11:20,808 [screen.py:init_klipper()] - Printer initialized
2024-11-24 17:11:20,809 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 17:11:20,809 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 17:11:22,193 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 17:11:22,193 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 17:11:22,196 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 17:11:22,202 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 17:11:22,326 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 17:11:22,342 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 17:11:22,352 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 17:11:22,363 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 17:11:22,374 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 17:11:22,384 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-11-24 17:11:22,460 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 17:11:22,462 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 17:11:22,521 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'temperature_sensor chamber', 'extruder']
2024-11-24 17:11:22,525 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 17:11:22,550 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 17:11:22,711 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:11:27,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:11:32,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:11:37,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:11:42,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'float'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:11:47,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'NoneType'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:11:52,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'NoneType'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:11:57,321 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'NoneType'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:12:02,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'NoneType'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:12:04,219 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffb4043080 (GtkDialog at 0x1bc20ea0)>
2024-11-24 17:12:04,247 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=1024, height=768)
2024-11-24 17:12:07,324 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'NoneType'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:12:12,322 [functions.py:logging_exception_handler()] - Uncaught exception <class 'TypeError'>: '>' not supported between instances of 'NoneType' and 'NoneType'
  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 85, in draw_graph
    max_num = math.ceil(self.get_max_num(data_points) * 1.1 / 10) * 10

  File "/home/biqu/KlipperScreen/ks_includes/widgets/heatergraph.py", line 61, in get_max_num
    mnum.append(max(temp))
NoneType: None
2024-11-24 17:12:33,943 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 17:12:33,967 [bed_level.py:_get_screws()] - screws_tilt_adjust
2024-11-24 17:12:33,967 [bed_level.py:_get_screws()] - screw1: 20,0
2024-11-24 17:12:33,968 [bed_level.py:_get_screws()] - screw1_name: "Front Left"
2024-11-24 17:12:33,968 [bed_level.py:_get_screws()] - screw2: 215,0
2024-11-24 17:12:33,968 [bed_level.py:_get_screws()] - screw2_name: "Front Right"
2024-11-24 17:12:33,969 [bed_level.py:_get_screws()] - screw3: 215, 190
2024-11-24 17:12:33,969 [bed_level.py:_get_screws()] - screw3_name: "Back Right"
2024-11-24 17:12:33,969 [bed_level.py:_get_screws()] - screw4: 20, 190
2024-11-24 17:12:33,969 [bed_level.py:_get_screws()] - screw4_name: "Back Left"
2024-11-24 17:12:33,970 [bed_level.py:_get_screws()] - speed: 150
2024-11-24 17:12:33,970 [bed_level.py:_get_screws()] - horizontal_move_z: 5
2024-11-24 17:12:33,970 [bed_level.py:_get_screws()] - screw_thread: CW-M3
2024-11-24 17:12:33,970 [bed_level.py:__init__()] - screws_tilt_adjust: [[20.0, 0.0], [215.0, 0.0], [20.0, 190.0], [215.0, 190.0]]
2024-11-24 17:12:33,971 [bed_level.py:__init__()] - screws with offset: [[20.0, 0.0], [215.0, 0.0], [20.0, 190.0], [215.0, 190.0]]
2024-11-24 17:12:33,971 [bed_level.py:__init__()] - X: {20.0, 215.0}
Y: {0.0, 190.0}
2024-11-24 17:12:33,972 [bed_level.py:__init__()] - Using max_distance: 137 to fit: 4 screws.
2024-11-24 17:12:33,972 [bed_level.py:__init__()] - Using 4/4-screw locations
2024-11-24 17:12:34,071 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > bed_level
2024-11-24 17:12:34,073 [bed_level.py:process_update()] - screw1 CW 00:00
2024-11-24 17:12:34,074 [bed_level.py:process_update()] - X: 20.0 Y: 0.0 Adjust: 00:00 Pos: fl
2024-11-24 17:12:34,074 [bed_level.py:process_update()] - screw1 is the Reference
2024-11-24 17:12:34,083 [bed_level.py:process_update()] - screw2 CW 00:04
2024-11-24 17:12:34,083 [bed_level.py:process_update()] - X: 215.0 Y: 0.0 Adjust: 00:04 Pos: fr
2024-11-24 17:12:34,091 [bed_level.py:process_update()] - screw3 CW 00:16
2024-11-24 17:12:34,092 [bed_level.py:process_update()] - X: 215.0 Y: 190.0 Adjust: 00:16 Pos: br
2024-11-24 17:12:34,101 [bed_level.py:process_update()] - screw4 CW 00:07
2024-11-24 17:12:34,101 [bed_level.py:process_update()] - X: 20.0 Y: 190.0 Adjust: 00:07 Pos: bl
2024-11-24 17:12:34,117 [bed_level.py:process_update()] - screw1 CW 00:00
2024-11-24 17:12:34,117 [bed_level.py:process_update()] - X: 20.0 Y: 0.0 Adjust: 00:00 Pos: fl
2024-11-24 17:12:34,117 [bed_level.py:process_update()] - screw1 is the Reference
2024-11-24 17:12:34,126 [bed_level.py:process_update()] - screw2 CW 00:04
2024-11-24 17:12:34,127 [bed_level.py:process_update()] - X: 215.0 Y: 0.0 Adjust: 00:04 Pos: fr
2024-11-24 17:12:34,135 [bed_level.py:process_update()] - screw3 CW 00:16
2024-11-24 17:12:34,136 [bed_level.py:process_update()] - X: 215.0 Y: 190.0 Adjust: 00:16 Pos: br
2024-11-24 17:12:34,144 [bed_level.py:process_update()] - screw4 CW 00:07
2024-11-24 17:12:34,144 [bed_level.py:process_update()] - X: 20.0 Y: 190.0 Adjust: 00:07 Pos: bl
2024-11-24 17:26:43,359 [screen.py:show_popup_message()] - error: Move out of range: 0.000 0.000 210.000 [0.000]
2024-11-24 17:37:50,963 [screen.py:show_popup_message()] - error: Error evaluating 'gcode_macro PID_Calibrate_dropdown:gcode': jinja2.exceptions.UndefinedError: 'dict object' has no attribute 'TARGET'
2024-11-24 17:57:27,319 [screen.py:show_screensaver()] - Showing Screensaver
2024-11-24 17:57:27,320 [screen.py:show_screensaver()] - Hiding dialog
2024-11-24 18:03:32,980 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-11-24 18:03:33,032 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=1024, height=768)
2024-11-24 18:11:01,450 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-11-24 18:11:01,478 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=1024, height=768)
2024-11-24 18:11:14,393 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 18:11:14,393 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 18:11:14,395 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 18:11:14,396 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 18:11:14,397 [screen.py:close_screensaver()] - Closing Screensaver
2024-11-24 18:11:14,414 [screen.py:wake_screen()] - Screen wake up
2024-11-24 18:11:14,424 [screen.py:close_screensaver()] - Restoring Dialog <Gtk.Dialog object at 0xffffb4032440 (GtkDialog at 0x1bb51c50)>
2024-11-24 18:11:14,430 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-11-24 18:11:14,430 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 18:11:14,500 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 18:11:17,328 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 18:11:17,349 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 18:11:17,371 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 18:11:17,372 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 18:11:17,373 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 18:11:17,531 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 18:11:17,580 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '1', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'control': 'pid', 'pid_kp': '28.737', 'pid_ki': '1.935', 'pid_kd': '106.684', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '64.882', 'pid_ki': '1.481', 'pid_kd': '710.453'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan_generic exhaust_fan': {'pin': 'PC12', 'max_power': '1', 'shutdown_speed': '0', 'kick_start_time': '0.1', 'off_below': '0.10'}, 'fan_generic chamber_fan': {'pin': 'PE4', 'max_power': '1', 'shutdown_speed': '0', 'kick_start_time': '0.1', 'off_below': '0.10'}, 'temperature_sensor chamber': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': '4700', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '60', 'gcode_id': 'C: C'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'true', 'cycle_time': '0.01', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '0.7', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_mesh': {'speed': '200', 'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,50', 'mesh_max': '210, 220', 'probe_count': '15,15', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,0', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 190', 'screw3_name': '"Back Right"', 'screw4': '20, 190', 'screw4_name': '"Back Left"', 'speed': '150', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.170000, -0.170000, -0.190000, -0.210000, -0.220000, -0.240000, -0.240000, -0.260000, -0.270000, -0.280000, -0.300000, -0.310000, -0.340000, -0.330000, -0.300000\n-0.180000, -0.180000, -0.210000, -0.230000, -0.240000, -0.270000, -0.240000, -0.280000, -0.290000, -0.300000, -0.300000, -0.330000, -0.370000, -0.350000, -0.330000\n-0.140000, -0.190000, -0.200000, -0.220000, -0.240000, -0.260000, -0.270000, -0.280000, -0.290000, -0.290000, -0.310000, -0.320000, -0.350000, -0.370000, -0.370000\n-0.200000, -0.200000, -0.220000, -0.240000, -0.260000, -0.290000, -0.280000, -0.300000, -0.290000, -0.300000, -0.310000, -0.320000, -0.370000, -0.370000, -0.360000\n-0.200000, -0.200000, -0.220000, -0.260000, -0.270000, -0.280000, -0.290000, -0.290000, -0.290000, -0.280000, -0.300000, -0.310000, -0.350000, -0.370000, -0.370000\n-0.220000, -0.220000, -0.250000, -0.270000, -0.290000, -0.300000, -0.290000, -0.290000, -0.290000, -0.310000, -0.360000, -0.360000, -0.360000, -0.360000, -0.340000\n-0.220000, -0.230000, -0.250000, -0.280000, -0.300000, -0.300000, -0.300000, -0.310000, -0.300000, -0.310000, -0.330000, -0.340000, -0.350000, -0.370000, -0.370000\n-0.260000, -0.260000, -0.270000, -0.300000, -0.300000, -0.320000, -0.300000, -0.310000, -0.320000, -0.330000, -0.340000, -0.350000, -0.370000, -0.370000, -0.360000\n-0.270000, -0.270000, -0.270000, -0.290000, -0.300000, -0.310000, -0.310000, -0.320000, -0.320000, -0.320000, -0.330000, -0.340000, -0.360000, -0.370000, -0.380000\n-0.250000, -0.240000, -0.280000, -0.300000, -0.300000, -0.310000, -0.300000, -0.310000, -0.310000, -0.320000, -0.320000, -0.340000, -0.360000, -0.360000, -0.360000\n-0.240000, -0.260000, -0.260000, -0.280000, -0.300000, -0.300000, -0.300000, -0.300000, -0.320000, -0.320000, -0.320000, -0.330000, -0.350000, -0.360000, -0.380000\n-0.230000, -0.240000, -0.270000, -0.300000, -0.300000, -0.310000, -0.300000, -0.300000, -0.300000, -0.310000, -0.320000, -0.320000, -0.340000, -0.360000, -0.340000\n-0.220000, -0.220000, -0.230000, -0.280000, -0.290000, -0.300000, -0.290000, -0.300000, -0.300000, -0.300000, -0.300000, -0.300000, -0.320000, -0.330000, -0.370000\n-0.240000, -0.250000, -0.250000, -0.280000, -0.270000, -0.280000, -0.270000, -0.290000, -0.290000, -0.290000, -0.320000, -0.320000, -0.320000, -0.320000, -0.310000\n-0.200000, -0.220000, -0.230000, -0.260000, -0.260000, -0.270000, -0.240000, -0.260000, -0.260000, -0.260000, -0.270000, -0.280000, -0.300000, -0.300000, -0.310000', 'x_count': '15', 'y_count': '15', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '20.0', 'max_x': '209.98000000000002', 'min_y': '50.0', 'max_y': '219.95999999999992'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 28.737, 'pid_ki': 1.935, 'pid_kd': 106.684, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 64.882, 'pid_ki': 1.481, 'pid_kd': 710.453, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'fan_generic exhaust_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC12'}, 'fan_generic chamber_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE4'}, 'temperature_sensor chamber': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 60.0, 'gcode_id': 'C: C'}, 'output_pin led': {'pwm': True, 'pin': 'PB5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 0.7, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [15, 15], 'mesh_min': [20.0, 50.0], 'mesh_max': [210.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'horizontal_move_z': 0.7, 'speed': 200.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.17, -0.17, -0.19, -0.21, -0.22, -0.24, -0.24, -0.26, -0.27, -0.28, -0.3, -0.31, -0.34, -0.33, -0.3], [-0.18, -0.18, -0.21, -0.23, -0.24, -0.27, -0.24, -0.28, -0.29, -0.3, -0.3, -0.33, -0.37, -0.35, -0.33], [-0.14, -0.19, -0.2, -0.22, -0.24, -0.26, -0.27, -0.28, -0.29, -0.29, -0.31, -0.32, -0.35, -0.37, -0.37], [-0.2, -0.2, -0.22, -0.24, -0.26, -0.29, -0.28, -0.3, -0.29, -0.3, -0.31, -0.32, -0.37, -0.37, -0.36], [-0.2, -0.2, -0.22, -0.26, -0.27, -0.28, -0.29, -0.29, -0.29, -0.28, -0.3, -0.31, -0.35, -0.37, -0.37], [-0.22, -0.22, -0.25, -0.27, -0.29, -0.3, -0.29, -0.29, -0.29, -0.31, -0.36, -0.36, -0.36, -0.36, -0.34], [-0.22, -0.23, -0.25, -0.28, -0.3, -0.3, -0.3, -0.31, -0.3, -0.31, -0.33, -0.34, -0.35, -0.37, -0.37], [-0.26, -0.26, -0.27, -0.3, -0.3, -0.32, -0.3, -0.31, -0.32, -0.33, -0.34, -0.35, -0.37, -0.37, -0.36], [-0.27, -0.27, -0.27, -0.29, -0.3, -0.31, -0.31, -0.32, -0.32, -0.32, -0.33, -0.34, -0.36, -0.37, -0.38], [-0.25, -0.24, -0.28, -0.3, -0.3, -0.31, -0.3, -0.31, -0.31, -0.32, -0.32, -0.34, -0.36, -0.36, -0.36], [-0.24, -0.26, -0.26, -0.28, -0.3, -0.3, -0.3, -0.3, -0.32, -0.32, -0.32, -0.33, -0.35, -0.36, -0.38], [-0.23, -0.24, -0.27, -0.3, -0.3, -0.31, -0.3, -0.3, -0.3, -0.31, -0.32, -0.32, -0.34, -0.36, -0.34], [-0.22, -0.22, -0.23, -0.28, -0.29, -0.3, -0.29, -0.3, -0.3, -0.3, -0.3, -0.3, -0.32, -0.33, -0.37], [-0.24, -0.25, -0.25, -0.28, -0.27, -0.28, -0.27, -0.29, -0.29, -0.29, -0.32, -0.32, -0.32, -0.32, -0.31], [-0.2, -0.22, -0.23, -0.26, -0.26, -0.27, -0.24, -0.26, -0.26, -0.26, -0.27, -0.28, -0.3, -0.3, -0.31]], 'min_x': 20.0, 'max_x': 209.98000000000002, 'min_y': 50.0, 'max_y': 219.95999999999992, 'x_count': 15, 'y_count': 15, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 220.0], 'screw2_name': 'screw at 20.000,220.000', 'screw3': [220.0, 220.0], 'screw3_name': 'screw at 220.000,220.000', 'screw4': [220.0, 20.0], 'screw4_name': 'screw at 220.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 0.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 190.0], 'screw3_name': '"Back Right"', 'screw4': [20.0, 190.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 150.0}, 'printer': {'max_velocity': 500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 18:11:17,587 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 18:11:17,589 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 18:11:17,590 [printer.py:reinit()] - # Extruders: 1
2024-11-24 18:11:17,591 [printer.py:reinit()] - # Temperature devices: 4
2024-11-24 18:11:17,592 [printer.py:reinit()] - # Fans: 4
2024-11-24 18:11:17,592 [printer.py:reinit()] - # Output pins: 1
2024-11-24 18:11:17,592 [printer.py:reinit()] - # Leds: 0
2024-11-24 18:11:17,592 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 18:11:17,619 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 18:11:17,622 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&temperature_sensor chamber&fan&fan_generic exhaust_fan&fan_generic chamber_fan&heater_fan hotend_fan&output_pin LED
2024-11-24 18:11:17,935 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 18:11:17,936 [screen.py:init_klipper()] - Printer initialized
2024-11-24 18:11:17,937 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 18:11:17,937 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 18:11:19,839 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 18:11:19,840 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 18:11:19,843 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 18:11:19,847 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 18:11:19,976 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 18:11:19,994 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 18:11:20,005 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 18:11:20,015 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 18:11:20,025 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 18:11:20,034 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-11-24 18:11:20,107 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 18:11:20,109 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 18:11:20,163 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'temperature_sensor chamber', 'extruder']
2024-11-24 18:11:20,166 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 18:11:20,186 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 18:16:12,981 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffb4032440 (GtkDialog at 0x1bb51c50)>
2024-11-24 18:16:13,025 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=1024, height=768)
2024-11-24 18:16:20,206 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 18:16:20,207 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 18:16:20,209 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 18:16:20,209 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 18:16:20,217 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-11-24 18:16:20,218 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 18:16:20,288 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 18:16:23,321 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 18:16:23,340 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 18:16:23,358 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 18:16:23,359 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 1, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 18:16:23,359 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 18:16:23,381 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 18:16:23,422 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_endstop': '0.0', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '1', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03', 'control': 'pid', 'pid_kp': '17.605', 'pid_ki': '0.869', 'pid_kd': '89.127'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '64.882', 'pid_ki': '1.481', 'pid_kd': '710.453'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan_generic exhaust_fan': {'pin': 'PC12', 'max_power': '1', 'shutdown_speed': '0', 'kick_start_time': '0.1', 'off_below': '0.10'}, 'fan_generic chamber_fan': {'pin': 'PE4', 'max_power': '1', 'shutdown_speed': '0', 'kick_start_time': '0.1', 'off_below': '0.10'}, 'temperature_sensor chamber': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': '4700', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '60', 'gcode_id': 'C: C'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'true', 'cycle_time': '0.01', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '0.7', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_mesh': {'speed': '200', 'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,50', 'mesh_max': '210, 220', 'probe_count': '15,15', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,0', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 190', 'screw3_name': '"Back Right"', 'screw4': '20, 190', 'screw4_name': '"Back Left"', 'speed': '150', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.170000, -0.170000, -0.190000, -0.210000, -0.220000, -0.240000, -0.240000, -0.260000, -0.270000, -0.280000, -0.300000, -0.310000, -0.340000, -0.330000, -0.300000\n-0.180000, -0.180000, -0.210000, -0.230000, -0.240000, -0.270000, -0.240000, -0.280000, -0.290000, -0.300000, -0.300000, -0.330000, -0.370000, -0.350000, -0.330000\n-0.140000, -0.190000, -0.200000, -0.220000, -0.240000, -0.260000, -0.270000, -0.280000, -0.290000, -0.290000, -0.310000, -0.320000, -0.350000, -0.370000, -0.370000\n-0.200000, -0.200000, -0.220000, -0.240000, -0.260000, -0.290000, -0.280000, -0.300000, -0.290000, -0.300000, -0.310000, -0.320000, -0.370000, -0.370000, -0.360000\n-0.200000, -0.200000, -0.220000, -0.260000, -0.270000, -0.280000, -0.290000, -0.290000, -0.290000, -0.280000, -0.300000, -0.310000, -0.350000, -0.370000, -0.370000\n-0.220000, -0.220000, -0.250000, -0.270000, -0.290000, -0.300000, -0.290000, -0.290000, -0.290000, -0.310000, -0.360000, -0.360000, -0.360000, -0.360000, -0.340000\n-0.220000, -0.230000, -0.250000, -0.280000, -0.300000, -0.300000, -0.300000, -0.310000, -0.300000, -0.310000, -0.330000, -0.340000, -0.350000, -0.370000, -0.370000\n-0.260000, -0.260000, -0.270000, -0.300000, -0.300000, -0.320000, -0.300000, -0.310000, -0.320000, -0.330000, -0.340000, -0.350000, -0.370000, -0.370000, -0.360000\n-0.270000, -0.270000, -0.270000, -0.290000, -0.300000, -0.310000, -0.310000, -0.320000, -0.320000, -0.320000, -0.330000, -0.340000, -0.360000, -0.370000, -0.380000\n-0.250000, -0.240000, -0.280000, -0.300000, -0.300000, -0.310000, -0.300000, -0.310000, -0.310000, -0.320000, -0.320000, -0.340000, -0.360000, -0.360000, -0.360000\n-0.240000, -0.260000, -0.260000, -0.280000, -0.300000, -0.300000, -0.300000, -0.300000, -0.320000, -0.320000, -0.320000, -0.330000, -0.350000, -0.360000, -0.380000\n-0.230000, -0.240000, -0.270000, -0.300000, -0.300000, -0.310000, -0.300000, -0.300000, -0.300000, -0.310000, -0.320000, -0.320000, -0.340000, -0.360000, -0.340000\n-0.220000, -0.220000, -0.230000, -0.280000, -0.290000, -0.300000, -0.290000, -0.300000, -0.300000, -0.300000, -0.300000, -0.300000, -0.320000, -0.330000, -0.370000\n-0.240000, -0.250000, -0.250000, -0.280000, -0.270000, -0.280000, -0.270000, -0.290000, -0.290000, -0.290000, -0.320000, -0.320000, -0.320000, -0.320000, -0.310000\n-0.200000, -0.220000, -0.230000, -0.260000, -0.260000, -0.270000, -0.240000, -0.260000, -0.260000, -0.260000, -0.270000, -0.280000, -0.300000, -0.300000, -0.310000', 'x_count': '15', 'y_count': '15', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '20.0', 'max_x': '209.98000000000002', 'min_y': '50.0', 'max_y': '219.95999999999992'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.0, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.605, 'pid_ki': 0.869, 'pid_kd': 89.127, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 64.882, 'pid_ki': 1.481, 'pid_kd': 710.453, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'fan_generic exhaust_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC12'}, 'fan_generic chamber_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE4'}, 'temperature_sensor chamber': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 60.0, 'gcode_id': 'C: C'}, 'output_pin led': {'pwm': True, 'pin': 'PB5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 0.7, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [15, 15], 'mesh_min': [20.0, 50.0], 'mesh_max': [210.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'horizontal_move_z': 0.7, 'speed': 200.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.17, -0.17, -0.19, -0.21, -0.22, -0.24, -0.24, -0.26, -0.27, -0.28, -0.3, -0.31, -0.34, -0.33, -0.3], [-0.18, -0.18, -0.21, -0.23, -0.24, -0.27, -0.24, -0.28, -0.29, -0.3, -0.3, -0.33, -0.37, -0.35, -0.33], [-0.14, -0.19, -0.2, -0.22, -0.24, -0.26, -0.27, -0.28, -0.29, -0.29, -0.31, -0.32, -0.35, -0.37, -0.37], [-0.2, -0.2, -0.22, -0.24, -0.26, -0.29, -0.28, -0.3, -0.29, -0.3, -0.31, -0.32, -0.37, -0.37, -0.36], [-0.2, -0.2, -0.22, -0.26, -0.27, -0.28, -0.29, -0.29, -0.29, -0.28, -0.3, -0.31, -0.35, -0.37, -0.37], [-0.22, -0.22, -0.25, -0.27, -0.29, -0.3, -0.29, -0.29, -0.29, -0.31, -0.36, -0.36, -0.36, -0.36, -0.34], [-0.22, -0.23, -0.25, -0.28, -0.3, -0.3, -0.3, -0.31, -0.3, -0.31, -0.33, -0.34, -0.35, -0.37, -0.37], [-0.26, -0.26, -0.27, -0.3, -0.3, -0.32, -0.3, -0.31, -0.32, -0.33, -0.34, -0.35, -0.37, -0.37, -0.36], [-0.27, -0.27, -0.27, -0.29, -0.3, -0.31, -0.31, -0.32, -0.32, -0.32, -0.33, -0.34, -0.36, -0.37, -0.38], [-0.25, -0.24, -0.28, -0.3, -0.3, -0.31, -0.3, -0.31, -0.31, -0.32, -0.32, -0.34, -0.36, -0.36, -0.36], [-0.24, -0.26, -0.26, -0.28, -0.3, -0.3, -0.3, -0.3, -0.32, -0.32, -0.32, -0.33, -0.35, -0.36, -0.38], [-0.23, -0.24, -0.27, -0.3, -0.3, -0.31, -0.3, -0.3, -0.3, -0.31, -0.32, -0.32, -0.34, -0.36, -0.34], [-0.22, -0.22, -0.23, -0.28, -0.29, -0.3, -0.29, -0.3, -0.3, -0.3, -0.3, -0.3, -0.32, -0.33, -0.37], [-0.24, -0.25, -0.25, -0.28, -0.27, -0.28, -0.27, -0.29, -0.29, -0.29, -0.32, -0.32, -0.32, -0.32, -0.31], [-0.2, -0.22, -0.23, -0.26, -0.26, -0.27, -0.24, -0.26, -0.26, -0.26, -0.27, -0.28, -0.3, -0.3, -0.31]], 'min_x': 20.0, 'max_x': 209.98000000000002, 'min_y': 50.0, 'max_y': 219.95999999999992, 'x_count': 15, 'y_count': 15, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 220.0], 'screw2_name': 'screw at 20.000,220.000', 'screw3': [220.0, 220.0], 'screw3_name': 'screw at 220.000,220.000', 'screw4': [220.0, 20.0], 'screw4_name': 'screw at 220.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 0.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 190.0], 'screw3_name': '"Back Right"', 'screw4': [20.0, 190.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 150.0}, 'printer': {'max_velocity': 500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 18:16:23,429 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 18:16:23,431 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 18:16:23,432 [printer.py:reinit()] - # Extruders: 1
2024-11-24 18:16:23,433 [printer.py:reinit()] - # Temperature devices: 4
2024-11-24 18:16:23,433 [printer.py:reinit()] - # Fans: 4
2024-11-24 18:16:23,434 [printer.py:reinit()] - # Output pins: 1
2024-11-24 18:16:23,434 [printer.py:reinit()] - # Leds: 0
2024-11-24 18:16:23,434 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 18:16:23,464 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 18:16:23,467 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&temperature_sensor chamber&fan&fan_generic exhaust_fan&fan_generic chamber_fan&heater_fan hotend_fan&output_pin LED
2024-11-24 18:16:23,784 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 18:16:23,784 [screen.py:init_klipper()] - Printer initialized
2024-11-24 18:16:23,785 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 18:16:23,786 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 18:16:25,467 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 18:16:25,468 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 18:16:25,471 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 18:16:25,479 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 18:16:25,627 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 18:16:25,646 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 18:16:25,657 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 18:16:25,669 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 18:16:25,680 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 18:16:25,691 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-11-24 18:16:25,776 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 18:16:25,779 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 18:16:25,837 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'temperature_sensor chamber', 'extruder']
2024-11-24 18:16:25,842 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 18:16:25,868 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 18:20:17,674 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 18:20:17,682 [zcalibrate.py:__init__()] - Offset X:0.0 Y:0.0 Z:0.0
2024-11-24 18:20:17,734 [zcalibrate.py:set_functions()] - Available functions for calibration: ['endstop', 'probe']
2024-11-24 18:20:17,795 [screen.py:attach_panel()] - Current panel hierarchy: main_menu > zcalibrate
2024-11-24 18:21:12,427 [KlippyGtk.py:remove_dialog()] - Cannot remove dialog <Gtk.Dialog object at 0xffffad682c00 (GtkDialog at 0x1bc673d0)>
2024-11-24 18:21:12,456 [KlippyGtk.py:Dialog()] - Showing dialog KlipperScreen (width=1024, height=768)
2024-11-24 18:21:23,225 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 18:21:23,226 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 18:21:23,228 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 18:21:23,229 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 18:21:23,239 [KlippyGtk.py:remove_dialog()] - Removing Dialog
2024-11-24 18:21:23,240 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 18:21:23,325 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 18:21:26,327 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 18:21:26,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 18:21:26,365 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 18:21:26,366 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 18:21:26,366 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 18:21:26,389 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 18:21:26,433 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3', 'position_endstop': '0.250'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '1', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03', 'control': 'pid', 'pid_kp': '17.605', 'pid_ki': '0.869', 'pid_kd': '89.127'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '64.882', 'pid_ki': '1.481', 'pid_kd': '710.453'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan_generic exhaust_fan': {'pin': 'PC12', 'max_power': '1', 'shutdown_speed': '0', 'kick_start_time': '0.1', 'off_below': '0.10'}, 'fan_generic chamber_fan': {'pin': 'PE4', 'max_power': '1', 'shutdown_speed': '0', 'kick_start_time': '0.1', 'off_below': '0.10'}, 'temperature_sensor chamber': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': '4700', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '60', 'gcode_id': 'C: C'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'true', 'cycle_time': '0.01', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '0.7', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_mesh': {'speed': '200', 'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,50', 'mesh_max': '210, 220', 'probe_count': '15,15', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,0', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 190', 'screw3_name': '"Back Right"', 'screw4': '20, 190', 'screw4_name': '"Back Left"', 'speed': '150', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.170000, -0.170000, -0.190000, -0.210000, -0.220000, -0.240000, -0.240000, -0.260000, -0.270000, -0.280000, -0.300000, -0.310000, -0.340000, -0.330000, -0.300000\n-0.180000, -0.180000, -0.210000, -0.230000, -0.240000, -0.270000, -0.240000, -0.280000, -0.290000, -0.300000, -0.300000, -0.330000, -0.370000, -0.350000, -0.330000\n-0.140000, -0.190000, -0.200000, -0.220000, -0.240000, -0.260000, -0.270000, -0.280000, -0.290000, -0.290000, -0.310000, -0.320000, -0.350000, -0.370000, -0.370000\n-0.200000, -0.200000, -0.220000, -0.240000, -0.260000, -0.290000, -0.280000, -0.300000, -0.290000, -0.300000, -0.310000, -0.320000, -0.370000, -0.370000, -0.360000\n-0.200000, -0.200000, -0.220000, -0.260000, -0.270000, -0.280000, -0.290000, -0.290000, -0.290000, -0.280000, -0.300000, -0.310000, -0.350000, -0.370000, -0.370000\n-0.220000, -0.220000, -0.250000, -0.270000, -0.290000, -0.300000, -0.290000, -0.290000, -0.290000, -0.310000, -0.360000, -0.360000, -0.360000, -0.360000, -0.340000\n-0.220000, -0.230000, -0.250000, -0.280000, -0.300000, -0.300000, -0.300000, -0.310000, -0.300000, -0.310000, -0.330000, -0.340000, -0.350000, -0.370000, -0.370000\n-0.260000, -0.260000, -0.270000, -0.300000, -0.300000, -0.320000, -0.300000, -0.310000, -0.320000, -0.330000, -0.340000, -0.350000, -0.370000, -0.370000, -0.360000\n-0.270000, -0.270000, -0.270000, -0.290000, -0.300000, -0.310000, -0.310000, -0.320000, -0.320000, -0.320000, -0.330000, -0.340000, -0.360000, -0.370000, -0.380000\n-0.250000, -0.240000, -0.280000, -0.300000, -0.300000, -0.310000, -0.300000, -0.310000, -0.310000, -0.320000, -0.320000, -0.340000, -0.360000, -0.360000, -0.360000\n-0.240000, -0.260000, -0.260000, -0.280000, -0.300000, -0.300000, -0.300000, -0.300000, -0.320000, -0.320000, -0.320000, -0.330000, -0.350000, -0.360000, -0.380000\n-0.230000, -0.240000, -0.270000, -0.300000, -0.300000, -0.310000, -0.300000, -0.300000, -0.300000, -0.310000, -0.320000, -0.320000, -0.340000, -0.360000, -0.340000\n-0.220000, -0.220000, -0.230000, -0.280000, -0.290000, -0.300000, -0.290000, -0.300000, -0.300000, -0.300000, -0.300000, -0.300000, -0.320000, -0.330000, -0.370000\n-0.240000, -0.250000, -0.250000, -0.280000, -0.270000, -0.280000, -0.270000, -0.290000, -0.290000, -0.290000, -0.320000, -0.320000, -0.320000, -0.320000, -0.310000\n-0.200000, -0.220000, -0.230000, -0.260000, -0.260000, -0.270000, -0.240000, -0.260000, -0.260000, -0.260000, -0.270000, -0.280000, -0.300000, -0.300000, -0.310000', 'x_count': '15', 'y_count': '15', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '20.0', 'max_x': '209.98000000000002', 'min_y': '50.0', 'max_y': '219.95999999999992'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.25, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.605, 'pid_ki': 0.869, 'pid_kd': 89.127, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 64.882, 'pid_ki': 1.481, 'pid_kd': 710.453, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'fan_generic exhaust_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC12'}, 'fan_generic chamber_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE4'}, 'temperature_sensor chamber': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 60.0, 'gcode_id': 'C: C'}, 'output_pin led': {'pwm': True, 'pin': 'PB5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 0.7, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [15, 15], 'mesh_min': [20.0, 50.0], 'mesh_max': [210.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'horizontal_move_z': 0.7, 'speed': 200.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.17, -0.17, -0.19, -0.21, -0.22, -0.24, -0.24, -0.26, -0.27, -0.28, -0.3, -0.31, -0.34, -0.33, -0.3], [-0.18, -0.18, -0.21, -0.23, -0.24, -0.27, -0.24, -0.28, -0.29, -0.3, -0.3, -0.33, -0.37, -0.35, -0.33], [-0.14, -0.19, -0.2, -0.22, -0.24, -0.26, -0.27, -0.28, -0.29, -0.29, -0.31, -0.32, -0.35, -0.37, -0.37], [-0.2, -0.2, -0.22, -0.24, -0.26, -0.29, -0.28, -0.3, -0.29, -0.3, -0.31, -0.32, -0.37, -0.37, -0.36], [-0.2, -0.2, -0.22, -0.26, -0.27, -0.28, -0.29, -0.29, -0.29, -0.28, -0.3, -0.31, -0.35, -0.37, -0.37], [-0.22, -0.22, -0.25, -0.27, -0.29, -0.3, -0.29, -0.29, -0.29, -0.31, -0.36, -0.36, -0.36, -0.36, -0.34], [-0.22, -0.23, -0.25, -0.28, -0.3, -0.3, -0.3, -0.31, -0.3, -0.31, -0.33, -0.34, -0.35, -0.37, -0.37], [-0.26, -0.26, -0.27, -0.3, -0.3, -0.32, -0.3, -0.31, -0.32, -0.33, -0.34, -0.35, -0.37, -0.37, -0.36], [-0.27, -0.27, -0.27, -0.29, -0.3, -0.31, -0.31, -0.32, -0.32, -0.32, -0.33, -0.34, -0.36, -0.37, -0.38], [-0.25, -0.24, -0.28, -0.3, -0.3, -0.31, -0.3, -0.31, -0.31, -0.32, -0.32, -0.34, -0.36, -0.36, -0.36], [-0.24, -0.26, -0.26, -0.28, -0.3, -0.3, -0.3, -0.3, -0.32, -0.32, -0.32, -0.33, -0.35, -0.36, -0.38], [-0.23, -0.24, -0.27, -0.3, -0.3, -0.31, -0.3, -0.3, -0.3, -0.31, -0.32, -0.32, -0.34, -0.36, -0.34], [-0.22, -0.22, -0.23, -0.28, -0.29, -0.3, -0.29, -0.3, -0.3, -0.3, -0.3, -0.3, -0.32, -0.33, -0.37], [-0.24, -0.25, -0.25, -0.28, -0.27, -0.28, -0.27, -0.29, -0.29, -0.29, -0.32, -0.32, -0.32, -0.32, -0.31], [-0.2, -0.22, -0.23, -0.26, -0.26, -0.27, -0.24, -0.26, -0.26, -0.26, -0.27, -0.28, -0.3, -0.3, -0.31]], 'min_x': 20.0, 'max_x': 209.98000000000002, 'min_y': 50.0, 'max_y': 219.95999999999992, 'x_count': 15, 'y_count': 15, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 220.0], 'screw2_name': 'screw at 20.000,220.000', 'screw3': [220.0, 220.0], 'screw3_name': 'screw at 220.000,220.000', 'screw4': [220.0, 20.0], 'screw4_name': 'screw at 220.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 0.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 190.0], 'screw3_name': '"Back Right"', 'screw4': [20.0, 190.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 150.0}, 'printer': {'max_velocity': 500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 18:21:26,439 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 18:21:26,442 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 18:21:26,442 [printer.py:reinit()] - # Extruders: 1
2024-11-24 18:21:26,443 [printer.py:reinit()] - # Temperature devices: 4
2024-11-24 18:21:26,444 [printer.py:reinit()] - # Fans: 4
2024-11-24 18:21:26,444 [printer.py:reinit()] - # Output pins: 1
2024-11-24 18:21:26,444 [printer.py:reinit()] - # Leds: 0
2024-11-24 18:21:26,445 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 18:21:26,475 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 18:21:26,478 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&temperature_sensor chamber&fan&fan_generic exhaust_fan&fan_generic chamber_fan&heater_fan hotend_fan&output_pin LED
2024-11-24 18:21:26,792 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 18:21:26,793 [screen.py:init_klipper()] - Printer initialized
2024-11-24 18:21:26,793 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 18:21:26,794 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 18:21:28,468 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 18:21:28,468 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 18:21:28,472 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 18:21:28,478 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 18:21:28,602 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 18:21:28,619 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 18:21:28,629 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 18:21:28,639 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 18:21:28,649 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 18:21:28,658 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-11-24 18:21:28,732 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 18:21:28,734 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 18:21:28,788 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'temperature_sensor chamber', 'extruder']
2024-11-24 18:21:28,791 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 18:21:28,810 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 18:39:37,098 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 18:39:37,099 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 18:39:37,100 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 18:39:37,101 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 18:39:37,107 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 18:39:37,190 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 18:39:40,321 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 18:39:40,339 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 18:39:40,359 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 18:39:40,360 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 18:39:40,361 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 18:39:40,387 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 18:39:40,437 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\nM106 S255\nSET_FAN_SPEED FAN=exhaust_fan SPEED=1\nSET_FAN_SPEED FAN=chamber_fan SPEED=1\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nM106 S0\nSET_FAN_SPEED FAN=exhaust_fan SPEED=0.8\nSET_FAN_SPEED FAN=chamber_fan SPEED=0.8\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3', 'position_endstop': '0.250'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '1', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': 'PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03', 'control': 'pid', 'pid_kp': '17.605', 'pid_ki': '0.869', 'pid_kd': '89.127'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '64.882', 'pid_ki': '1.481', 'pid_kd': '710.453'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan_generic exhaust_fan': {'pin': 'PC12', 'max_power': '1', 'shutdown_speed': '0', 'kick_start_time': '0.1', 'off_below': '0.10'}, 'fan_generic chamber_fan': {'pin': 'PE4', 'max_power': '1', 'shutdown_speed': '0', 'kick_start_time': '0.1', 'off_below': '0.10'}, 'temperature_sensor chamber': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': '4700', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '60', 'gcode_id': 'C: C'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'true', 'cycle_time': '0.01', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '0.7', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_mesh': {'speed': '200', 'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,50', 'mesh_max': '210, 220', 'probe_count': '15,15', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,0', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 190', 'screw3_name': '"Back Right"', 'screw4': '20, 190', 'screw4_name': '"Back Left"', 'speed': '150', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.170000, -0.170000, -0.190000, -0.210000, -0.220000, -0.240000, -0.240000, -0.260000, -0.270000, -0.280000, -0.300000, -0.310000, -0.340000, -0.330000, -0.300000\n-0.180000, -0.180000, -0.210000, -0.230000, -0.240000, -0.270000, -0.240000, -0.280000, -0.290000, -0.300000, -0.300000, -0.330000, -0.370000, -0.350000, -0.330000\n-0.140000, -0.190000, -0.200000, -0.220000, -0.240000, -0.260000, -0.270000, -0.280000, -0.290000, -0.290000, -0.310000, -0.320000, -0.350000, -0.370000, -0.370000\n-0.200000, -0.200000, -0.220000, -0.240000, -0.260000, -0.290000, -0.280000, -0.300000, -0.290000, -0.300000, -0.310000, -0.320000, -0.370000, -0.370000, -0.360000\n-0.200000, -0.200000, -0.220000, -0.260000, -0.270000, -0.280000, -0.290000, -0.290000, -0.290000, -0.280000, -0.300000, -0.310000, -0.350000, -0.370000, -0.370000\n-0.220000, -0.220000, -0.250000, -0.270000, -0.290000, -0.300000, -0.290000, -0.290000, -0.290000, -0.310000, -0.360000, -0.360000, -0.360000, -0.360000, -0.340000\n-0.220000, -0.230000, -0.250000, -0.280000, -0.300000, -0.300000, -0.300000, -0.310000, -0.300000, -0.310000, -0.330000, -0.340000, -0.350000, -0.370000, -0.370000\n-0.260000, -0.260000, -0.270000, -0.300000, -0.300000, -0.320000, -0.300000, -0.310000, -0.320000, -0.330000, -0.340000, -0.350000, -0.370000, -0.370000, -0.360000\n-0.270000, -0.270000, -0.270000, -0.290000, -0.300000, -0.310000, -0.310000, -0.320000, -0.320000, -0.320000, -0.330000, -0.340000, -0.360000, -0.370000, -0.380000\n-0.250000, -0.240000, -0.280000, -0.300000, -0.300000, -0.310000, -0.300000, -0.310000, -0.310000, -0.320000, -0.320000, -0.340000, -0.360000, -0.360000, -0.360000\n-0.240000, -0.260000, -0.260000, -0.280000, -0.300000, -0.300000, -0.300000, -0.300000, -0.320000, -0.320000, -0.320000, -0.330000, -0.350000, -0.360000, -0.380000\n-0.230000, -0.240000, -0.270000, -0.300000, -0.300000, -0.310000, -0.300000, -0.300000, -0.300000, -0.310000, -0.320000, -0.320000, -0.340000, -0.360000, -0.340000\n-0.220000, -0.220000, -0.230000, -0.280000, -0.290000, -0.300000, -0.290000, -0.300000, -0.300000, -0.300000, -0.300000, -0.300000, -0.320000, -0.330000, -0.370000\n-0.240000, -0.250000, -0.250000, -0.280000, -0.270000, -0.280000, -0.270000, -0.290000, -0.290000, -0.290000, -0.320000, -0.320000, -0.320000, -0.320000, -0.310000\n-0.200000, -0.220000, -0.230000, -0.260000, -0.260000, -0.270000, -0.240000, -0.260000, -0.260000, -0.260000, -0.270000, -0.280000, -0.300000, -0.300000, -0.310000', 'x_count': '15', 'y_count': '15', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '20.0', 'max_x': '209.98000000000002', 'min_y': '50.0', 'max_y': '219.95999999999992'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\nM106 S255\nSET_FAN_SPEED FAN=exhaust_fan SPEED=1\nSET_FAN_SPEED FAN=chamber_fan SPEED=1\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nM106 S0\nSET_FAN_SPEED FAN=exhaust_fan SPEED=0.8\nSET_FAN_SPEED FAN=chamber_fan SPEED=0.8\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.25, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.605, 'pid_ki': 0.869, 'pid_kd': 89.127, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': 'PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 64.882, 'pid_ki': 1.481, 'pid_kd': 710.453, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'fan_generic exhaust_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC12'}, 'fan_generic chamber_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE4'}, 'temperature_sensor chamber': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 60.0, 'gcode_id': 'C: C'}, 'output_pin led': {'pwm': True, 'pin': 'PB5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 0.7, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [15, 15], 'mesh_min': [20.0, 50.0], 'mesh_max': [210.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'horizontal_move_z': 0.7, 'speed': 200.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.17, -0.17, -0.19, -0.21, -0.22, -0.24, -0.24, -0.26, -0.27, -0.28, -0.3, -0.31, -0.34, -0.33, -0.3], [-0.18, -0.18, -0.21, -0.23, -0.24, -0.27, -0.24, -0.28, -0.29, -0.3, -0.3, -0.33, -0.37, -0.35, -0.33], [-0.14, -0.19, -0.2, -0.22, -0.24, -0.26, -0.27, -0.28, -0.29, -0.29, -0.31, -0.32, -0.35, -0.37, -0.37], [-0.2, -0.2, -0.22, -0.24, -0.26, -0.29, -0.28, -0.3, -0.29, -0.3, -0.31, -0.32, -0.37, -0.37, -0.36], [-0.2, -0.2, -0.22, -0.26, -0.27, -0.28, -0.29, -0.29, -0.29, -0.28, -0.3, -0.31, -0.35, -0.37, -0.37], [-0.22, -0.22, -0.25, -0.27, -0.29, -0.3, -0.29, -0.29, -0.29, -0.31, -0.36, -0.36, -0.36, -0.36, -0.34], [-0.22, -0.23, -0.25, -0.28, -0.3, -0.3, -0.3, -0.31, -0.3, -0.31, -0.33, -0.34, -0.35, -0.37, -0.37], [-0.26, -0.26, -0.27, -0.3, -0.3, -0.32, -0.3, -0.31, -0.32, -0.33, -0.34, -0.35, -0.37, -0.37, -0.36], [-0.27, -0.27, -0.27, -0.29, -0.3, -0.31, -0.31, -0.32, -0.32, -0.32, -0.33, -0.34, -0.36, -0.37, -0.38], [-0.25, -0.24, -0.28, -0.3, -0.3, -0.31, -0.3, -0.31, -0.31, -0.32, -0.32, -0.34, -0.36, -0.36, -0.36], [-0.24, -0.26, -0.26, -0.28, -0.3, -0.3, -0.3, -0.3, -0.32, -0.32, -0.32, -0.33, -0.35, -0.36, -0.38], [-0.23, -0.24, -0.27, -0.3, -0.3, -0.31, -0.3, -0.3, -0.3, -0.31, -0.32, -0.32, -0.34, -0.36, -0.34], [-0.22, -0.22, -0.23, -0.28, -0.29, -0.3, -0.29, -0.3, -0.3, -0.3, -0.3, -0.3, -0.32, -0.33, -0.37], [-0.24, -0.25, -0.25, -0.28, -0.27, -0.28, -0.27, -0.29, -0.29, -0.29, -0.32, -0.32, -0.32, -0.32, -0.31], [-0.2, -0.22, -0.23, -0.26, -0.26, -0.27, -0.24, -0.26, -0.26, -0.26, -0.27, -0.28, -0.3, -0.3, -0.31]], 'min_x': 20.0, 'max_x': 209.98000000000002, 'min_y': 50.0, 'max_y': 219.95999999999992, 'x_count': 15, 'y_count': 15, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 220.0], 'screw2_name': 'screw at 20.000,220.000', 'screw3': [220.0, 220.0], 'screw3_name': 'screw at 220.000,220.000', 'screw4': [220.0, 20.0], 'screw4_name': 'screw at 220.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 0.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 190.0], 'screw3_name': '"Back Right"', 'screw4': [20.0, 190.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 150.0}, 'printer': {'max_velocity': 500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 18:39:40,445 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 18:39:40,449 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 18:39:40,449 [printer.py:reinit()] - # Extruders: 1
2024-11-24 18:39:40,450 [printer.py:reinit()] - # Temperature devices: 4
2024-11-24 18:39:40,450 [printer.py:reinit()] - # Fans: 4
2024-11-24 18:39:40,450 [printer.py:reinit()] - # Output pins: 1
2024-11-24 18:39:40,451 [printer.py:reinit()] - # Leds: 0
2024-11-24 18:39:40,451 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 18:39:40,484 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 18:39:40,488 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&temperature_sensor chamber&fan&fan_generic exhaust_fan&fan_generic chamber_fan&heater_fan hotend_fan&output_pin LED
2024-11-24 18:39:40,793 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 18:39:40,793 [screen.py:init_klipper()] - Printer initialized
2024-11-24 18:39:40,794 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 18:39:40,794 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 18:39:42,441 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 18:39:42,442 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 18:39:42,445 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 18:39:42,450 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 18:39:42,574 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 18:39:42,590 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 18:39:42,600 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 18:39:42,611 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 18:39:42,621 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 18:39:42,630 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-11-24 18:39:42,703 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 18:39:42,707 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 18:39:42,767 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'temperature_sensor chamber', 'extruder']
2024-11-24 18:39:42,773 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 18:39:42,799 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 18:43:38,874 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 18:43:38,875 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 18:43:38,876 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 18:43:38,876 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 18:43:38,882 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 18:43:38,975 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 18:43:42,320 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 18:43:42,339 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 18:43:42,357 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 18:43:42,358 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 18:43:42,358 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 18:43:42,382 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 18:43:42,424 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\nM106 S255\nSET_FAN_SPEED FAN=exhaust_fan SPEED=1\nSET_FAN_SPEED FAN=chamber_fan SPEED=1\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nM106 S0\nSET_FAN_SPEED FAN=exhaust_fan SPEED=0.8\nSET_FAN_SPEED FAN=chamber_fan SPEED=0.8\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3', 'position_endstop': '0.250'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '1', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': '!PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03', 'control': 'pid', 'pid_kp': '17.605', 'pid_ki': '0.869', 'pid_kd': '89.127'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '64.882', 'pid_ki': '1.481', 'pid_kd': '710.453'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan_generic exhaust_fan': {'pin': 'PC12', 'max_power': '1', 'shutdown_speed': '0', 'kick_start_time': '0.1', 'off_below': '0.10'}, 'fan_generic chamber_fan': {'pin': 'PE4', 'max_power': '1', 'shutdown_speed': '0', 'kick_start_time': '0.1', 'off_below': '0.10'}, 'temperature_sensor chamber': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': '4700', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '60', 'gcode_id': 'C: C'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'true', 'cycle_time': '0.01', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '0.7', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_mesh': {'speed': '200', 'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,50', 'mesh_max': '210, 220', 'probe_count': '15,15', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,0', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 190', 'screw3_name': '"Back Right"', 'screw4': '20, 190', 'screw4_name': '"Back Left"', 'speed': '150', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.170000, -0.170000, -0.190000, -0.210000, -0.220000, -0.240000, -0.240000, -0.260000, -0.270000, -0.280000, -0.300000, -0.310000, -0.340000, -0.330000, -0.300000\n-0.180000, -0.180000, -0.210000, -0.230000, -0.240000, -0.270000, -0.240000, -0.280000, -0.290000, -0.300000, -0.300000, -0.330000, -0.370000, -0.350000, -0.330000\n-0.140000, -0.190000, -0.200000, -0.220000, -0.240000, -0.260000, -0.270000, -0.280000, -0.290000, -0.290000, -0.310000, -0.320000, -0.350000, -0.370000, -0.370000\n-0.200000, -0.200000, -0.220000, -0.240000, -0.260000, -0.290000, -0.280000, -0.300000, -0.290000, -0.300000, -0.310000, -0.320000, -0.370000, -0.370000, -0.360000\n-0.200000, -0.200000, -0.220000, -0.260000, -0.270000, -0.280000, -0.290000, -0.290000, -0.290000, -0.280000, -0.300000, -0.310000, -0.350000, -0.370000, -0.370000\n-0.220000, -0.220000, -0.250000, -0.270000, -0.290000, -0.300000, -0.290000, -0.290000, -0.290000, -0.310000, -0.360000, -0.360000, -0.360000, -0.360000, -0.340000\n-0.220000, -0.230000, -0.250000, -0.280000, -0.300000, -0.300000, -0.300000, -0.310000, -0.300000, -0.310000, -0.330000, -0.340000, -0.350000, -0.370000, -0.370000\n-0.260000, -0.260000, -0.270000, -0.300000, -0.300000, -0.320000, -0.300000, -0.310000, -0.320000, -0.330000, -0.340000, -0.350000, -0.370000, -0.370000, -0.360000\n-0.270000, -0.270000, -0.270000, -0.290000, -0.300000, -0.310000, -0.310000, -0.320000, -0.320000, -0.320000, -0.330000, -0.340000, -0.360000, -0.370000, -0.380000\n-0.250000, -0.240000, -0.280000, -0.300000, -0.300000, -0.310000, -0.300000, -0.310000, -0.310000, -0.320000, -0.320000, -0.340000, -0.360000, -0.360000, -0.360000\n-0.240000, -0.260000, -0.260000, -0.280000, -0.300000, -0.300000, -0.300000, -0.300000, -0.320000, -0.320000, -0.320000, -0.330000, -0.350000, -0.360000, -0.380000\n-0.230000, -0.240000, -0.270000, -0.300000, -0.300000, -0.310000, -0.300000, -0.300000, -0.300000, -0.310000, -0.320000, -0.320000, -0.340000, -0.360000, -0.340000\n-0.220000, -0.220000, -0.230000, -0.280000, -0.290000, -0.300000, -0.290000, -0.300000, -0.300000, -0.300000, -0.300000, -0.300000, -0.320000, -0.330000, -0.370000\n-0.240000, -0.250000, -0.250000, -0.280000, -0.270000, -0.280000, -0.270000, -0.290000, -0.290000, -0.290000, -0.320000, -0.320000, -0.320000, -0.320000, -0.310000\n-0.200000, -0.220000, -0.230000, -0.260000, -0.260000, -0.270000, -0.240000, -0.260000, -0.260000, -0.260000, -0.270000, -0.280000, -0.300000, -0.300000, -0.310000', 'x_count': '15', 'y_count': '15', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '20.0', 'max_x': '209.98000000000002', 'min_y': '50.0', 'max_y': '219.95999999999992'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\nM106 S255\nSET_FAN_SPEED FAN=exhaust_fan SPEED=1\nSET_FAN_SPEED FAN=chamber_fan SPEED=1\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nM106 S0\nSET_FAN_SPEED FAN=exhaust_fan SPEED=0.8\nSET_FAN_SPEED FAN=chamber_fan SPEED=0.8\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.25, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.605, 'pid_ki': 0.869, 'pid_kd': 89.127, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': '!PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 64.882, 'pid_ki': 1.481, 'pid_kd': 710.453, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'fan_generic exhaust_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC12'}, 'fan_generic chamber_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE4'}, 'temperature_sensor chamber': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 60.0, 'gcode_id': 'C: C'}, 'output_pin led': {'pwm': True, 'pin': 'PB5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 0.7, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [15, 15], 'mesh_min': [20.0, 50.0], 'mesh_max': [210.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'horizontal_move_z': 0.7, 'speed': 200.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.17, -0.17, -0.19, -0.21, -0.22, -0.24, -0.24, -0.26, -0.27, -0.28, -0.3, -0.31, -0.34, -0.33, -0.3], [-0.18, -0.18, -0.21, -0.23, -0.24, -0.27, -0.24, -0.28, -0.29, -0.3, -0.3, -0.33, -0.37, -0.35, -0.33], [-0.14, -0.19, -0.2, -0.22, -0.24, -0.26, -0.27, -0.28, -0.29, -0.29, -0.31, -0.32, -0.35, -0.37, -0.37], [-0.2, -0.2, -0.22, -0.24, -0.26, -0.29, -0.28, -0.3, -0.29, -0.3, -0.31, -0.32, -0.37, -0.37, -0.36], [-0.2, -0.2, -0.22, -0.26, -0.27, -0.28, -0.29, -0.29, -0.29, -0.28, -0.3, -0.31, -0.35, -0.37, -0.37], [-0.22, -0.22, -0.25, -0.27, -0.29, -0.3, -0.29, -0.29, -0.29, -0.31, -0.36, -0.36, -0.36, -0.36, -0.34], [-0.22, -0.23, -0.25, -0.28, -0.3, -0.3, -0.3, -0.31, -0.3, -0.31, -0.33, -0.34, -0.35, -0.37, -0.37], [-0.26, -0.26, -0.27, -0.3, -0.3, -0.32, -0.3, -0.31, -0.32, -0.33, -0.34, -0.35, -0.37, -0.37, -0.36], [-0.27, -0.27, -0.27, -0.29, -0.3, -0.31, -0.31, -0.32, -0.32, -0.32, -0.33, -0.34, -0.36, -0.37, -0.38], [-0.25, -0.24, -0.28, -0.3, -0.3, -0.31, -0.3, -0.31, -0.31, -0.32, -0.32, -0.34, -0.36, -0.36, -0.36], [-0.24, -0.26, -0.26, -0.28, -0.3, -0.3, -0.3, -0.3, -0.32, -0.32, -0.32, -0.33, -0.35, -0.36, -0.38], [-0.23, -0.24, -0.27, -0.3, -0.3, -0.31, -0.3, -0.3, -0.3, -0.31, -0.32, -0.32, -0.34, -0.36, -0.34], [-0.22, -0.22, -0.23, -0.28, -0.29, -0.3, -0.29, -0.3, -0.3, -0.3, -0.3, -0.3, -0.32, -0.33, -0.37], [-0.24, -0.25, -0.25, -0.28, -0.27, -0.28, -0.27, -0.29, -0.29, -0.29, -0.32, -0.32, -0.32, -0.32, -0.31], [-0.2, -0.22, -0.23, -0.26, -0.26, -0.27, -0.24, -0.26, -0.26, -0.26, -0.27, -0.28, -0.3, -0.3, -0.31]], 'min_x': 20.0, 'max_x': 209.98000000000002, 'min_y': 50.0, 'max_y': 219.95999999999992, 'x_count': 15, 'y_count': 15, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 220.0], 'screw2_name': 'screw at 20.000,220.000', 'screw3': [220.0, 220.0], 'screw3_name': 'screw at 220.000,220.000', 'screw4': [220.0, 20.0], 'screw4_name': 'screw at 220.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 0.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 190.0], 'screw3_name': '"Back Right"', 'screw4': [20.0, 190.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 150.0}, 'printer': {'max_velocity': 500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 18:43:42,431 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 18:43:42,433 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 18:43:42,435 [printer.py:reinit()] - # Extruders: 1
2024-11-24 18:43:42,435 [printer.py:reinit()] - # Temperature devices: 4
2024-11-24 18:43:42,436 [printer.py:reinit()] - # Fans: 4
2024-11-24 18:43:42,436 [printer.py:reinit()] - # Output pins: 1
2024-11-24 18:43:42,436 [printer.py:reinit()] - # Leds: 0
2024-11-24 18:43:42,436 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 18:43:42,463 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 18:43:42,466 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&temperature_sensor chamber&fan&fan_generic exhaust_fan&fan_generic chamber_fan&heater_fan hotend_fan&output_pin LED
2024-11-24 18:43:42,772 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 18:43:42,773 [screen.py:init_klipper()] - Printer initialized
2024-11-24 18:43:42,773 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 18:43:42,774 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 18:43:44,183 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 18:43:44,184 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 18:43:44,187 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 18:43:44,191 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 18:43:44,335 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 18:43:44,358 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 18:43:44,372 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 18:43:44,392 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 18:43:44,405 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 18:43:44,416 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-11-24 18:43:44,510 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 18:43:44,512 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 18:43:44,572 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'temperature_sensor chamber', 'extruder']
2024-11-24 18:43:44,576 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 18:43:44,599 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 18:49:49,774 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-11-24 18:49:49,775 [printer.py:change_state()] - Adding callback for state: printing
2024-11-24 18:49:49,800 [screen.py:_load_panel()] - Loading panel: job_status
2024-11-24 18:49:50,099 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-11-24 18:49:50,110 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-11-24 18:49:50,131 [job_status.py:update_file_metadata()] - Update Metadata. File: TH008.gcode Size: 24950020
2024-11-24 18:49:50,147 [job_status.py:show_file_thumbnail()] - TH008.gcode
2024-11-24 18:55:44,508 [printer.py:change_state()] - Changing state from 'printing' to 'shutdown'
2024-11-24 18:55:44,508 [printer.py:change_state()] - Adding callback for state: shutdown
2024-11-24 18:55:44,570 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 18:55:44,574 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 18:55:44,665 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 18:55:45,663 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-11-24 18:55:45,663 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 18:55:45,665 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 18:55:45,666 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 18:55:45,669 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 18:55:45,747 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 18:55:49,320 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 18:55:49,342 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 18:55:49,360 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 18:55:49,361 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 18:55:49,361 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 18:55:49,385 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 18:55:49,427 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\nM106 S255\nSET_FAN_SPEED FAN=exhaust_fan SPEED=1\nSET_FAN_SPEED FAN=chamber_fan SPEED=1\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nM106 S0\nSET_FAN_SPEED FAN=exhaust_fan SPEED=0.8\nSET_FAN_SPEED FAN=chamber_fan SPEED=0.8\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3', 'position_endstop': '0.250'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '1', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': '!PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03', 'control': 'pid', 'pid_kp': '17.605', 'pid_ki': '0.869', 'pid_kd': '89.127'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '64.882', 'pid_ki': '1.481', 'pid_kd': '710.453'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan_generic exhaust_fan': {'pin': 'PC12', 'max_power': '1', 'shutdown_speed': '0', 'kick_start_time': '0.1', 'off_below': '0.10'}, 'fan_generic chamber_fan': {'pin': 'PE4', 'max_power': '1', 'shutdown_speed': '0', 'kick_start_time': '0.1', 'off_below': '0.10'}, 'temperature_sensor chamber': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': '4700', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '60', 'gcode_id': 'C: C'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'true', 'cycle_time': '0.01', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '0.7', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_mesh': {'speed': '200', 'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,50', 'mesh_max': '210, 220', 'probe_count': '15,15', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,0', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 190', 'screw3_name': '"Back Right"', 'screw4': '20, 190', 'screw4_name': '"Back Left"', 'speed': '150', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.170000, -0.170000, -0.190000, -0.210000, -0.220000, -0.240000, -0.240000, -0.260000, -0.270000, -0.280000, -0.300000, -0.310000, -0.340000, -0.330000, -0.300000\n-0.180000, -0.180000, -0.210000, -0.230000, -0.240000, -0.270000, -0.240000, -0.280000, -0.290000, -0.300000, -0.300000, -0.330000, -0.370000, -0.350000, -0.330000\n-0.140000, -0.190000, -0.200000, -0.220000, -0.240000, -0.260000, -0.270000, -0.280000, -0.290000, -0.290000, -0.310000, -0.320000, -0.350000, -0.370000, -0.370000\n-0.200000, -0.200000, -0.220000, -0.240000, -0.260000, -0.290000, -0.280000, -0.300000, -0.290000, -0.300000, -0.310000, -0.320000, -0.370000, -0.370000, -0.360000\n-0.200000, -0.200000, -0.220000, -0.260000, -0.270000, -0.280000, -0.290000, -0.290000, -0.290000, -0.280000, -0.300000, -0.310000, -0.350000, -0.370000, -0.370000\n-0.220000, -0.220000, -0.250000, -0.270000, -0.290000, -0.300000, -0.290000, -0.290000, -0.290000, -0.310000, -0.360000, -0.360000, -0.360000, -0.360000, -0.340000\n-0.220000, -0.230000, -0.250000, -0.280000, -0.300000, -0.300000, -0.300000, -0.310000, -0.300000, -0.310000, -0.330000, -0.340000, -0.350000, -0.370000, -0.370000\n-0.260000, -0.260000, -0.270000, -0.300000, -0.300000, -0.320000, -0.300000, -0.310000, -0.320000, -0.330000, -0.340000, -0.350000, -0.370000, -0.370000, -0.360000\n-0.270000, -0.270000, -0.270000, -0.290000, -0.300000, -0.310000, -0.310000, -0.320000, -0.320000, -0.320000, -0.330000, -0.340000, -0.360000, -0.370000, -0.380000\n-0.250000, -0.240000, -0.280000, -0.300000, -0.300000, -0.310000, -0.300000, -0.310000, -0.310000, -0.320000, -0.320000, -0.340000, -0.360000, -0.360000, -0.360000\n-0.240000, -0.260000, -0.260000, -0.280000, -0.300000, -0.300000, -0.300000, -0.300000, -0.320000, -0.320000, -0.320000, -0.330000, -0.350000, -0.360000, -0.380000\n-0.230000, -0.240000, -0.270000, -0.300000, -0.300000, -0.310000, -0.300000, -0.300000, -0.300000, -0.310000, -0.320000, -0.320000, -0.340000, -0.360000, -0.340000\n-0.220000, -0.220000, -0.230000, -0.280000, -0.290000, -0.300000, -0.290000, -0.300000, -0.300000, -0.300000, -0.300000, -0.300000, -0.320000, -0.330000, -0.370000\n-0.240000, -0.250000, -0.250000, -0.280000, -0.270000, -0.280000, -0.270000, -0.290000, -0.290000, -0.290000, -0.320000, -0.320000, -0.320000, -0.320000, -0.310000\n-0.200000, -0.220000, -0.230000, -0.260000, -0.260000, -0.270000, -0.240000, -0.260000, -0.260000, -0.260000, -0.270000, -0.280000, -0.300000, -0.300000, -0.310000', 'x_count': '15', 'y_count': '15', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '20.0', 'max_x': '209.98000000000002', 'min_y': '50.0', 'max_y': '219.95999999999992'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\nM106 S255\nSET_FAN_SPEED FAN=exhaust_fan SPEED=1\nSET_FAN_SPEED FAN=chamber_fan SPEED=1\n\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nM106 S0\nSET_FAN_SPEED FAN=exhaust_fan SPEED=0.8\nSET_FAN_SPEED FAN=chamber_fan SPEED=0.8\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F5000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F9000\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.25, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.605, 'pid_ki': 0.869, 'pid_kd': 89.127, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': '!PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 64.882, 'pid_ki': 1.481, 'pid_kd': 710.453, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'fan_generic exhaust_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC12'}, 'fan_generic chamber_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE4'}, 'temperature_sensor chamber': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 60.0, 'gcode_id': 'C: C'}, 'output_pin led': {'pwm': True, 'pin': 'PB5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 0.7, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [15, 15], 'mesh_min': [20.0, 50.0], 'mesh_max': [210.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'horizontal_move_z': 0.7, 'speed': 200.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.17, -0.17, -0.19, -0.21, -0.22, -0.24, -0.24, -0.26, -0.27, -0.28, -0.3, -0.31, -0.34, -0.33, -0.3], [-0.18, -0.18, -0.21, -0.23, -0.24, -0.27, -0.24, -0.28, -0.29, -0.3, -0.3, -0.33, -0.37, -0.35, -0.33], [-0.14, -0.19, -0.2, -0.22, -0.24, -0.26, -0.27, -0.28, -0.29, -0.29, -0.31, -0.32, -0.35, -0.37, -0.37], [-0.2, -0.2, -0.22, -0.24, -0.26, -0.29, -0.28, -0.3, -0.29, -0.3, -0.31, -0.32, -0.37, -0.37, -0.36], [-0.2, -0.2, -0.22, -0.26, -0.27, -0.28, -0.29, -0.29, -0.29, -0.28, -0.3, -0.31, -0.35, -0.37, -0.37], [-0.22, -0.22, -0.25, -0.27, -0.29, -0.3, -0.29, -0.29, -0.29, -0.31, -0.36, -0.36, -0.36, -0.36, -0.34], [-0.22, -0.23, -0.25, -0.28, -0.3, -0.3, -0.3, -0.31, -0.3, -0.31, -0.33, -0.34, -0.35, -0.37, -0.37], [-0.26, -0.26, -0.27, -0.3, -0.3, -0.32, -0.3, -0.31, -0.32, -0.33, -0.34, -0.35, -0.37, -0.37, -0.36], [-0.27, -0.27, -0.27, -0.29, -0.3, -0.31, -0.31, -0.32, -0.32, -0.32, -0.33, -0.34, -0.36, -0.37, -0.38], [-0.25, -0.24, -0.28, -0.3, -0.3, -0.31, -0.3, -0.31, -0.31, -0.32, -0.32, -0.34, -0.36, -0.36, -0.36], [-0.24, -0.26, -0.26, -0.28, -0.3, -0.3, -0.3, -0.3, -0.32, -0.32, -0.32, -0.33, -0.35, -0.36, -0.38], [-0.23, -0.24, -0.27, -0.3, -0.3, -0.31, -0.3, -0.3, -0.3, -0.31, -0.32, -0.32, -0.34, -0.36, -0.34], [-0.22, -0.22, -0.23, -0.28, -0.29, -0.3, -0.29, -0.3, -0.3, -0.3, -0.3, -0.3, -0.32, -0.33, -0.37], [-0.24, -0.25, -0.25, -0.28, -0.27, -0.28, -0.27, -0.29, -0.29, -0.29, -0.32, -0.32, -0.32, -0.32, -0.31], [-0.2, -0.22, -0.23, -0.26, -0.26, -0.27, -0.24, -0.26, -0.26, -0.26, -0.27, -0.28, -0.3, -0.3, -0.31]], 'min_x': 20.0, 'max_x': 209.98000000000002, 'min_y': 50.0, 'max_y': 219.95999999999992, 'x_count': 15, 'y_count': 15, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 220.0], 'screw2_name': 'screw at 20.000,220.000', 'screw3': [220.0, 220.0], 'screw3_name': 'screw at 220.000,220.000', 'screw4': [220.0, 20.0], 'screw4_name': 'screw at 220.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 0.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 190.0], 'screw3_name': '"Back Right"', 'screw4': [20.0, 190.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 150.0}, 'printer': {'max_velocity': 500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 18:55:49,434 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 18:55:49,437 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 18:55:49,438 [printer.py:reinit()] - # Extruders: 1
2024-11-24 18:55:49,439 [printer.py:reinit()] - # Temperature devices: 4
2024-11-24 18:55:49,439 [printer.py:reinit()] - # Fans: 4
2024-11-24 18:55:49,439 [printer.py:reinit()] - # Output pins: 1
2024-11-24 18:55:49,439 [printer.py:reinit()] - # Leds: 0
2024-11-24 18:55:49,440 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 18:55:49,468 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 18:55:49,472 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&temperature_sensor chamber&fan&fan_generic exhaust_fan&fan_generic chamber_fan&heater_fan hotend_fan&output_pin LED
2024-11-24 18:55:49,767 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 18:55:49,768 [screen.py:init_klipper()] - Printer initialized
2024-11-24 18:55:49,769 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 18:55:49,769 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 18:55:51,272 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 18:55:51,273 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 18:55:51,276 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 18:55:51,290 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 18:55:51,479 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 18:55:51,500 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 18:55:51,512 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 18:55:51,526 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 18:55:51,543 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 18:55:51,555 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-11-24 18:55:51,636 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 18:55:51,639 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 18:55:51,699 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'temperature_sensor chamber', 'extruder']
2024-11-24 18:55:51,703 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 18:55:51,732 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 18:56:40,420 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-11-24 18:56:40,421 [printer.py:change_state()] - Adding callback for state: printing
2024-11-24 18:56:40,449 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 18:56:40,671 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-11-24 18:56:40,681 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-11-24 18:56:40,697 [job_status.py:update_file_metadata()] - Update Metadata. File: TH008.gcode Size: 24950020
2024-11-24 18:56:40,709 [job_status.py:show_file_thumbnail()] - TH008.gcode
2024-11-24 19:00:54,874 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2024-11-24 19:00:54,874 [printer.py:change_state()] - Adding callback for state: paused
2024-11-24 19:00:54,890 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2024-11-24 19:00:54,961 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 19:00:55,185 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-11-24 19:00:55,197 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2024-11-24 19:00:55,213 [job_status.py:update_file_metadata()] - Update Metadata. File: TH008.gcode Size: 24950020
2024-11-24 19:00:55,225 [job_status.py:show_file_thumbnail()] - TH008.gcode
2024-11-24 19:00:55,235 [screen.py:_load_panel()] - Loading panel: extrude
2024-11-24 19:00:55,375 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2024-11-24 19:01:28,215 [printer.py:change_state()] - Changing state from 'paused' to 'ready'
2024-11-24 19:01:28,216 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 19:01:30,720 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-11-24 19:01:30,721 [printer.py:change_state()] - Adding callback for state: printing
2024-11-24 19:01:30,753 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 19:01:31,040 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-11-24 19:01:31,054 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-11-24 19:01:31,086 [job_status.py:update_file_metadata()] - Update Metadata. File: TH008.gcode Size: 24950020
2024-11-24 19:01:31,099 [job_status.py:show_file_thumbnail()] - TH008.gcode
2024-11-24 19:02:15,352 [printer.py:change_state()] - Changing state from 'printing' to 'shutdown'
2024-11-24 19:02:15,353 [printer.py:change_state()] - Adding callback for state: shutdown
2024-11-24 19:02:15,396 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 19:02:15,400 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 19:02:15,483 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 19:02:16,962 [printer.py:change_state()] - Changing state from 'shutdown' to 'disconnected'
2024-11-24 19:02:16,963 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 19:02:16,966 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 19:02:16,966 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 19:02:16,970 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 19:02:17,082 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 19:02:20,321 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 19:02:20,344 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 19:02:20,362 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 19:02:20,363 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 19:02:20,363 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 19:02:20,386 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 19:02:20,430 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\nM106 S255\nSET_FAN_SPEED FAN=exhaust_fan SPEED=1\nSET_FAN_SPEED FAN=chamber_fan SPEED=1\n\nM104 S{EXTRUDER_TEMP-50}\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nM106 S0\nSET_FAN_SPEED FAN=exhaust_fan SPEED=0.8\nSET_FAN_SPEED FAN=chamber_fan SPEED=0.8\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F4000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F4000\nG1 Z2\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '2.00', 'stealthchop_threshold': '999999'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '999999'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3', 'position_endstop': '0.250'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '1', 'stealthchop_threshold': '999999'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': '!PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03', 'control': 'pid', 'pid_kp': '17.605', 'pid_ki': '0.869', 'pid_kd': '89.127'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '999999'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '64.882', 'pid_ki': '1.481', 'pid_kd': '710.453'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan_generic exhaust_fan': {'pin': 'PC12', 'max_power': '1', 'shutdown_speed': '0', 'kick_start_time': '0.1', 'off_below': '0.10'}, 'fan_generic chamber_fan': {'pin': 'PE4', 'max_power': '1', 'shutdown_speed': '0', 'kick_start_time': '0.1', 'off_below': '0.10'}, 'temperature_sensor chamber': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': '4700', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '60', 'gcode_id': 'C: C'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'true', 'cycle_time': '0.01', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '0.7', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_mesh': {'speed': '200', 'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,50', 'mesh_max': '210, 220', 'probe_count': '15,15', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,0', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 190', 'screw3_name': '"Back Right"', 'screw4': '20, 190', 'screw4_name': '"Back Left"', 'speed': '150', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.170000, -0.170000, -0.190000, -0.210000, -0.220000, -0.240000, -0.240000, -0.260000, -0.270000, -0.280000, -0.300000, -0.310000, -0.340000, -0.330000, -0.300000\n-0.180000, -0.180000, -0.210000, -0.230000, -0.240000, -0.270000, -0.240000, -0.280000, -0.290000, -0.300000, -0.300000, -0.330000, -0.370000, -0.350000, -0.330000\n-0.140000, -0.190000, -0.200000, -0.220000, -0.240000, -0.260000, -0.270000, -0.280000, -0.290000, -0.290000, -0.310000, -0.320000, -0.350000, -0.370000, -0.370000\n-0.200000, -0.200000, -0.220000, -0.240000, -0.260000, -0.290000, -0.280000, -0.300000, -0.290000, -0.300000, -0.310000, -0.320000, -0.370000, -0.370000, -0.360000\n-0.200000, -0.200000, -0.220000, -0.260000, -0.270000, -0.280000, -0.290000, -0.290000, -0.290000, -0.280000, -0.300000, -0.310000, -0.350000, -0.370000, -0.370000\n-0.220000, -0.220000, -0.250000, -0.270000, -0.290000, -0.300000, -0.290000, -0.290000, -0.290000, -0.310000, -0.360000, -0.360000, -0.360000, -0.360000, -0.340000\n-0.220000, -0.230000, -0.250000, -0.280000, -0.300000, -0.300000, -0.300000, -0.310000, -0.300000, -0.310000, -0.330000, -0.340000, -0.350000, -0.370000, -0.370000\n-0.260000, -0.260000, -0.270000, -0.300000, -0.300000, -0.320000, -0.300000, -0.310000, -0.320000, -0.330000, -0.340000, -0.350000, -0.370000, -0.370000, -0.360000\n-0.270000, -0.270000, -0.270000, -0.290000, -0.300000, -0.310000, -0.310000, -0.320000, -0.320000, -0.320000, -0.330000, -0.340000, -0.360000, -0.370000, -0.380000\n-0.250000, -0.240000, -0.280000, -0.300000, -0.300000, -0.310000, -0.300000, -0.310000, -0.310000, -0.320000, -0.320000, -0.340000, -0.360000, -0.360000, -0.360000\n-0.240000, -0.260000, -0.260000, -0.280000, -0.300000, -0.300000, -0.300000, -0.300000, -0.320000, -0.320000, -0.320000, -0.330000, -0.350000, -0.360000, -0.380000\n-0.230000, -0.240000, -0.270000, -0.300000, -0.300000, -0.310000, -0.300000, -0.300000, -0.300000, -0.310000, -0.320000, -0.320000, -0.340000, -0.360000, -0.340000\n-0.220000, -0.220000, -0.230000, -0.280000, -0.290000, -0.300000, -0.290000, -0.300000, -0.300000, -0.300000, -0.300000, -0.300000, -0.320000, -0.330000, -0.370000\n-0.240000, -0.250000, -0.250000, -0.280000, -0.270000, -0.280000, -0.270000, -0.290000, -0.290000, -0.290000, -0.320000, -0.320000, -0.320000, -0.320000, -0.310000\n-0.200000, -0.220000, -0.230000, -0.260000, -0.260000, -0.270000, -0.240000, -0.260000, -0.260000, -0.260000, -0.270000, -0.280000, -0.300000, -0.300000, -0.310000', 'x_count': '15', 'y_count': '15', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '20.0', 'max_x': '209.98000000000002', 'min_y': '50.0', 'max_y': '219.95999999999992'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\nM106 S255\nSET_FAN_SPEED FAN=exhaust_fan SPEED=1\nSET_FAN_SPEED FAN=chamber_fan SPEED=1\n\nM104 S{EXTRUDER_TEMP-50}\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nM106 S0\nSET_FAN_SPEED FAN=exhaust_fan SPEED=0.8\nSET_FAN_SPEED FAN=chamber_fan SPEED=0.8\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F4000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F4000\nG1 Z2\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.25, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 999999.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.605, 'pid_ki': 0.869, 'pid_kd': 89.127, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': '!PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 64.882, 'pid_ki': 1.481, 'pid_kd': 710.453, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'fan_generic exhaust_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC12'}, 'fan_generic chamber_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE4'}, 'temperature_sensor chamber': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 60.0, 'gcode_id': 'C: C'}, 'output_pin led': {'pwm': True, 'pin': 'PB5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 0.7, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [15, 15], 'mesh_min': [20.0, 50.0], 'mesh_max': [210.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'horizontal_move_z': 0.7, 'speed': 200.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.17, -0.17, -0.19, -0.21, -0.22, -0.24, -0.24, -0.26, -0.27, -0.28, -0.3, -0.31, -0.34, -0.33, -0.3], [-0.18, -0.18, -0.21, -0.23, -0.24, -0.27, -0.24, -0.28, -0.29, -0.3, -0.3, -0.33, -0.37, -0.35, -0.33], [-0.14, -0.19, -0.2, -0.22, -0.24, -0.26, -0.27, -0.28, -0.29, -0.29, -0.31, -0.32, -0.35, -0.37, -0.37], [-0.2, -0.2, -0.22, -0.24, -0.26, -0.29, -0.28, -0.3, -0.29, -0.3, -0.31, -0.32, -0.37, -0.37, -0.36], [-0.2, -0.2, -0.22, -0.26, -0.27, -0.28, -0.29, -0.29, -0.29, -0.28, -0.3, -0.31, -0.35, -0.37, -0.37], [-0.22, -0.22, -0.25, -0.27, -0.29, -0.3, -0.29, -0.29, -0.29, -0.31, -0.36, -0.36, -0.36, -0.36, -0.34], [-0.22, -0.23, -0.25, -0.28, -0.3, -0.3, -0.3, -0.31, -0.3, -0.31, -0.33, -0.34, -0.35, -0.37, -0.37], [-0.26, -0.26, -0.27, -0.3, -0.3, -0.32, -0.3, -0.31, -0.32, -0.33, -0.34, -0.35, -0.37, -0.37, -0.36], [-0.27, -0.27, -0.27, -0.29, -0.3, -0.31, -0.31, -0.32, -0.32, -0.32, -0.33, -0.34, -0.36, -0.37, -0.38], [-0.25, -0.24, -0.28, -0.3, -0.3, -0.31, -0.3, -0.31, -0.31, -0.32, -0.32, -0.34, -0.36, -0.36, -0.36], [-0.24, -0.26, -0.26, -0.28, -0.3, -0.3, -0.3, -0.3, -0.32, -0.32, -0.32, -0.33, -0.35, -0.36, -0.38], [-0.23, -0.24, -0.27, -0.3, -0.3, -0.31, -0.3, -0.3, -0.3, -0.31, -0.32, -0.32, -0.34, -0.36, -0.34], [-0.22, -0.22, -0.23, -0.28, -0.29, -0.3, -0.29, -0.3, -0.3, -0.3, -0.3, -0.3, -0.32, -0.33, -0.37], [-0.24, -0.25, -0.25, -0.28, -0.27, -0.28, -0.27, -0.29, -0.29, -0.29, -0.32, -0.32, -0.32, -0.32, -0.31], [-0.2, -0.22, -0.23, -0.26, -0.26, -0.27, -0.24, -0.26, -0.26, -0.26, -0.27, -0.28, -0.3, -0.3, -0.31]], 'min_x': 20.0, 'max_x': 209.98000000000002, 'min_y': 50.0, 'max_y': 219.95999999999992, 'x_count': 15, 'y_count': 15, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 220.0], 'screw2_name': 'screw at 20.000,220.000', 'screw3': [220.0, 220.0], 'screw3_name': 'screw at 220.000,220.000', 'screw4': [220.0, 20.0], 'screw4_name': 'screw at 220.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 0.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 190.0], 'screw3_name': '"Back Right"', 'screw4': [20.0, 190.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 150.0}, 'printer': {'max_velocity': 500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 19:02:20,439 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 19:02:20,443 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 19:02:20,444 [printer.py:reinit()] - # Extruders: 1
2024-11-24 19:02:20,445 [printer.py:reinit()] - # Temperature devices: 4
2024-11-24 19:02:20,446 [printer.py:reinit()] - # Fans: 4
2024-11-24 19:02:20,446 [printer.py:reinit()] - # Output pins: 1
2024-11-24 19:02:20,447 [printer.py:reinit()] - # Leds: 0
2024-11-24 19:02:20,449 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 19:02:20,480 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 19:02:20,483 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&temperature_sensor chamber&fan&fan_generic exhaust_fan&fan_generic chamber_fan&heater_fan hotend_fan&output_pin LED
2024-11-24 19:02:20,791 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 19:02:20,792 [screen.py:init_klipper()] - Printer initialized
2024-11-24 19:02:20,793 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 19:02:20,793 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 19:02:22,419 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 19:02:22,419 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 19:02:22,423 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 19:02:22,429 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 19:02:22,558 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 19:02:22,577 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 19:02:22,587 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 19:02:22,597 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 19:02:22,607 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 19:02:22,617 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-11-24 19:02:22,687 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 19:02:22,689 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 19:02:22,745 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'temperature_sensor chamber', 'extruder']
2024-11-24 19:02:22,748 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 19:02:22,767 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 19:02:26,179 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-11-24 19:02:26,179 [printer.py:change_state()] - Adding callback for state: printing
2024-11-24 19:02:26,208 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 19:02:26,455 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-11-24 19:02:26,468 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-11-24 19:02:26,484 [job_status.py:update_file_metadata()] - Update Metadata. File: TH008.gcode Size: 24950020
2024-11-24 19:02:26,495 [job_status.py:show_file_thumbnail()] - TH008.gcode
2024-11-24 19:05:10,656 [printer.py:change_state()] - Changing state from 'printing' to 'paused'
2024-11-24 19:05:10,656 [printer.py:change_state()] - Adding callback for state: paused
2024-11-24 19:05:10,670 [job_status.py:set_state()] - Changing job_status state from 'printing' to 'paused'
2024-11-24 19:05:10,732 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 19:05:10,953 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-11-24 19:05:10,965 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'paused'
2024-11-24 19:05:10,983 [job_status.py:update_file_metadata()] - Update Metadata. File: TH008.gcode Size: 24950020
2024-11-24 19:05:10,994 [job_status.py:show_file_thumbnail()] - TH008.gcode
2024-11-24 19:05:11,004 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 19:05:11,119 [screen.py:attach_panel()] - Current panel hierarchy: job_status > extrude
2024-11-24 19:05:17,173 [printer.py:change_state()] - Changing state from 'paused' to 'ready'
2024-11-24 19:05:17,173 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 19:07:23,485 [printer.py:change_state()] - Changing state from 'ready' to 'disconnected'
2024-11-24 19:07:23,486 [printer.py:change_state()] - Adding callback for state: disconnected
2024-11-24 19:07:23,488 [screen.py:state_disconnected()] - ### Going to disconnected
2024-11-24 19:07:23,488 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 19:07:23,492 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 19:07:23,560 [screen.py:attach_panel()] - Current panel hierarchy: splash_screen
2024-11-24 19:07:27,320 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/info
2024-11-24 19:07:27,346 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/webcams/list
2024-11-24 19:07:27,373 [printer.py:configure_cameras()] - Cameras: [{'name': 'c270', 'enabled': True, 'icon': 'mdiWebcam', 'aspect_ratio': '4:3', 'target_fps': 15, 'target_fps_idle': 15, 'location': 'printer', 'service': 'mjpegstreamer-adaptive', 'stream_url': '/webcam/?action=stream', 'snapshot_url': '/webcam/?action=snapshot', 'flip_horizontal': False, 'flip_vertical': False, 'rotation': 0, 'source': 'database', 'extra_data': {}, 'uid': 'c5859e8e-ab65-43a8-a98b-be10a4e83d1a'}]
2024-11-24 19:07:27,374 [screen.py:init_klipper()] - Moonraker info {'klippy_connected': True, 'klippy_state': 'startup', 'components': ['secrets', 'template', 'klippy_connection', 'jsonrpc', 'internal_transport', 'application', 'websockets', 'database', 'dbus_manager', 'file_manager', 'authorization', 'klippy_apis', 'shell_command', 'machine', 'data_store', 'proc_stats', 'job_state', 'job_queue', 'history', 'http_client', 'announcements', 'webcam', 'extensions', 'update_manager', 'octoprint_compat'], 'failed_components': [], 'registered_directories': ['config', 'logs', 'gcodes', 'config_examples', 'docs'], 'warnings': [], 'websocket_count': 2, 'moonraker_version': 'v0.9.3-3-gccfe32f', 'missing_klippy_requirements': [], 'api_version': [1, 4, 0], 'api_version_string': '1.4.0'}
2024-11-24 19:07:27,374 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/info
2024-11-24 19:07:27,414 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?configfile
2024-11-24 19:07:27,535 [screen.py:init_klipper()] - {'configfile': {'config': {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': '350'}, 'display_status': {}, 'respond': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'PAUSE_BASE', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'RESUME_BASE', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}'}, 'gcode_macro SET_PAUSE_NEXT_LAYER': {'description': 'Enable a pause if the next layer is reached', 'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"'}, 'gcode_macro SET_PAUSE_AT_LAYER': {'description': 'Enable/disable a pause if a given layer number is reached', 'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"'}, 'gcode_macro SET_PRINT_STATS_INFO': {'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }', 'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}'}, 'gcode_macro _CLIENT_EXTRUDE': {'description': 'Extrudes, if the extruder is hot enough', 'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}'}, 'gcode_macro _CLIENT_RETRACT': {'description': 'Retracts, if the extruder is hot enough', 'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}"}, 'gcode_macro GET_TIMELAPSE_SETUP': {'description': 'Print the Timelapse setup', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}'}, 'gcode_macro _SET_TIMELAPSE_SETUP': {'description': 'Set user parameters for timelapse', 'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"'}, 'gcode_macro TIMELAPSE_TAKE_FRAME': {'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False', 'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}'}, 'gcode_macro _TIMELAPSE_NEW_FRAME': {'description': 'action call for timelapse shoot. must be a seperate macro', 'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}'}, 'delayed_gcode _WAIT_TIMELAPSE_TAKE_FRAME': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}'}, 'gcode_macro HYPERLAPSE': {'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False', 'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}'}, 'delayed_gcode _HYPERLAPSE_LOOP': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True'}, 'gcode_macro TIMELAPSE_RENDER': {'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0', 'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5'}, 'delayed_gcode _WAIT_TIMELAPSE_RENDER': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}'}, 'gcode_macro TEST_STREAM_DELAY': {'description': 'Helper macro to find stream and park delay', 'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}'}, 'gcode_macro M486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}'}, 'gcode_macro PRINT_START': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\nM106 S255\nSET_FAN_SPEED FAN=exhaust_fan SPEED=1\nSET_FAN_SPEED FAN=chamber_fan SPEED=1\n\nM104 S{EXTRUDER_TEMP-50}\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nM106 S0\nSET_FAN_SPEED FAN=exhaust_fan SPEED=0.8\nSET_FAN_SPEED FAN=chamber_fan SPEED=0.8\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F4000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F4000\nG1 Z2\nM117 Printing...'}, 'gcode_macro PRINT_END': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!'}, 'gcode_macro G29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG'}, 'gcode_macro M600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state'}, 'gcode_macro M900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}'}, 'gcode_macro Disable_Steppers': {'gcode': '\nM84'}, 'gcode_macro RETRACTION_UP': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro RETRACTION_DOWN': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}'}, 'gcode_macro SET_RETRACTIONLENGTH': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0'}, 'gcode_macro RSCS_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1'}, 'gcode_macro RSCS_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0'}, 'gcode_macro LED_on': {'gcode': '\nSET_PIN PIN=LED value=1'}, 'gcode_macro LED_off': {'gcode': '\nSET_PIN PIN=LED value=0'}, 'gcode_macro PA_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005'}, 'gcode_macro TEST_RESONNANCES_X': {'gcode': '\nTEST_RESONANCES AXIS=X'}, 'gcode_macro TEST_RESONNANCES_Y': {'gcode': '\nTEST_RESONANCES AXIS=Y'}, 'gcode_macro Automatic_Inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config'}, 'gcode_macro Hold_Resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}'}, 'gcode_macro DUMP_WARNINGS': {'description': 'Debug: Print all warning messages from klipper', 'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1'}, 'gcode_macro Sensorless_homing_Test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}'}, 'gcode_macro PID_Calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30'}, 'exclude_object': {}, 'gcode_arcs': {'resolution': '0.1'}, 'homing_override': {'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}", 'axes': 'xyz'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '500', 'max_accel': '10000', 'max_z_velocity': '20', 'max_z_accel': '1500', 'square_corner_velocity': '10'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00'}, 'temperature_sensor MantaM8P': {'sensor_type': 'temperature_mcu'}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu'}, 'temperature_sensor CB1': {'sensor_type': 'temperature_host', 'min_temp': '10', 'max_temp': '100'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': '!PB4', 'enable_pin': '!PC11', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': '0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'diag_pin': 'PF3', 'driver_sgthrs': '50', 'run_current': '2.00', 'stealthchop_threshold': '0'}, 'stepper_x1': {'step_pin': 'PF12', 'dir_pin': '!PF11', 'enable_pin': '!PB3', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'run_current': '2.00', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PD7', 'dir_pin': '!PD6', 'enable_pin': '!PF10', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200', 'endstop_pin': '^!PF5', 'position_endstop': '-0', 'position_min': '0', 'position_max': '235', 'homing_speed': '50', 'homing_retract_dist': '0'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'run_current': '0.650', 'stealthchop_threshold': '0'}, 'stepper_y1': {'step_pin': 'PD3', 'dir_pin': '!PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'microsteps': '16', 'full_steps_per_rotation': '200'}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'run_current': '0.650', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PA10', 'dir_pin': 'PA14', 'enable_pin': '!PA15', 'microsteps': '32', 'rotation_distance': '4', 'endstop_pin': '^!PC2', 'position_min': '-2', 'position_max': '200', 'full_steps_per_rotation': '200', 'homing_retract_dist': '2', 'homing_positive_dir': 'false', 'homing_speed': '20', 'second_homing_speed': '1', 'homing_retract_speed': '3', 'position_endstop': '0.250'}, 'force_move': {'enable_force_move': 'true'}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'run_current': '1', 'stealthchop_threshold': '0'}, 'extruder': {'step_pin': 'PD8', 'dir_pin': '!PC6', 'enable_pin': '!PC7', 'microsteps': '16', 'rotation_distance': '22.2', 'gear_ratio': '50:8', 'nozzle_diameter': '0.5', 'filament_diameter': '1.750', 'heater_pin': 'PE3', 'sensor_pin': 'PA1', 'sensor_type': 'Generic 3950', 'min_temp': '0', 'max_temp': '400', 'full_steps_per_rotation': '200', 'max_extrude_only_distance': '1000.0', 'max_extrude_cross_section': '500', 'max_extrude_only_velocity': '200', 'max_extrude_only_accel': '10000', 'min_extrude_temp': '0', 'pressure_advance': '0.02', 'pressure_advance_smooth_time': '0.03', 'control': 'pid', 'pid_kp': '17.605', 'pid_ki': '0.869', 'pid_kd': '89.127'}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'run_current': '0.800', 'stealthchop_threshold': '0'}, 'heater_bed': {'heater_pin': 'PB7', 'sensor_pin': 'PA0', 'sensor_type': 'ATC Semitec 104GT-2', 'min_temp': '0', 'max_temp': '130', 'control': 'pid', 'pid_kp': '64.882', 'pid_ki': '1.481', 'pid_kd': '710.453'}, 'fan': {'pin': 'PE6', 'max_power': '1', 'cycle_time': '0.002', 'hardware_pwm': 'false', 'shutdown_speed': '0'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'fan_generic exhaust_fan': {'pin': 'PC12', 'max_power': '1', 'shutdown_speed': '0', 'kick_start_time': '0.1', 'off_below': '0.10'}, 'fan_generic chamber_fan': {'pin': 'PE4', 'max_power': '1', 'shutdown_speed': '0', 'kick_start_time': '0.1', 'off_below': '0.10'}, 'temperature_sensor chamber': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': '4700', 'sensor_pin': 'PA2', 'min_temp': '0', 'max_temp': '60', 'gcode_id': 'C: C'}, 'output_pin LED': {'pin': 'PB5', 'pwm': 'true', 'cycle_time': '0.01', 'value': '1', 'shutdown_value': '1'}, 'idle_timeout': {'timeout': '1800', 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'BDsensor': {'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'z_offset': '0', 'x_offset': '0', 'y_offset': '38', 'no_stop_probe': '', 'position_endstop': '0.7', 'collision_homing': '0', 'collision_calibrate': '0'}, 'bed_mesh': {'speed': '200', 'horizontal_move_z': '0.7', 'algorithm': 'bicubic', 'mesh_min': '20,50', 'mesh_max': '210, 220', 'probe_count': '15,15', 'fade_start': '1', 'fade_end': '10', 'fade_target': '0'}, 'bed_screws': {'screw1': '20,20', 'screw2': '20,220', 'screw3': '220,220', 'screw4': '220,20'}, 'screws_tilt_adjust': {'screw1': '20,0', 'screw1_name': '"Front Left"', 'screw2': '215,0', 'screw2_name': '"Front Right"', 'screw3': '215, 190', 'screw3_name': '"Back Right"', 'screw4': '20, 190', 'screw4_name': '"Back Left"', 'speed': '150', 'horizontal_move_z': '5', 'screw_thread': 'CW-M3'}, 'bed_mesh default': {'version': '1', 'points': '\n-0.170000, -0.170000, -0.190000, -0.210000, -0.220000, -0.240000, -0.240000, -0.260000, -0.270000, -0.280000, -0.300000, -0.310000, -0.340000, -0.330000, -0.300000\n-0.180000, -0.180000, -0.210000, -0.230000, -0.240000, -0.270000, -0.240000, -0.280000, -0.290000, -0.300000, -0.300000, -0.330000, -0.370000, -0.350000, -0.330000\n-0.140000, -0.190000, -0.200000, -0.220000, -0.240000, -0.260000, -0.270000, -0.280000, -0.290000, -0.290000, -0.310000, -0.320000, -0.350000, -0.370000, -0.370000\n-0.200000, -0.200000, -0.220000, -0.240000, -0.260000, -0.290000, -0.280000, -0.300000, -0.290000, -0.300000, -0.310000, -0.320000, -0.370000, -0.370000, -0.360000\n-0.200000, -0.200000, -0.220000, -0.260000, -0.270000, -0.280000, -0.290000, -0.290000, -0.290000, -0.280000, -0.300000, -0.310000, -0.350000, -0.370000, -0.370000\n-0.220000, -0.220000, -0.250000, -0.270000, -0.290000, -0.300000, -0.290000, -0.290000, -0.290000, -0.310000, -0.360000, -0.360000, -0.360000, -0.360000, -0.340000\n-0.220000, -0.230000, -0.250000, -0.280000, -0.300000, -0.300000, -0.300000, -0.310000, -0.300000, -0.310000, -0.330000, -0.340000, -0.350000, -0.370000, -0.370000\n-0.260000, -0.260000, -0.270000, -0.300000, -0.300000, -0.320000, -0.300000, -0.310000, -0.320000, -0.330000, -0.340000, -0.350000, -0.370000, -0.370000, -0.360000\n-0.270000, -0.270000, -0.270000, -0.290000, -0.300000, -0.310000, -0.310000, -0.320000, -0.320000, -0.320000, -0.330000, -0.340000, -0.360000, -0.370000, -0.380000\n-0.250000, -0.240000, -0.280000, -0.300000, -0.300000, -0.310000, -0.300000, -0.310000, -0.310000, -0.320000, -0.320000, -0.340000, -0.360000, -0.360000, -0.360000\n-0.240000, -0.260000, -0.260000, -0.280000, -0.300000, -0.300000, -0.300000, -0.300000, -0.320000, -0.320000, -0.320000, -0.330000, -0.350000, -0.360000, -0.380000\n-0.230000, -0.240000, -0.270000, -0.300000, -0.300000, -0.310000, -0.300000, -0.300000, -0.300000, -0.310000, -0.320000, -0.320000, -0.340000, -0.360000, -0.340000\n-0.220000, -0.220000, -0.230000, -0.280000, -0.290000, -0.300000, -0.290000, -0.300000, -0.300000, -0.300000, -0.300000, -0.300000, -0.320000, -0.330000, -0.370000\n-0.240000, -0.250000, -0.250000, -0.280000, -0.270000, -0.280000, -0.270000, -0.290000, -0.290000, -0.290000, -0.320000, -0.320000, -0.320000, -0.320000, -0.310000\n-0.200000, -0.220000, -0.230000, -0.260000, -0.260000, -0.270000, -0.240000, -0.260000, -0.260000, -0.260000, -0.270000, -0.280000, -0.300000, -0.300000, -0.310000', 'x_count': '15', 'y_count': '15', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '20.0', 'max_x': '209.98000000000002', 'min_y': '50.0', 'max_y': '219.95999999999992'}}, 'warnings': [], 'save_config_pending': False, 'save_config_pending_items': {}, 'settings': {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_060038000F504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'mcu rpi': {'serial': '/tmp/klipper_host_mcu', 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': 'CANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 350.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'gcode_macro cancel_print': {'gcode': '\nTURN_OFF_HEATERS\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print'}, 'gcode_macro pause': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set idle_timeout = client.idle_timeout|default(0) %}\n{% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != \'\' else 0 %}\n{% set restore = False if printer.toolhead.extruder == \'\'\nelse True  if params.RESTORE|default(1)|int == 1 else False %}\n\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{\'restore\': restore, \'temp\': temp}}"\n\n{% if idle_timeout > 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}\nSET_IDLE_TIMEOUT TIMEOUT={idle_timeout}\n{% endif %}\nPAUSE_BASE\n{client.user_pause_macro|default("")}\n_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}', 'rename_existing': 'PAUSE_BASE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set sp_move = client.speed_move|default(velocity) %}\n{% set runout_resume = True if client.runout_sensor|default("") == ""\nelse True if not printer[client.runout_sensor].enabled\nelse printer[client.runout_sensor].filament_detected %}\n{% set can_extrude = True if printer.toolhead.extruder == \'\'\nelse printer[printer.toolhead.extruder].can_extrude %}\n{% set do_resume = False %}\n{% set prompt_txt = [] %}\n\n\n{% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False\n{% if last_extruder_temp.restore %}\n\nRESPOND TYPE=echo MSG=\'{"Restoring \\"%s\\" temperature to %3.1f\\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }\'\nM109 S{last_extruder_temp.temp}\n{% set do_resume = True %}\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n\n{% elif can_extrude %}\n{% set do_resume = True %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}\'\n{% set _d = prompt_txt.append("\\"%s\\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}\n{% endif %}\n{% if runout_resume %}\n{% if do_resume %}\n{% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %}\n{client.user_resume_macro|default("")}\n_CLIENT_EXTRUDE\nRESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}\n{% endif %}\n{% else %}\nRESPOND TYPE=error MSG=\'{"Resume aborted !!! \\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}\'\n{% set _d = prompt_txt.append("\\"%s\\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}\n{% endif %}\n\n{% if not (runout_resume and do_resume) %}\nRESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"\n{% for element in prompt_txt %}\nRESPOND TYPE=command MSG=\'{"action:prompt_text %s" % element}\'\n{% endfor %}\nRESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"\nRESPOND TYPE=command MSG="action:prompt_show"\n{% endif %}', 'rename_existing': 'RESUME_BASE', 'description': 'Resume the actual running print', 'variable_last_extruder_temp': "{'restore': False, 'temp': 0}", 'variable_restore_idle_timeout': '0', 'variable_idle_state': 'False'}, 'gcode_macro set_pause_next_layer': {'gcode': '\n{% set pause_next_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_next_layer %}\n{% set ENABLE = params.ENABLE|default(1)|int != 0 %}\n{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ \'enable\': ENABLE, \'call\': MACRO }}"', 'description': 'Enable a pause if the next layer is reached'}, 'gcode_macro set_pause_at_layer': {'gcode': '\n{% set pause_at_layer = printer[\'gcode_macro SET_PRINT_STATS_INFO\'].pause_at_layer %}\n{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined\nelse params.LAYER is defined %}\n{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}\n{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}\nSET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ \'enable\': ENABLE, \'layer\': LAYER, \'call\': MACRO }}"', 'description': 'Enable/disable a pause if a given layer number is reached'}, 'gcode_macro set_print_stats_info': {'gcode': '\n{% if pause_next_layer.enable %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_next_layer" % pause_next_layer.call}\'\n{pause_next_layer.call}\nSET_PAUSE_NEXT_LAYER ENABLE=0\n{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}\nRESPOND TYPE=echo MSG=\'{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}\'\n{pause_at_layer.call}\nSET_PAUSE_AT_LAYER ENABLE=0\n{% endif %}\nSET_PRINT_STATS_INFO_BASE {rawparams}', 'rename_existing': 'SET_PRINT_STATS_INFO_BASE', 'description': 'Overwrite, to get pause_next_layer and pause_at_layer feature', 'variable_pause_next_layer': '{ \'enable\': False, \'call\': "PAUSE" }', 'variable_pause_at_layer': '{ \'enable\': False, \'layer\': 0, \'call\': "PAUSE" }'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}\n{% set use_custom     = client.use_custom_pos|default(false)|lower == \'true\' %}\n{% set custom_park_x  = client.custom_park_x|default(0.0) %}\n{% set custom_park_y  = client.custom_park_y|default(0.0) %}\n{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}\n{% set sp_hop         = client.speed_hop|default(15) * 60 %}\n{% set sp_move        = client.speed_move|default(velocity) * 60 %}\n\n{% set origin    = printer.gcode_move.homing_origin %}\n{% set act       = printer.gcode_move.gcode_position %}\n{% set max       = printer.toolhead.axis_maximum %}\n{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n\n{% set z_min = params.Z_MIN|default(0)|float %}\n{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}\n{% set x_park = params.X       if params.X is defined\nelse custom_park_x  if use_custom\nelse 0.0            if round_bed\nelse (max.x - 5.0) %}\n{% set y_park = params.Y       if params.Y is defined\nelse custom_park_y  if use_custom\nelse (max.y - 5.0)  if round_bed and z_park < cone\nelse 0.0            if round_bed\nelse (max.y - 5.0) %}\n\n_CLIENT_RETRACT\n{% if "xyz" in printer.toolhead.homed_axes %}\nG90\nG1 Z{z_park} F{sp_hop}\nG1 X{x_park} Y{y_park} F{sp_move}\n{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'Printer not homed\'\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT'}, 'gcode_macro _client_extrude': {'gcode': '\n\n{% set client = printer[\'gcode_macro _CLIENT_VARIABLE\']|default({}) %}\n{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == \'true\') and (printer.firmware_retraction is defined) %}\n{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}\n{% set absolute_extrude = printer.gcode_move.absolute_extrude %}\n\n{% if printer.toolhead.extruder != \'\' %}\n{% if printer[printer.toolhead.extruder].can_extrude %}\n{% if use_fw_retract %}\n{% if length < 0 %}\nG10\n{% else %}\nG11\n{% endif %}\n{% else %}\nM83\nG1 E{length} F{(speed|float|abs) * 60}\n{% if absolute_extrude %}\nM82\n{% endif %}\n{% endif %}\n{% else %}\nRESPOND TYPE=echo MSG=\'{"\\"%s\\" not hot enough" % printer.toolhead.extruder}\'\n{% endif %}\n{% endif %}', 'description': 'Extrudes, if the extruder is hot enough'}, 'gcode_macro _client_retract': {'gcode': "\n{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}\n{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}\n{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}\n\n_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}", 'description': 'Retracts, if the extruder is hot enough'}, 'gcode_macro get_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set output_txt = ["Timelapse Setup:"] %}\n{% set _dummy = output_txt.append("enable: %s" % tl.enable) %}\n{% set _dummy = output_txt.append("park: %s" % tl.park.enable) %}\n{% if tl.park.enable %}\n{% set _dummy = output_txt.append("park position: %s time: %s s" % (tl.park.pos, tl.park.time)) %}\n{% set _dummy = output_txt.append("park cord x:%s y:%s dz:%s" % (tl.park.coord.x, tl.park.coord.y, tl.park.coord.dz)) %}\n{% set _dummy = output_txt.append("travel speed: %s mm/s" % tl.speed.travel) %}\n{% endif %}\n{% set _dummy = output_txt.append("fw_retract: %s" % tl.extruder.fw_retract) %}\n{% if not tl.extruder.fw_retract %}\n{% set _dummy = output_txt.append("retract: %s mm speed: %s mm/s" % (tl.extruder.retract, tl.speed.retract)) %}\n{% set _dummy = output_txt.append("extrude: %s mm speed: %s mm/s" % (tl.extruder.extrude, tl.speed.extrude)) %}\n{% endif %}\n{% set _dummy = output_txt.append("verbose: %s" % tl.verbose) %}\n{action_respond_info(output_txt|join("\\n"))}', 'description': 'Print the Timelapse setup'}, 'gcode_macro _set_timelapse_setup': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set round_bed = True if printer.configfile.settings.printer.kinematics is in [\'delta\',\'polar\',\'rotary_delta\',\'winch\']\nelse False %}\n{% set park = {\'min\'   : {\'x\': (min.x / 1.42)|round(3) if round_bed else min.x|round(3),\n\'y\': (min.y / 1.42)|round(3) if round_bed else min.y|round(3)},\n\'max\'   : {\'x\': (max.x / 1.42)|round(3) if round_bed else max.x|round(3),\n\'y\': (max.y / 1.42)|round(3) if round_bed else max.y|round(3)},\n\'center\': {\'x\': (max.x-(max.x-min.x)/2)|round(3),\n\'y\': (max.y-(max.y-min.y)/2)|round(3)}} %}\n\n{% if params.ENABLE %}\n{% if params.ENABLE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=enable VALUE={True if params.ENABLE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("ENABLE=%s not supported. Allowed values are [True, False]" % params.ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.VERBOSE %}\n{% if params.VERBOSE|lower is in [\'true\', \'false\'] %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=verbose VALUE={True if params.VERBOSE|lower == \'true\' else False}\n{% else %}\n{action_raise_error("VERBOSE=%s not supported. Allowed values are [True, False]" % params.VERBOSE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_X %}\n{% if params.CUSTOM_POS_X|float >= min.x and params.CUSTOM_POS_X|float <= max.x %}\n{% set _dummy = tl.park.custom.update({\'x\':params.CUSTOM_POS_X|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_X=%s must be within [%s - %s]" % (params.CUSTOM_POS_X, min.x, max.x))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_Y %}\n{% if params.CUSTOM_POS_Y|float >= min.y and params.CUSTOM_POS_Y|float <= max.y %}\n{% set _dummy = tl.park.custom.update({\'y\':params.CUSTOM_POS_Y|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_Y=%s must be within [%s - %s]" % (params.CUSTOM_POS_Y, min.y, max.y))}\n{% endif %}\n{% endif %}\n{% if params.CUSTOM_POS_DZ %}\n{% if params.CUSTOM_POS_DZ|float >= min.z and params.CUSTOM_POS_DZ|float <= max.z %}\n{% set _dummy = tl.park.custom.update({\'dz\':params.CUSTOM_POS_DZ|float|round(3)}) %}\n{% else %}\n{action_raise_error("CUSTOM_POS_DZ=%s must be within [%s - %s]" % (params.CUSTOM_POS_DZ, min.z, max.z))}\n{% endif %}\n{% endif %}\n{% if params.PARK_ENABLE %}\n{% if params.PARK_ENABLE|lower is in [\'true\', \'false\'] %}\n{% set _dummy = tl.park.update({\'enable\':True if params.PARK_ENABLE|lower == \'true\' else False}) %}\n{% else %}\n{action_raise_error("PARK_ENABLE=%s not supported. Allowed values are [True, False]" % params.PARK_ENABLE|capitalize)}\n{% endif %}\n{% endif %}\n{% if params.PARK_POS %}\n{% if params.PARK_POS|lower is in [\'center\',\'front_left\',\'front_right\',\'back_left\',\'back_right\',\'custom\',\'x_only\',\'y_only\'] %}\n{% set dic = {\'center\'      : {\'x\': park.center.x   , \'y\': park.center.y   , \'dz\': 1                },\n\'front_left\'  : {\'x\': park.min.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'front_right\' : {\'x\': park.max.x      , \'y\': park.min.y      , \'dz\': 0                },\n\'back_left\'   : {\'x\': park.min.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'back_right\'  : {\'x\': park.max.x      , \'y\': park.max.y      , \'dz\': 0                },\n\'custom\'      : {\'x\': tl.park.custom.x, \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz},\n\'x_only\'      : {\'x\': tl.park.custom.x, \'y\': \'none\'          , \'dz\': tl.park.custom.dz},\n\'y_only\'      : {\'x\': \'none\'          , \'y\': tl.park.custom.y, \'dz\': tl.park.custom.dz}} %}\n{% set _dummy = tl.park.update({\'pos\':params.PARK_POS|lower}) %}\n{% set _dummy = tl.park.update({\'coord\':dic[tl.park.pos]}) %}\n{% else %}\n{action_raise_error("PARK_POS=%s not supported. Allowed values are [CENTER, FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, CUSTOM, X_ONLY, Y_ONLY]"\n% params.PARK_POS|upper)}\n{% endif %}\n{% endif %}\n{% if params.PARK_TIME %}\n{% if params.PARK_TIME|float >= 0.0 %}\n{% set _dummy = tl.park.update({\'time\':params.PARK_TIME|float|round(3)}) %}\n{% else %}\n{action_raise_error("PARK_TIME=%s must be a positive number" % params.PARK_TIME)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=park VALUE="{tl.park}"\n{% if params.TRAVEL_SPEED %}\n{% if params.TRAVEL_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'travel\':params.TRAVEL_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("TRAVEL_SPEED=%s must be larger than 0" % params.TRAVEL_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_SPEED %}\n{% if params.RETRACT_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'retract\':params.RETRACT_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_SPEED=%s must be larger than 0" % params.RETRACT_SPEED)}\n{% endif %}\n{% endif %}\n{% if params.EXTRUDE_SPEED %}\n{% if params.EXTRUDE_SPEED|float > 0.0 %}\n{% set _dummy = tl.speed.update({\'extrude\':params.EXTRUDE_SPEED|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_SPEED=%s must be larger than 0" % params.EXTRUDE_SPEED)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=speed VALUE="{tl.speed}"\n{% if params.EXTRUDE_DISTANCE %}\n{% if params.EXTRUDE_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'extrude\':params.EXTRUDE_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("EXTRUDE_DISTANCE=%s must be specified as positiv number" % params.EXTRUDE_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.RETRACT_DISTANCE %}\n{% if params.RETRACT_DISTANCE|float >= 0.0 %}\n{% set _dummy = tl.extruder.update({\'retract\':params.RETRACT_DISTANCE|float|round(3)}) %}\n{% else %}\n{action_raise_error("RETRACT_DISTANCE=%s must be specified as positiv number" % params.RETRACT_DISTANCE)}\n{% endif %}\n{% endif %}\n{% if params.FW_RETRACT %}\n{% if params.FW_RETRACT|lower is in [\'true\', \'false\'] %}\n{% if \'firmware_retraction\' in printer.configfile.settings %}\n{% set _dummy = tl.extruder.update({\'fw_retract\': True if params.FW_RETRACT|lower == \'true\' else False}) %}\n{% else %}\n{% set _dummy = tl.extruder.update({\'fw_retract\':False}) %}\n{% if params.FW_RETRACT|capitalize == \'True\' %}\n{action_raise_error("[firmware_retraction] not defined in printer.cfg. Can not enable fw_retract")}\n{% endif %}\n{% endif %}\n{% else %}\n{action_raise_error("FW_RETRACT=%s not supported. Allowed values are [True, False]" % params.FW_RETRACT|capitalize)}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=extruder VALUE="{tl.extruder}"\n{% if printer.configfile.settings[\'gcode_macro pause\'] is defined %}\n{% set _dummy = tl.macro.update({\'pause\': printer.configfile.settings[\'gcode_macro pause\'].rename_existing}) %}\n{% endif %}\n{% if printer.configfile.settings[\'gcode_macro resume\'] is defined %}\n{% set _dummy = tl.macro.update({\'resume\': printer.configfile.settings[\'gcode_macro resume\'].rename_existing}) %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=macro VALUE="{tl.macro}"', 'description': 'Set user parameters for timelapse'}, 'gcode_macro timelapse_take_frame': {'gcode': '\n{% set hyperlapse = True if params.HYPERLAPSE and params.HYPERLAPSE|lower ==\'true\' else False %}\n{% if enable %}\n{% if (hyperlapse and printer[\'gcode_macro HYPERLAPSE\'].run) or\n(not hyperlapse and not printer[\'gcode_macro HYPERLAPSE\'].run) %}\n{% if park.enable %}\n{% set pos = {\'x\': \'X\' + park.coord.x|string if park.pos != \'y_only\' else \'\',\n\'y\': \'Y\' + park.coord.y|string if park.pos != \'x_only\' else \'\',\n\'z\': \'Z\'+ [printer.gcode_move.gcode_position.z + park.coord.dz, printer.toolhead.axis_maximum.z]|min|string} %}\n{% set restore = {\'absolute\': {\'coordinates\': printer.gcode_move.absolute_coordinates,\n\'extrude\'    : printer.gcode_move.absolute_extrude},\n\'speed\'   : printer.gcode_move.speed,\n\'e\'       : printer.gcode_move.gcode_position.e,\n\'factor\'  : {\'speed\'  : printer.gcode_move.speed_factor,\n\'extrude\': printer.gcode_move.extrude_factor}} %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=restore VALUE="{restore}"\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, minimum extruder temperature not reached!")}{% endif %}\n{% else %}\n{% if extruder.fw_retract %}\nG10\n{% else %}\nM83\nG0 E-{extruder.retract} F{speed.retract * 60}\n{% endif %}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=True\n{macro.pause}\nSET_GCODE_OFFSET X=0 Y=0\nG90\n{% if "xyz" not in printer.toolhead.homed_axes %}\n{% if verbose %}{action_respond_info("Timelapse: Warning, axis not homed yet!")}{% endif %}\n{% else %}\nG0 {pos.x} {pos.y} {pos.z} F{speed.travel * 60}\n{% endif %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=takingframe VALUE=True\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={check_time}\nM400\n{% endif %}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE={hyperlapse}\n{% endif %}\n{% else %}\n{% if verbose %}{action_respond_info("Timelapse: disabled, take frame ignored")}{% endif %}\n{% endif %}', 'description': 'Take Timelapse shoot', 'variable_enable': 'False', 'variable_takingframe': 'False', 'variable_park': "{'enable': False,\n'pos'   : 'center',\n'time'  : 0.1,\n'custom': {'x': 0, 'y': 0, 'dz': 0},\n'coord' : {'x': 0, 'y': 0, 'dz': 0}}", 'variable_extruder': "{'fw_retract': False,\n'retract': 1.0,\n'extrude': 1.0}", 'variable_speed': "{'travel': 100,\n'retract': 15,\n'extrude': 15}", 'variable_verbose': 'True', 'variable_check_time': '0.5', 'variable_restore': "{'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500, 'e':0, 'factor': {'speed': 1.0, 'extrude': 1.0}}", 'variable_macro': "{'pause': 'PAUSE', 'resume': 'RESUME'}", 'variable_is_paused': 'False'}, 'gcode_macro _timelapse_new_frame': {'gcode': '\n{action_call_remote_method("timelapse_newframe",\nmacropark=printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'].park,\nhyperlapse=params.HYPERLAPSE)}', 'description': 'action call for timelapse shoot. must be a seperate macro'}, 'delayed_gcode _wait_timelapse_take_frame': {'gcode': '\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% set factor = {\'speed\': printer.gcode_move.speed_factor, \'extrude\': printer.gcode_move.extrude_factor} %}\n{% if tl.takingframe %}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_TAKE_FRAME DURATION={tl.check_time}\n{% else %}\n{tl.macro.resume} VELOCITY={tl.speed.travel}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_TAKE_FRAME VARIABLE=is_paused VALUE=False\n{% if not printer[printer.toolhead.extruder].can_extrude %}\n{action_respond_info("Timelapse: Warning minimum extruder temperature not reached!")}\n{% else %}\n{% if tl.extruder.fw_retract %}\nG11\n{% else %}\nG0 E{tl.extruder.extrude} F{tl.speed.extrude * 60}\nG0 F{tl.restore.speed}\n{% if tl.restore.absolute.extrude %}\nM82\nG92 E{tl.restore.e}\n{% endif %}\n{% endif %}\n{% endif %}\n{% if tl.restore.factor.speed   != factor.speed   %} M220 S{(factor.speed*100)|round(0)}   {% endif %}\n{% if tl.restore.factor.extrude != factor.extrude %} M221 S{(factor.extrude*100)|round(0)} {% endif %}\n{% if not tl.restore.absolute.coordinates %} G91 {% endif %}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro hyperlapse': {'gcode': '\n{% set cycle = params.CYCLE|default(30)|int %}\n{% if params.ACTION and params.ACTION|lower == \'start\' %}\n{action_respond_info("Hyperlapse: frames started (Cycle %d sec)" % cycle)}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=True\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=cycle VALUE={cycle}\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True\n{% elif params.ACTION and params.ACTION|lower == \'stop\' %}\n{% if run %}{action_respond_info("Hyperlapse: frames stopped")}{% endif %}\nSET_GCODE_VARIABLE MACRO=HYPERLAPSE VARIABLE=run VALUE=False\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION=0\n{% else %}\n{action_raise_error("Hyperlapse: No valid input parameter\nUse:\n- HYPERLAPSE ACTION=START [CYCLE=time]\n- HYPERLAPSE ACTION=STOP")}\n{% endif %}', 'description': 'Start/Stop a hyperlapse recording', 'variable_cycle': '0', 'variable_run': 'False'}, 'delayed_gcode _hyperlapse_loop': {'gcode': '\nUPDATE_DELAYED_GCODE ID=_HYPERLAPSE_LOOP DURATION={printer["gcode_macro HYPERLAPSE"].cycle}\nTIMELAPSE_TAKE_FRAME HYPERLAPSE=True', 'initial_duration': 0.0}, 'gcode_macro timelapse_render': {'gcode': '\n{action_respond_info("Timelapse: Rendering started")}\n{action_call_remote_method("timelapse_render", byrendermacro="True")}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=render VALUE=True\n{printer.configfile.settings[\'gcode_macro pause\'].rename_existing}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5', 'description': 'Render Timelapse video and wait for the result', 'variable_render': 'False', 'variable_run_identifier': '0'}, 'delayed_gcode _wait_timelapse_render': {'gcode': '\n{% set ri = printer[\'gcode_macro TIMELAPSE_RENDER\'].run_identifier % 4 %}\nSET_GCODE_VARIABLE MACRO=TIMELAPSE_RENDER VARIABLE=run_identifier VALUE={ri + 1}\n{% if printer[\'gcode_macro TIMELAPSE_RENDER\'].render %}\nM117 Rendering {[\'-\',\'\\\\\',\'|\',\'/\'][ri]}\nUPDATE_DELAYED_GCODE ID=_WAIT_TIMELAPSE_RENDER DURATION=0.5\n{% else %}\n{action_respond_info("Timelapse: Rendering finished")}\nM117\n{printer.configfile.settings[\'gcode_macro resume\'].rename_existing}\n{% endif %}', 'initial_duration': 0.0}, 'gcode_macro test_stream_delay': {'gcode': '\n{% set min = printer.toolhead.axis_minimum %}\n{% set max = printer.toolhead.axis_maximum %}\n{% set act = printer.toolhead.position %}\n{% set tl = printer[\'gcode_macro TIMELAPSE_TAKE_FRAME\'] %}\n{% if act.z > 5.0 %}\nG0 X{min.x + 5.0} F{tl.speed.travel|int * 60}\nG0 X{(max.x-min.x)/2}\nG4 P{tl.park.time|float * 1000}\n_TIMELAPSE_NEW_FRAME HYPERLAPSE=FALSE\nG0 X{max.x - 5.0}\n{% else %}\n{action_raise_error("Toolhead z %.3f to low. Please place head above z = 5.0" % act.z)}\n{% endif %}', 'description': 'Helper macro to find stream and park delay'}, 'gcode_macro m486': {'gcode': '\n\n\n\n\n\n\n\n\n\n\n\n{% if \'exclude_object\' not in printer %}\n{action_raise_error("[exclude_object] is not enabled")}\n{% endif %}\n\n{% if \'T\' in params %}\nEXCLUDE_OBJECT RESET=1\n\n{% for i in range(params.T | int) %}\nEXCLUDE_OBJECT_DEFINE NAME={i}\n{% endfor %}\n{% endif %}\n\n{% if \'C\' in params %}\nEXCLUDE_OBJECT CURRENT=1\n{% endif %}\n\n{% if \'P\' in params %}\nEXCLUDE_OBJECT NAME={params.P}\n{% endif %}\n\n{% if \'S\' in params %}\n{% if params.S == \'-1\' %}\n{% if printer.exclude_object.current_object %}\nEXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}\n{% endif %}\n{% else %}\nEXCLUDE_OBJECT_START NAME={params.S}\n{% endif %}\n{% endif %}\n\n{% if \'U\' in params %}\nEXCLUDE_OBJECT RESET=1 NAME={params.U}\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro print_start': {'gcode': '\n{% set BED_TEMP = params.BED_TEMP|default(100)|float %}\n{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}\nM106 S255\nSET_FAN_SPEED FAN=exhaust_fan SPEED=1\nSET_FAN_SPEED FAN=chamber_fan SPEED=1\n\nM104 S{EXTRUDER_TEMP-50}\nM140 S{BED_TEMP}\n\nM190 S{BED_TEMP}\nM117 Homing...\nG28\nG1 Z20\nG1 Z20.0 F600\nG1 X20 Y20 F3000\n\nM109 S{EXTRUDER_TEMP}\nG1 X3 Y10 F3000\nG1 Z0.3 F240\nG92 E0\nM106 S0\nSET_FAN_SPEED FAN=exhaust_fan SPEED=0.8\nSET_FAN_SPEED FAN=chamber_fan SPEED=0.8\nG1 Y190 E15.0 F1500.0\nG1 X3.4 F4000\nG1 Y10 E30 F1200.0\nG92 E0.0\nG1 F4000\nG1 Z2\nM117 Printing...', 'description': 'G-Code macro'}, 'gcode_macro print_end': {'gcode': '\n\n{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}\n{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}\n{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}\n\n\n{% if printer.toolhead.position.x < (max_x - 15) %}\n{% set x_safe = 10.0 %}\n{% else %}\n{% set x_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.y < (max_y - 15) %}\n{% set y_safe = 10.0 %}\n{% else %}\n{% set y_safe = -10.0 %}\n{% endif %}\n\n{% if printer.toolhead.position.z < (max_z - 2) %}\n{% set z_safe = 50.0 %}\n{% else %}\n{% set z_safe = max_z - printer.toolhead.position.z %}\n{% endif %}\n\n\nM400\nG92 E0\nG1 E-4.0 F3600\nG91\nG0 Z{z_safe} + Z10 F3600\nG0 X{x_safe} Y{y_safe} F20000\nM104 S0\nM140 S0\nM106 S0\nG90\nG0 X{max_x / 2} Y{max_y - 5} F3600\nM84\nM117 Finished!', 'description': 'G-Code macro'}, 'gcode_macro g29': {'gcode': '\nM140 S110\nM190 S110\nG28\nZ_TILT_ADJUST\nBED_MESH_CALIBRATE profile=mesh\n\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n{% set X = params.X|default(50)|float %}\n{% set Y = params.Y|default(0)|float %}\n{% set Z = params.Z|default(10)|float %}\nSAVE_GCODE_STATE NAME=M600_state\nPAUSE\nG91\nG1 E-.8 F2700\nG1 Z{Z}\nG90\nG1 X{X} Y{Y} F3000\nG91\nG1 E-50 F1000\nRESTORE_GCODE_STATE NAME=M600_state', 'description': 'G-Code macro'}, 'gcode_macro m900': {'gcode': '\n\n{% set pa = params.K|float %}\nSET_PRESSURE_ADVANCE ADVANCE={pa}', 'description': 'G-Code macro'}, 'gcode_macro disable_steppers': {'gcode': '\nM84', 'description': 'G-Code macro'}, 'gcode_macro retraction_up': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float + 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro retraction_down': {'gcode': '\n{% set CRLEN = printer.firmware_retraction.retract_length|float %}\n{% set NRLEN = CRLEN|float - 0.1 %}\n{ action_respond_info("current retract_length %.2f, new retract_length %.2f" % (CRLEN, NRLEN))  }\nSET_RETRACTION RETRACT_LENGTH={NRLEN}', 'description': 'G-Code macro'}, 'gcode_macro set_retractionlength': {'gcode': '\nSET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}\nGET_RETRACTION', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_on': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro exhaustfan_off': {'gcode': '\nSET_FAN_SPEED FAN=Exhaust_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_on': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro enclosurefan_off': {'gcode': '\nSET_FAN_SPEED FAN=chamber_fan SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro rscs_on': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=1', 'description': 'G-Code macro'}, 'gcode_macro rscs_off': {'gcode': '\nSET_FAN_SPEED FAN=RSCS SPEED=0', 'description': 'G-Code macro'}, 'gcode_macro led_on': {'gcode': '\nSET_PIN PIN=LED value=1', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_PIN PIN=LED value=0', 'description': 'G-Code macro'}, 'gcode_macro pa_tunning': {'gcode': '\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500\nTUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_x': {'gcode': '\nTEST_RESONANCES AXIS=X', 'description': 'G-Code macro'}, 'gcode_macro test_resonnances_y': {'gcode': '\nTEST_RESONANCES AXIS=Y', 'description': 'G-Code macro'}, 'gcode_macro automatic_inputshaper': {'gcode': '\nSHAPER_CALIBRATE\nSave_config', 'description': 'G-Code macro'}, 'gcode_macro hold_resonance.': {'gcode': '\n\n{% set axis = params.AXIS|string %}\n\n{% set seconds = params.SECONDS|int %}\n\n{%set int = params.FREQ| int%}\nHOLD_RESONANCE {rawparams}', 'description': 'G-Code macro'}, 'gcode_macro dump_warnings': {'gcode': '\n{% set parameters = ["printer.configfile.warnings:"] %}\n{% for warning in printer.configfile.warnings %}\n{% set parameters = parameters.append("%s -> %s -> %s\\n%s" % (warning.type, warning.section, warning.option, warning.message)) %}\n{% endfor %}\n{action_respond_info(parameters|join("\\n"))}', 'description': 'Debug: Print all warning messages from klipper'}, 'gcode_macro enable_stepper': {'gcode': '\nSET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1\nSET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1', 'description': 'G-Code macro'}, 'gcode_macro sensorless_homing_test': {'gcode': '\n{% set stepper = params.STEPPER|string %}\n{% set Value = params.VALUE|int %}\nSET_TMC_FIELD STEPPER={axis} FIELD=sgt VALUE={VALUE}', 'description': 'G-Code macro'}, 'gcode_macro pid_calibrate_dropdown': {'gcode': '\n{% set heater = params.HEATER|string %}\n{% set target = params.TARGET|int %}\nPID_CALIBRATE HEATER={heater} TARGET={target}', 'description': 'G-Code macro'}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n\n\n\n\nG0 X{x_min+10} Y{y_min+10} Z{bound + 20} F{speed*60}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\n\n\nG0 X{x_min+10} Y{y_min+10} F{speed*60}\nG0 X{x_min+10} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_max-30} F{speed*60}\nG0 X{x_max-30} Y{y_min+10} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED\nG0 X115 Y115 Z30', 'description': 'G-Code macro'}, 'gcode_arcs': {'resolution': 0.1}, 'homing_override': {'axes': 'xyz', 'gcode': "\n{% if not 'Z' in params and not 'Y' in params and 'X' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\n{% elif not 'Z' in params and not 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 Y\n\n{% elif not 'Z' in params and 'X' in params and 'Y' in params %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\n\n{% elif 'Z' in params and not 'X' in params and not 'Y' in params %}\n\nG28 Z\n\n{% else %}\n\nFORCE_MOVE stepper=stepper_z velocity=12 distance=5\nG28 X\nG28 Y\nG28 Z\nG0 Z5 F4000\n\n{% endif %}"}, 'temperature_sensor mantam8p': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor cb1': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': 10.0, 'max_temp': 100.0}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'diag_pin': 'PF3', 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 50}, 'stepper_x': {'microsteps': 16, 'step_pin': 'PE2', 'dir_pin': '!PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PC11', 'endstop_pin': 'tmc2209_stepper_x:virtual_endstop', 'position_endstop': 0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_x1': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 2.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_x1': {'microsteps': 16, 'step_pin': 'PF12', 'dir_pin': '!PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PB3'}, 'tmc2209 stepper_y': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 16, 'step_pin': 'PD7', 'dir_pin': '!PD6', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PF10', 'endstop_pin': '^!PF5', 'position_endstop': -0.0, 'position_min': 0.0, 'position_max': 235.0, 'homing_speed': 50.0, 'second_homing_speed': 25.0, 'homing_retract_speed': 50.0, 'homing_retract_dist': 0.0, 'homing_positive_dir': False}, 'tmc2209 stepper_y1': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.65, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_y1': {'microsteps': 16, 'step_pin': 'PD3', 'dir_pin': '!PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PD5'}, 'force_move': {'enable_force_move': True}, 'tmc2209 stepper_z': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 1.0, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PA10', 'dir_pin': 'PA14', 'rotation_distance': 4.0, 'full_steps_per_rotation': 200, 'gear_ratio': [], 'enable_pin': '!PA15', 'endstop_pin': '^!PC2', 'position_endstop': 0.25, 'position_min': -2.0, 'position_max': 200.0, 'homing_speed': 20.0, 'second_homing_speed': 1.0, 'homing_retract_speed': 3.0, 'homing_retract_dist': 2.0, 'homing_positive_dir': False}, 'tmc2209 extruder': {'uart_pin': 'PD10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': True, 'stealthchop_threshold': 0.0, 'driver_multistep_filt': True, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_semin': 0, 'driver_seup': 0, 'driver_semax': 0, 'driver_sedn': 0, 'driver_seimin': 0, 'driver_iholddelay': 8, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_tpowerdown': 20, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 16, 'sensor_type': 'Generic 3950', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA1', 'min_temp': 0.0, 'max_temp': 400.0, 'min_extrude_temp': 0.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 17.605, 'pid_ki': 0.869, 'pid_kd': 89.127, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.5, 'filament_diameter': 1.75, 'max_extrude_cross_section': 500.0, 'max_extrude_only_velocity': 200.0, 'max_extrude_only_accel': 10000.0, 'max_extrude_only_distance': 1000.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD8', 'pressure_advance': 0.02, 'pressure_advance_smooth_time': 0.03, 'dir_pin': '!PC6', 'rotation_distance': 22.2, 'full_steps_per_rotation': 200, 'gear_ratio': [[50.0, 8.0]], 'enable_pin': '!PC7'}, 'heater_bed': {'sensor_type': 'ATC Semitec 104GT-2', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 130.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 64.882, 'pid_ki': 1.481, 'pid_kd': 710.453, 'heater_pin': 'PB7', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.0, 'cycle_time': 0.002, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ['extruder'], 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'fan_generic exhaust_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PC12'}, 'fan_generic chamber_fan': {'max_power': 1.0, 'kick_start_time': 0.1, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE4'}, 'temperature_sensor chamber': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA2', 'min_temp': 0.0, 'max_temp': 60.0, 'gcode_id': 'C: C'}, 'output_pin led': {'pwm': True, 'pin': 'PB5', 'cycle_time': 0.01, 'hardware_pwm': False, 'scale': 1.0, 'value': 1.0, 'shutdown_value': 1.0}, 'idle_timeout': {'timeout': 1800.0, 'gcode': '\n{% if printer.pause_resume.is_paused %}\nM104 S0\n{% else %}\nTURN_OFF_HEATERS\n\n{% endif %}'}, 'bdsensor': {'z_adjust': 0.0, 'z_offset': 0.0, 'position_endstop': 0.7, 'deactivate_on_each_sample': True, 'no_stop_probe': '', 'collision_homing': 0, 'collision_calibrate': 0, 'rt_sample_time': 0, 'rt_max_range': 0, 'qgl_tilt_probe': 1, 'switch_mode_sample_time': 0.006, 'speed': 5.0, 'activate_gcode': '', 'deactivate_gcode': '', 'sda_pin': 'PB2', 'scl_pin': 'PB1', 'delay': '20', 'width_filament': 0, 'lift_speed': 5.0, 'x_offset': 0.0, 'y_offset': 38.0, 'samples': 1, 'sample_retract_dist': 5.0, 'samples_result': 'average', 'samples_tolerance': 0.1, 'samples_tolerance_retries': 0}, 'bed_mesh': {'adaptive_margin': 0.0, 'probe_count': [15, 15], 'mesh_min': [20.0, 50.0], 'mesh_max': [210.0, 220.0], 'mesh_pps': [2, 2], 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'scan_overshoot': 0, 'horizontal_move_z': 0.7, 'speed': 200.0, 'fade_start': 1.0, 'fade_end': 10.0, 'fade_target': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': [[-0.17, -0.17, -0.19, -0.21, -0.22, -0.24, -0.24, -0.26, -0.27, -0.28, -0.3, -0.31, -0.34, -0.33, -0.3], [-0.18, -0.18, -0.21, -0.23, -0.24, -0.27, -0.24, -0.28, -0.29, -0.3, -0.3, -0.33, -0.37, -0.35, -0.33], [-0.14, -0.19, -0.2, -0.22, -0.24, -0.26, -0.27, -0.28, -0.29, -0.29, -0.31, -0.32, -0.35, -0.37, -0.37], [-0.2, -0.2, -0.22, -0.24, -0.26, -0.29, -0.28, -0.3, -0.29, -0.3, -0.31, -0.32, -0.37, -0.37, -0.36], [-0.2, -0.2, -0.22, -0.26, -0.27, -0.28, -0.29, -0.29, -0.29, -0.28, -0.3, -0.31, -0.35, -0.37, -0.37], [-0.22, -0.22, -0.25, -0.27, -0.29, -0.3, -0.29, -0.29, -0.29, -0.31, -0.36, -0.36, -0.36, -0.36, -0.34], [-0.22, -0.23, -0.25, -0.28, -0.3, -0.3, -0.3, -0.31, -0.3, -0.31, -0.33, -0.34, -0.35, -0.37, -0.37], [-0.26, -0.26, -0.27, -0.3, -0.3, -0.32, -0.3, -0.31, -0.32, -0.33, -0.34, -0.35, -0.37, -0.37, -0.36], [-0.27, -0.27, -0.27, -0.29, -0.3, -0.31, -0.31, -0.32, -0.32, -0.32, -0.33, -0.34, -0.36, -0.37, -0.38], [-0.25, -0.24, -0.28, -0.3, -0.3, -0.31, -0.3, -0.31, -0.31, -0.32, -0.32, -0.34, -0.36, -0.36, -0.36], [-0.24, -0.26, -0.26, -0.28, -0.3, -0.3, -0.3, -0.3, -0.32, -0.32, -0.32, -0.33, -0.35, -0.36, -0.38], [-0.23, -0.24, -0.27, -0.3, -0.3, -0.31, -0.3, -0.3, -0.3, -0.31, -0.32, -0.32, -0.34, -0.36, -0.34], [-0.22, -0.22, -0.23, -0.28, -0.29, -0.3, -0.29, -0.3, -0.3, -0.3, -0.3, -0.3, -0.32, -0.33, -0.37], [-0.24, -0.25, -0.25, -0.28, -0.27, -0.28, -0.27, -0.29, -0.29, -0.29, -0.32, -0.32, -0.32, -0.32, -0.31], [-0.2, -0.22, -0.23, -0.26, -0.26, -0.27, -0.24, -0.26, -0.26, -0.26, -0.27, -0.28, -0.3, -0.3, -0.31]], 'min_x': 20.0, 'max_x': 209.98000000000002, 'min_y': 50.0, 'max_y': 219.95999999999992, 'x_count': 15, 'y_count': 15, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'bed_screws': {'screw1': [20.0, 20.0], 'screw1_name': 'screw at 20.000,20.000', 'screw2': [20.0, 220.0], 'screw2_name': 'screw at 20.000,220.000', 'screw3': [220.0, 220.0], 'screw3_name': 'screw at 220.000,220.000', 'screw4': [220.0, 20.0], 'screw4_name': 'screw at 220.000,20.000', 'speed': 50.0, 'probe_speed': 5.0, 'horizontal_move_z': 5.0, 'probe_height': 0.0}, 'screws_tilt_adjust': {'screw1': [20.0, 0.0], 'screw1_name': '"Front Left"', 'screw2': [215.0, 0.0], 'screw2_name': '"Front Right"', 'screw3': [215.0, 190.0], 'screw3_name': '"Back Right"', 'screw4': [20.0, 190.0], 'screw4_name': '"Back Left"', 'screw_thread': 'CW-M3', 'horizontal_move_z': 5.0, 'speed': 150.0}, 'printer': {'max_velocity': 500.0, 'max_accel': 10000.0, 'minimum_cruise_ratio': 0.5, 'square_corner_velocity': 10.0, 'kinematics': 'corexy', 'max_z_velocity': 20.0, 'max_z_accel': 1500.0}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}}}
2024-11-24 19:07:27,542 [printer.py:stop_tempstore_updates()] - Stopping tempstore
2024-11-24 19:07:27,544 [printer.py:reinit()] - Klipper version: v0.12.0-379-gf2e69a370-dirty
2024-11-24 19:07:27,545 [printer.py:reinit()] - # Extruders: 1
2024-11-24 19:07:27,546 [printer.py:reinit()] - # Temperature devices: 4
2024-11-24 19:07:27,546 [printer.py:reinit()] - # Fans: 4
2024-11-24 19:07:27,546 [printer.py:reinit()] - # Output pins: 1
2024-11-24 19:07:27,547 [printer.py:reinit()] - # Leds: 0
2024-11-24 19:07:27,547 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/gcode/help
2024-11-24 19:07:27,574 [KlippyWebsocket.py:object_subscription()] - Sending printer.objects.subscribe
2024-11-24 19:07:27,577 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/printer/objects/query?bed_mesh&configfile&display_status&extruder&fan&gcode_move&heater_bed&idle_timeout&pause_resume&print_stats&toolhead&virtual_sdcard&webhooks&motion_report&firmware_retraction&exclude_object&manual_probe&extruder&heater_bed&temperature_sensor MantaM8P&temperature_sensor CB1&temperature_sensor chamber&fan&fan_generic exhaust_fan&fan_generic chamber_fan&heater_fan hotend_fan&output_pin LED
2024-11-24 19:07:27,825 [files.py:set_gcodes_path()] - Gcodes path: /home/biqu/printer_data/gcodes
2024-11-24 19:07:27,826 [screen.py:init_klipper()] - Printer initialized
2024-11-24 19:07:27,826 [printer.py:change_state()] - Changing state from 'disconnected' to 'startup'
2024-11-24 19:07:27,827 [printer.py:change_state()] - Adding callback for state: startup
2024-11-24 19:07:28,769 [printer.py:change_state()] - Changing state from 'startup' to 'ready'
2024-11-24 19:07:28,770 [printer.py:change_state()] - Adding callback for state: ready
2024-11-24 19:07:28,773 [KlippyWebsocket.py:get_file_list()] - Sending server.files.list
2024-11-24 19:07:28,779 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 19:07:28,931 [main_menu.py:__init__()] - ### Making MainMenu
2024-11-24 19:07:28,950 [main_menu.py:add_device()] - Adding device: extruder
2024-11-24 19:07:28,961 [main_menu.py:add_device()] - Adding device: heater_bed
2024-11-24 19:07:28,973 [main_menu.py:add_device()] - Adding device: temperature_sensor MantaM8P
2024-11-24 19:07:28,984 [main_menu.py:add_device()] - Adding device: temperature_sensor CB1
2024-11-24 19:07:28,994 [main_menu.py:add_device()] - Adding device: temperature_sensor chamber
2024-11-24 19:07:29,074 [screen.py:attach_panel()] - Current panel hierarchy: main_menu
2024-11-24 19:07:29,076 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/temperature_store
2024-11-24 19:07:29,139 [printer.py:init_temp_store()] - Temp store: ['temperature_sensor MantaM8P', 'temperature_sensor CB1', 'heater_bed', 'temperature_sensor chamber', 'extruder']
2024-11-24 19:07:29,142 [KlippyRest.py:_do_request()] - Sending get to http://127.0.0.1:7125/server/config
2024-11-24 19:07:29,162 [screen.py:init_tempstore()] - Temperature store size: 1200
2024-11-24 19:08:14,647 [printer.py:change_state()] - Changing state from 'ready' to 'printing'
2024-11-24 19:08:14,648 [printer.py:change_state()] - Adding callback for state: printing
2024-11-24 19:08:14,666 [screen.py:show_panel()] - Reinitializing panel
2024-11-24 19:08:14,903 [screen.py:attach_panel()] - Current panel hierarchy: job_status
2024-11-24 19:08:14,914 [job_status.py:set_state()] - Changing job_status state from 'standby' to 'printing'
2024-11-24 19:08:14,930 [job_status.py:update_file_metadata()] - Update Metadata. File: TH008.gcode Size: 24950020
2024-11-24 19:08:14,941 [job_status.py:show_file_thumbnail()] - TH008.gcode
